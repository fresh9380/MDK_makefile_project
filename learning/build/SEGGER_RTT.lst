ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"SEGGER_RTT.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._GetAvailWriteSpace,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	_GetAvailWriteSpace:
  26              	.LVL0:
  27              	.LFB4:
  28              		.file 1 "RTT/SEGGER_RTT.c"
   1:RTT/SEGGER_RTT.c **** /*********************************************************************
   2:RTT/SEGGER_RTT.c **** *                    SEGGER Microcontroller GmbH                     *
   3:RTT/SEGGER_RTT.c **** *                        The Embedded Experts                        *
   4:RTT/SEGGER_RTT.c **** **********************************************************************
   5:RTT/SEGGER_RTT.c **** *                                                                    *
   6:RTT/SEGGER_RTT.c **** *            (c) 1995 - 2019 SEGGER Microcontroller GmbH             *
   7:RTT/SEGGER_RTT.c **** *                                                                    *
   8:RTT/SEGGER_RTT.c **** *       www.segger.com     Support: support@segger.com               *
   9:RTT/SEGGER_RTT.c **** *                                                                    *
  10:RTT/SEGGER_RTT.c **** **********************************************************************
  11:RTT/SEGGER_RTT.c **** *                                                                    *
  12:RTT/SEGGER_RTT.c **** *       SEGGER RTT * Real Time Transfer for embedded targets         *
  13:RTT/SEGGER_RTT.c **** *                                                                    *
  14:RTT/SEGGER_RTT.c **** **********************************************************************
  15:RTT/SEGGER_RTT.c **** *                                                                    *
  16:RTT/SEGGER_RTT.c **** * All rights reserved.                                               *
  17:RTT/SEGGER_RTT.c **** *                                                                    *
  18:RTT/SEGGER_RTT.c **** * SEGGER strongly recommends to not make any changes                 *
  19:RTT/SEGGER_RTT.c **** * to or modify the source code of this software in order to stay     *
  20:RTT/SEGGER_RTT.c **** * compatible with the RTT protocol and J-Link.                       *
  21:RTT/SEGGER_RTT.c **** *                                                                    *
  22:RTT/SEGGER_RTT.c **** * Redistribution and use in source and binary forms, with or         *
  23:RTT/SEGGER_RTT.c **** * without modification, are permitted provided that the following    *
  24:RTT/SEGGER_RTT.c **** * condition is met:                                                  *
  25:RTT/SEGGER_RTT.c **** *                                                                    *
  26:RTT/SEGGER_RTT.c **** * o Redistributions of source code must retain the above copyright   *
  27:RTT/SEGGER_RTT.c **** *   notice, this condition and the following disclaimer.             *
  28:RTT/SEGGER_RTT.c **** *                                                                    *
  29:RTT/SEGGER_RTT.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND             *
  30:RTT/SEGGER_RTT.c **** * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,        *
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 2


  31:RTT/SEGGER_RTT.c **** * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF           *
  32:RTT/SEGGER_RTT.c **** * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE           *
  33:RTT/SEGGER_RTT.c **** * DISCLAIMED. IN NO EVENT SHALL SEGGER Microcontroller BE LIABLE FOR *
  34:RTT/SEGGER_RTT.c **** * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR           *
  35:RTT/SEGGER_RTT.c **** * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT  *
  36:RTT/SEGGER_RTT.c **** * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;    *
  37:RTT/SEGGER_RTT.c **** * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF      *
  38:RTT/SEGGER_RTT.c **** * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT          *
  39:RTT/SEGGER_RTT.c **** * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE  *
  40:RTT/SEGGER_RTT.c **** * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH   *
  41:RTT/SEGGER_RTT.c **** * DAMAGE.                                                            *
  42:RTT/SEGGER_RTT.c **** *                                                                    *
  43:RTT/SEGGER_RTT.c **** **********************************************************************
  44:RTT/SEGGER_RTT.c **** *                                                                    *
  45:RTT/SEGGER_RTT.c **** *       RTT version: 6.52b                                           *
  46:RTT/SEGGER_RTT.c **** *                                                                    *
  47:RTT/SEGGER_RTT.c **** **********************************************************************
  48:RTT/SEGGER_RTT.c **** 
  49:RTT/SEGGER_RTT.c **** ---------------------------END-OF-HEADER------------------------------
  50:RTT/SEGGER_RTT.c **** File    : SEGGER_RTT.c
  51:RTT/SEGGER_RTT.c **** Purpose : Implementation of SEGGER real-time transfer (RTT) which
  52:RTT/SEGGER_RTT.c ****           allows real-time communication on targets which support
  53:RTT/SEGGER_RTT.c ****           debugger memory accesses while the CPU is running.
  54:RTT/SEGGER_RTT.c **** Revision: $Rev: 14765 $
  55:RTT/SEGGER_RTT.c **** 
  56:RTT/SEGGER_RTT.c **** Additional information:
  57:RTT/SEGGER_RTT.c ****           Type "int" is assumed to be 32-bits in size
  58:RTT/SEGGER_RTT.c ****           H->T    Host to target communication
  59:RTT/SEGGER_RTT.c ****           T->H    Target to host communication
  60:RTT/SEGGER_RTT.c **** 
  61:RTT/SEGGER_RTT.c ****           RTT channel 0 is always present and reserved for Terminal usage.
  62:RTT/SEGGER_RTT.c ****           Name is fixed to "Terminal"
  63:RTT/SEGGER_RTT.c **** 
  64:RTT/SEGGER_RTT.c ****           Effective buffer size: SizeOfBuffer - 1
  65:RTT/SEGGER_RTT.c **** 
  66:RTT/SEGGER_RTT.c ****           WrOff == RdOff:       Buffer is empty
  67:RTT/SEGGER_RTT.c ****           WrOff == (RdOff - 1): Buffer is full
  68:RTT/SEGGER_RTT.c ****           WrOff >  RdOff:       Free space includes wrap-around
  69:RTT/SEGGER_RTT.c ****           WrOff <  RdOff:       Used space includes wrap-around
  70:RTT/SEGGER_RTT.c ****           (WrOff == (SizeOfBuffer - 1)) && (RdOff == 0):  
  71:RTT/SEGGER_RTT.c ****                                 Buffer full and wrap-around after next byte
  72:RTT/SEGGER_RTT.c **** 
  73:RTT/SEGGER_RTT.c **** 
  74:RTT/SEGGER_RTT.c **** ----------------------------------------------------------------------
  75:RTT/SEGGER_RTT.c **** */
  76:RTT/SEGGER_RTT.c **** 
  77:RTT/SEGGER_RTT.c **** #include "SEGGER_RTT.h"
  78:RTT/SEGGER_RTT.c **** 
  79:RTT/SEGGER_RTT.c **** #include <string.h>                 // for memcpy
  80:RTT/SEGGER_RTT.c **** 
  81:RTT/SEGGER_RTT.c **** /*********************************************************************
  82:RTT/SEGGER_RTT.c **** *
  83:RTT/SEGGER_RTT.c **** *       Configuration, default values
  84:RTT/SEGGER_RTT.c **** *
  85:RTT/SEGGER_RTT.c **** **********************************************************************
  86:RTT/SEGGER_RTT.c **** */
  87:RTT/SEGGER_RTT.c **** 
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 3


  88:RTT/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_UP
  89:RTT/SEGGER_RTT.c ****   #define BUFFER_SIZE_UP                                  1024  // Size of the buffer for terminal 
  90:RTT/SEGGER_RTT.c **** #endif
  91:RTT/SEGGER_RTT.c **** 
  92:RTT/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_DOWN
  93:RTT/SEGGER_RTT.c ****   #define BUFFER_SIZE_DOWN                                16    // Size of the buffer for terminal 
  94:RTT/SEGGER_RTT.c **** #endif
  95:RTT/SEGGER_RTT.c **** 
  96:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_UP_BUFFERS
  97:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_UP_BUFFERS                    2    // Number of up-buffers (T->H) avai
  98:RTT/SEGGER_RTT.c **** #endif
  99:RTT/SEGGER_RTT.c **** 
 100:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_DOWN_BUFFERS
 101:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_DOWN_BUFFERS                  2    // Number of down-buffers (H->T) av
 102:RTT/SEGGER_RTT.c **** #endif
 103:RTT/SEGGER_RTT.c **** 
 104:RTT/SEGGER_RTT.c **** #ifndef SEGGER_RTT_BUFFER_SECTION
 105:RTT/SEGGER_RTT.c ****   #if defined(SEGGER_RTT_SECTION)
 106:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_BUFFER_SECTION SEGGER_RTT_SECTION
 107:RTT/SEGGER_RTT.c ****   #endif
 108:RTT/SEGGER_RTT.c **** #endif
 109:RTT/SEGGER_RTT.c **** 
 110:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_ALIGNMENT
 111:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGNMENT                            0
 112:RTT/SEGGER_RTT.c **** #endif
 113:RTT/SEGGER_RTT.c **** 
 114:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_BUFFER_ALIGNMENT
 115:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGNMENT                     0
 116:RTT/SEGGER_RTT.c **** #endif
 117:RTT/SEGGER_RTT.c **** 
 118:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MODE_DEFAULT
 119:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_MODE_DEFAULT                         SEGGER_RTT_MODE_NO_BLOCK_SKIP
 120:RTT/SEGGER_RTT.c **** #endif
 121:RTT/SEGGER_RTT.c **** 
 122:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_LOCK
 123:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_LOCK()
 124:RTT/SEGGER_RTT.c **** #endif
 125:RTT/SEGGER_RTT.c **** 
 126:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_UNLOCK
 127:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_UNLOCK()
 128:RTT/SEGGER_RTT.c **** #endif
 129:RTT/SEGGER_RTT.c **** 
 130:RTT/SEGGER_RTT.c **** #ifndef   STRLEN
 131:RTT/SEGGER_RTT.c ****   #define STRLEN(a)                                       strlen((a))
 132:RTT/SEGGER_RTT.c **** #endif
 133:RTT/SEGGER_RTT.c **** 
 134:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY_USE_BYTELOOP
 135:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_MEMCPY_USE_BYTELOOP                  0
 136:RTT/SEGGER_RTT.c **** #endif
 137:RTT/SEGGER_RTT.c **** 
 138:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY
 139:RTT/SEGGER_RTT.c ****   #ifdef  MEMCPY
 140:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      MEMCPY((pDest), (pSrc), (NumBytes))
 141:RTT/SEGGER_RTT.c ****   #else
 142:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      memcpy((pDest), (pSrc), (NumBytes))
 143:RTT/SEGGER_RTT.c ****   #endif
 144:RTT/SEGGER_RTT.c **** #endif
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 4


 145:RTT/SEGGER_RTT.c **** 
 146:RTT/SEGGER_RTT.c **** #ifndef   MIN
 147:RTT/SEGGER_RTT.c ****   #define MIN(a, b)         (((a) < (b)) ? (a) : (b))
 148:RTT/SEGGER_RTT.c **** #endif
 149:RTT/SEGGER_RTT.c **** 
 150:RTT/SEGGER_RTT.c **** #ifndef   MAX
 151:RTT/SEGGER_RTT.c ****   #define MAX(a, b)         (((a) > (b)) ? (a) : (b))
 152:RTT/SEGGER_RTT.c **** #endif
 153:RTT/SEGGER_RTT.c **** //
 154:RTT/SEGGER_RTT.c **** // For some environments, NULL may not be defined until certain headers are included
 155:RTT/SEGGER_RTT.c **** //
 156:RTT/SEGGER_RTT.c **** #ifndef NULL
 157:RTT/SEGGER_RTT.c ****   #define NULL 0
 158:RTT/SEGGER_RTT.c **** #endif
 159:RTT/SEGGER_RTT.c **** 
 160:RTT/SEGGER_RTT.c **** /*********************************************************************
 161:RTT/SEGGER_RTT.c **** *
 162:RTT/SEGGER_RTT.c **** *       Defines, fixed
 163:RTT/SEGGER_RTT.c **** *
 164:RTT/SEGGER_RTT.c **** **********************************************************************
 165:RTT/SEGGER_RTT.c **** */
 166:RTT/SEGGER_RTT.c **** #if (defined __ICCARM__) || (defined __ICCRX__)
 167:RTT/SEGGER_RTT.c ****   #define RTT_PRAGMA(P) _Pragma(#P)
 168:RTT/SEGGER_RTT.c **** #endif
 169:RTT/SEGGER_RTT.c **** 
 170:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT || SEGGER_RTT_BUFFER_ALIGNMENT
 171:RTT/SEGGER_RTT.c ****   #if (defined __GNUC__)
 172:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 173:RTT/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 174:RTT/SEGGER_RTT.c ****     #define PRAGMA(A) _Pragma(#A)
 175:RTT/SEGGER_RTT.c **** #define SEGGER_RTT_ALIGN(Var, Alignment) RTT_PRAGMA(data_alignment=Alignment) \
 176:RTT/SEGGER_RTT.c ****                                   Var
 177:RTT/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 178:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 179:RTT/SEGGER_RTT.c ****   #else
 180:RTT/SEGGER_RTT.c ****     #error "Alignment not supported for this compiler."
 181:RTT/SEGGER_RTT.c ****   #endif
 182:RTT/SEGGER_RTT.c **** #else
 183:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGN(Var, Alignment) Var
 184:RTT/SEGGER_RTT.c **** #endif
 185:RTT/SEGGER_RTT.c **** 
 186:RTT/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION) || defined (SEGGER_RTT_BUFFER_SECTION)
 187:RTT/SEGGER_RTT.c ****   #if (defined __GNUC__)
 188:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section))) Var
 189:RTT/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 190:RTT/SEGGER_RTT.c **** #define SEGGER_RTT_PUT_SECTION(Var, Section) RTT_PRAGMA(location=Section) \
 191:RTT/SEGGER_RTT.c ****                                         Var
 192:RTT/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 193:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section), zero_init))  Va
 194:RTT/SEGGER_RTT.c ****   #else
 195:RTT/SEGGER_RTT.c ****     #error "Section placement not supported for this compiler."
 196:RTT/SEGGER_RTT.c ****   #endif
 197:RTT/SEGGER_RTT.c **** #else
 198:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_SECTION(Var, Section) Var
 199:RTT/SEGGER_RTT.c **** #endif
 200:RTT/SEGGER_RTT.c **** 
 201:RTT/SEGGER_RTT.c **** 
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 5


 202:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT
 203:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_ALIGNMENT)
 204:RTT/SEGGER_RTT.c **** #else
 205:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  Var
 206:RTT/SEGGER_RTT.c **** #endif
 207:RTT/SEGGER_RTT.c **** 
 208:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_BUFFER_ALIGNMENT
 209:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_BUFFER_ALIGNMENT)
 210:RTT/SEGGER_RTT.c **** #else
 211:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  Var
 212:RTT/SEGGER_RTT.c **** #endif
 213:RTT/SEGGER_RTT.c **** 
 214:RTT/SEGGER_RTT.c **** 
 215:RTT/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION)
 216:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_SECTION)
 217:RTT/SEGGER_RTT.c **** #else
 218:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) Var
 219:RTT/SEGGER_RTT.c **** #endif
 220:RTT/SEGGER_RTT.c **** 
 221:RTT/SEGGER_RTT.c **** #if defined(SEGGER_RTT_BUFFER_SECTION)
 222:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_BUFFER_SECTION)
 223:RTT/SEGGER_RTT.c **** #else
 224:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) Var
 225:RTT/SEGGER_RTT.c **** #endif
 226:RTT/SEGGER_RTT.c **** 
 227:RTT/SEGGER_RTT.c **** /*********************************************************************
 228:RTT/SEGGER_RTT.c **** *
 229:RTT/SEGGER_RTT.c **** *       Static const data
 230:RTT/SEGGER_RTT.c **** *
 231:RTT/SEGGER_RTT.c **** **********************************************************************
 232:RTT/SEGGER_RTT.c **** */
 233:RTT/SEGGER_RTT.c **** 
 234:RTT/SEGGER_RTT.c **** static unsigned char _aTerminalId[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B
 235:RTT/SEGGER_RTT.c **** 
 236:RTT/SEGGER_RTT.c **** /*********************************************************************
 237:RTT/SEGGER_RTT.c **** *
 238:RTT/SEGGER_RTT.c **** *       Static data
 239:RTT/SEGGER_RTT.c **** *
 240:RTT/SEGGER_RTT.c **** **********************************************************************
 241:RTT/SEGGER_RTT.c **** */
 242:RTT/SEGGER_RTT.c **** //
 243:RTT/SEGGER_RTT.c **** // RTT Control Block and allocate buffers for channel 0
 244:RTT/SEGGER_RTT.c **** //
 245:RTT/SEGGER_RTT.c **** SEGGER_RTT_PUT_CB_SECTION(SEGGER_RTT_CB_ALIGN(SEGGER_RTT_CB _SEGGER_RTT));
 246:RTT/SEGGER_RTT.c **** 
 247:RTT/SEGGER_RTT.c **** SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acUpBuffer  [BUFFER_SIZE_UP]));
 248:RTT/SEGGER_RTT.c **** SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acDownBuffer[BUFFER_SIZE_DOWN]))
 249:RTT/SEGGER_RTT.c **** 
 250:RTT/SEGGER_RTT.c **** static unsigned char _ActiveTerminal;
 251:RTT/SEGGER_RTT.c **** 
 252:RTT/SEGGER_RTT.c **** /*********************************************************************
 253:RTT/SEGGER_RTT.c **** *
 254:RTT/SEGGER_RTT.c **** *       Static functions
 255:RTT/SEGGER_RTT.c **** *
 256:RTT/SEGGER_RTT.c **** **********************************************************************
 257:RTT/SEGGER_RTT.c **** */
 258:RTT/SEGGER_RTT.c **** 
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 6


 259:RTT/SEGGER_RTT.c **** /*********************************************************************
 260:RTT/SEGGER_RTT.c **** *
 261:RTT/SEGGER_RTT.c **** *       _DoInit()
 262:RTT/SEGGER_RTT.c **** *
 263:RTT/SEGGER_RTT.c **** *  Function description
 264:RTT/SEGGER_RTT.c **** *    Initializes the control block an buffers.
 265:RTT/SEGGER_RTT.c **** *    May only be called via INIT() to avoid overriding settings.
 266:RTT/SEGGER_RTT.c **** *
 267:RTT/SEGGER_RTT.c **** */
 268:RTT/SEGGER_RTT.c **** #define INIT()  do {                                            \
 269:RTT/SEGGER_RTT.c ****                   if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
 270:RTT/SEGGER_RTT.c ****                 } while (0)
 271:RTT/SEGGER_RTT.c **** static void _DoInit(void) {
 272:RTT/SEGGER_RTT.c ****   SEGGER_RTT_CB* p;
 273:RTT/SEGGER_RTT.c ****   //
 274:RTT/SEGGER_RTT.c ****   // Initialize control block
 275:RTT/SEGGER_RTT.c ****   //
 276:RTT/SEGGER_RTT.c ****   p = &_SEGGER_RTT;
 277:RTT/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 278:RTT/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 279:RTT/SEGGER_RTT.c ****   //
 280:RTT/SEGGER_RTT.c ****   // Initialize up buffer 0
 281:RTT/SEGGER_RTT.c ****   //
 282:RTT/SEGGER_RTT.c ****   p->aUp[0].sName         = "Terminal";
 283:RTT/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 284:RTT/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 285:RTT/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 286:RTT/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 287:RTT/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 288:RTT/SEGGER_RTT.c ****   //
 289:RTT/SEGGER_RTT.c ****   // Initialize down buffer 0
 290:RTT/SEGGER_RTT.c ****   //
 291:RTT/SEGGER_RTT.c ****   p->aDown[0].sName         = "Terminal";
 292:RTT/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 293:RTT/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 294:RTT/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 295:RTT/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 296:RTT/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 297:RTT/SEGGER_RTT.c ****   //
 298:RTT/SEGGER_RTT.c ****   // Finish initialization of the control block.
 299:RTT/SEGGER_RTT.c ****   // Copy Id string in three steps to make sure "SEGGER RTT" is not found
 300:RTT/SEGGER_RTT.c ****   // in initializer memory (usually flash) by J-Link
 301:RTT/SEGGER_RTT.c ****   //
 302:RTT/SEGGER_RTT.c ****   strcpy(&p->acID[7], "RTT");
 303:RTT/SEGGER_RTT.c ****   strcpy(&p->acID[0], "SEGGER");
 304:RTT/SEGGER_RTT.c ****   p->acID[6] = ' ';
 305:RTT/SEGGER_RTT.c **** }
 306:RTT/SEGGER_RTT.c **** 
 307:RTT/SEGGER_RTT.c **** /*********************************************************************
 308:RTT/SEGGER_RTT.c **** *
 309:RTT/SEGGER_RTT.c **** *       _WriteBlocking()
 310:RTT/SEGGER_RTT.c **** *
 311:RTT/SEGGER_RTT.c **** *  Function description
 312:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 313:RTT/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 314:RTT/SEGGER_RTT.c **** *    read by the host.
 315:RTT/SEGGER_RTT.c **** *    The caller is responsible for managing the write chunk sizes as
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 7


 316:RTT/SEGGER_RTT.c **** *    _WriteBlocking() will block until all data has been posted successfully.
 317:RTT/SEGGER_RTT.c **** *
 318:RTT/SEGGER_RTT.c **** *  Parameters
 319:RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 320:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 321:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 322:RTT/SEGGER_RTT.c **** *
 323:RTT/SEGGER_RTT.c **** *  Return value
 324:RTT/SEGGER_RTT.c **** *    >= 0 - Number of bytes written into buffer.
 325:RTT/SEGGER_RTT.c **** */
 326:RTT/SEGGER_RTT.c **** static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes)
 327:RTT/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 328:RTT/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 329:RTT/SEGGER_RTT.c ****   unsigned RdOff;
 330:RTT/SEGGER_RTT.c ****   unsigned WrOff;
 331:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 332:RTT/SEGGER_RTT.c ****   char*    pDst;
 333:RTT/SEGGER_RTT.c **** #endif
 334:RTT/SEGGER_RTT.c ****   //
 335:RTT/SEGGER_RTT.c ****   // Write data to buffer and handle wrap-around if necessary
 336:RTT/SEGGER_RTT.c ****   //
 337:RTT/SEGGER_RTT.c ****   NumBytesWritten = 0u;
 338:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 339:RTT/SEGGER_RTT.c ****   do {
 340:RTT/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 341:RTT/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 342:RTT/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 343:RTT/SEGGER_RTT.c ****     } else {
 344:RTT/SEGGER_RTT.c ****       NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 345:RTT/SEGGER_RTT.c ****     }
 346:RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes 
 347:RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 348:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 349:RTT/SEGGER_RTT.c ****     pDst = pRing->pBuffer + WrOff;
 350:RTT/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 351:RTT/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 352:RTT/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 353:RTT/SEGGER_RTT.c ****     while (NumBytesToWrite--) {
 354:RTT/SEGGER_RTT.c ****       *pDst++ = *pBuffer++;
 355:RTT/SEGGER_RTT.c ****     };
 356:RTT/SEGGER_RTT.c **** #else
 357:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 358:RTT/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 359:RTT/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 360:RTT/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 361:RTT/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 362:RTT/SEGGER_RTT.c **** #endif
 363:RTT/SEGGER_RTT.c ****     if (WrOff == pRing->SizeOfBuffer) {
 364:RTT/SEGGER_RTT.c ****       WrOff = 0u;
 365:RTT/SEGGER_RTT.c ****     }
 366:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 367:RTT/SEGGER_RTT.c ****   } while (NumBytes);
 368:RTT/SEGGER_RTT.c ****   //
 369:RTT/SEGGER_RTT.c ****   return NumBytesWritten;
 370:RTT/SEGGER_RTT.c **** }
 371:RTT/SEGGER_RTT.c **** 
 372:RTT/SEGGER_RTT.c **** /*********************************************************************
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 8


 373:RTT/SEGGER_RTT.c **** *
 374:RTT/SEGGER_RTT.c **** *       _WriteNoCheck()
 375:RTT/SEGGER_RTT.c **** *
 376:RTT/SEGGER_RTT.c **** *  Function description
 377:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 378:RTT/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 379:RTT/SEGGER_RTT.c **** *    read by the host.
 380:RTT/SEGGER_RTT.c **** *    It is callers responsibility to make sure data actually fits in buffer.
 381:RTT/SEGGER_RTT.c **** *
 382:RTT/SEGGER_RTT.c **** *  Parameters
 383:RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 384:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 385:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 386:RTT/SEGGER_RTT.c **** *
 387:RTT/SEGGER_RTT.c **** *  Notes
 388:RTT/SEGGER_RTT.c **** *    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
 389:RTT/SEGGER_RTT.c **** */
 390:RTT/SEGGER_RTT.c **** static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 391:RTT/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
 392:RTT/SEGGER_RTT.c ****   unsigned WrOff;
 393:RTT/SEGGER_RTT.c ****   unsigned Rem;
 394:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 395:RTT/SEGGER_RTT.c ****   char*    pDst;
 396:RTT/SEGGER_RTT.c **** #endif
 397:RTT/SEGGER_RTT.c **** 
 398:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 399:RTT/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 400:RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 401:RTT/SEGGER_RTT.c ****     //
 402:RTT/SEGGER_RTT.c ****     // All data fits before wrap around
 403:RTT/SEGGER_RTT.c ****     //
 404:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 405:RTT/SEGGER_RTT.c ****     pDst = pRing->pBuffer + WrOff;
 406:RTT/SEGGER_RTT.c ****     WrOff += NumBytes;
 407:RTT/SEGGER_RTT.c ****     while (NumBytes--) {
 408:RTT/SEGGER_RTT.c ****       *pDst++ = *pData++;
 409:RTT/SEGGER_RTT.c ****     };
 410:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 411:RTT/SEGGER_RTT.c **** #else
 412:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 413:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 414:RTT/SEGGER_RTT.c **** #endif
 415:RTT/SEGGER_RTT.c ****   } else {
 416:RTT/SEGGER_RTT.c ****     //
 417:RTT/SEGGER_RTT.c ****     // We reach the end of the buffer, so need to wrap around
 418:RTT/SEGGER_RTT.c ****     //
 419:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 420:RTT/SEGGER_RTT.c ****     pDst = pRing->pBuffer + WrOff;
 421:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 422:RTT/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 423:RTT/SEGGER_RTT.c ****       *pDst++ = *pData++;
 424:RTT/SEGGER_RTT.c ****     };
 425:RTT/SEGGER_RTT.c ****     pDst = pRing->pBuffer;
 426:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 427:RTT/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 428:RTT/SEGGER_RTT.c ****       *pDst++ = *pData++;
 429:RTT/SEGGER_RTT.c ****     };
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 9


 430:RTT/SEGGER_RTT.c ****     pRing->WrOff = NumBytes - Rem;
 431:RTT/SEGGER_RTT.c **** #else
 432:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 433:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 434:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 435:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 436:RTT/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 437:RTT/SEGGER_RTT.c **** #endif
 438:RTT/SEGGER_RTT.c ****   }
 439:RTT/SEGGER_RTT.c **** }
 440:RTT/SEGGER_RTT.c **** 
 441:RTT/SEGGER_RTT.c **** /*********************************************************************
 442:RTT/SEGGER_RTT.c **** *
 443:RTT/SEGGER_RTT.c **** *       _PostTerminalSwitch()
 444:RTT/SEGGER_RTT.c **** *
 445:RTT/SEGGER_RTT.c **** *  Function description
 446:RTT/SEGGER_RTT.c **** *    Switch terminal to the given terminal ID.  It is the caller's
 447:RTT/SEGGER_RTT.c **** *    responsibility to ensure the terminal ID is correct and there is
 448:RTT/SEGGER_RTT.c **** *    enough space in the buffer for this to complete successfully.
 449:RTT/SEGGER_RTT.c **** *
 450:RTT/SEGGER_RTT.c **** *  Parameters
 451:RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 452:RTT/SEGGER_RTT.c **** *    TerminalId   Terminal ID to switch to.
 453:RTT/SEGGER_RTT.c **** */
 454:RTT/SEGGER_RTT.c **** static void _PostTerminalSwitch(SEGGER_RTT_BUFFER_UP* pRing, unsigned char TerminalId) {
 455:RTT/SEGGER_RTT.c ****   unsigned char ac[2];
 456:RTT/SEGGER_RTT.c **** 
 457:RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 458:RTT/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 459:RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 460:RTT/SEGGER_RTT.c **** }
 461:RTT/SEGGER_RTT.c **** 
 462:RTT/SEGGER_RTT.c **** /*********************************************************************
 463:RTT/SEGGER_RTT.c **** *
 464:RTT/SEGGER_RTT.c **** *       _GetAvailWriteSpace()
 465:RTT/SEGGER_RTT.c **** *
 466:RTT/SEGGER_RTT.c **** *  Function description
 467:RTT/SEGGER_RTT.c **** *    Returns the number of bytes that can be written to the ring
 468:RTT/SEGGER_RTT.c **** *    buffer without blocking.
 469:RTT/SEGGER_RTT.c **** *
 470:RTT/SEGGER_RTT.c **** *  Parameters
 471:RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to check.
 472:RTT/SEGGER_RTT.c **** *
 473:RTT/SEGGER_RTT.c **** *  Return value
 474:RTT/SEGGER_RTT.c **** *    Number of bytes that are free in the buffer.
 475:RTT/SEGGER_RTT.c **** */
 476:RTT/SEGGER_RTT.c **** static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
  29              		.loc 1 476 66 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 477:RTT/SEGGER_RTT.c ****   unsigned RdOff;
  34              		.loc 1 477 3 view .LVU1
 478:RTT/SEGGER_RTT.c ****   unsigned WrOff;
  35              		.loc 1 478 3 view .LVU2
 479:RTT/SEGGER_RTT.c ****   unsigned r;
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 10


  36              		.loc 1 479 3 view .LVU3
 480:RTT/SEGGER_RTT.c ****   //
 481:RTT/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
 482:RTT/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
 483:RTT/SEGGER_RTT.c ****   //
 484:RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
  37              		.loc 1 484 3 view .LVU4
  38              		.loc 1 484 9 is_stmt 0 view .LVU5
  39 0000 0369     		ldr	r3, [r0, #16]
  40              	.LVL1:
 485:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
  41              		.loc 1 485 3 is_stmt 1 view .LVU6
  42              		.loc 1 485 9 is_stmt 0 view .LVU7
  43 0002 C268     		ldr	r2, [r0, #12]
  44              	.LVL2:
 486:RTT/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
  45              		.loc 1 486 3 is_stmt 1 view .LVU8
  46              		.loc 1 486 6 is_stmt 0 view .LVU9
  47 0004 9342     		cmp	r3, r2
  48 0006 04D8     		bhi	.L2
 487:RTT/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
  49              		.loc 1 487 5 is_stmt 1 view .LVU10
  50              		.loc 1 487 14 is_stmt 0 view .LVU11
  51 0008 8068     		ldr	r0, [r0, #8]
  52              	.LVL3:
  53              		.loc 1 487 34 view .LVU12
  54 000a 801A     		subs	r0, r0, r2
  55              		.loc 1 487 42 view .LVU13
  56 000c 0344     		add	r3, r3, r0
  57              	.LVL4:
  58              		.loc 1 487 7 view .LVU14
  59 000e 581E     		subs	r0, r3, #1
  60              	.LVL5:
  61              		.loc 1 487 7 view .LVU15
  62 0010 7047     		bx	lr
  63              	.LVL6:
  64              	.L2:
 488:RTT/SEGGER_RTT.c ****   } else {
 489:RTT/SEGGER_RTT.c ****     r = RdOff - WrOff - 1u;
  65              		.loc 1 489 5 is_stmt 1 view .LVU16
  66              		.loc 1 489 15 is_stmt 0 view .LVU17
  67 0012 9B1A     		subs	r3, r3, r2
  68              	.LVL7:
  69              		.loc 1 489 7 view .LVU18
  70 0014 581E     		subs	r0, r3, #1
  71              	.LVL8:
 490:RTT/SEGGER_RTT.c ****   }
 491:RTT/SEGGER_RTT.c ****   return r;
  72              		.loc 1 491 3 is_stmt 1 view .LVU19
 492:RTT/SEGGER_RTT.c **** }
  73              		.loc 1 492 1 is_stmt 0 view .LVU20
  74 0016 7047     		bx	lr
  75              		.cfi_endproc
  76              	.LFE4:
  78              		.section	.text._WriteNoCheck,"ax",%progbits
  79              		.align	1
  80              		.syntax unified
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 11


  81              		.thumb
  82              		.thumb_func
  84              	_WriteNoCheck:
  85              	.LVL9:
  86              	.LFB2:
 390:RTT/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  87              		.loc 1 390 94 is_stmt 1 view -0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
 390:RTT/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  91              		.loc 1 390 94 is_stmt 0 view .LVU22
  92 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
  93              	.LCFI0:
  94              		.cfi_def_cfa_offset 32
  95              		.cfi_offset 3, -32
  96              		.cfi_offset 4, -28
  97              		.cfi_offset 5, -24
  98              		.cfi_offset 6, -20
  99              		.cfi_offset 7, -16
 100              		.cfi_offset 8, -12
 101              		.cfi_offset 9, -8
 102              		.cfi_offset 14, -4
 103 0004 0446     		mov	r4, r0
 104 0006 8846     		mov	r8, r1
 105 0008 1646     		mov	r6, r2
 391:RTT/SEGGER_RTT.c ****   unsigned WrOff;
 106              		.loc 1 391 3 is_stmt 1 view .LVU23
 392:RTT/SEGGER_RTT.c ****   unsigned Rem;
 107              		.loc 1 392 3 view .LVU24
 393:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 108              		.loc 1 393 3 view .LVU25
 398:RTT/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 109              		.loc 1 398 3 view .LVU26
 398:RTT/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 110              		.loc 1 398 9 is_stmt 0 view .LVU27
 111 000a C568     		ldr	r5, [r0, #12]
 112              	.LVL10:
 399:RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 113              		.loc 1 399 3 is_stmt 1 view .LVU28
 399:RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 114              		.loc 1 399 14 is_stmt 0 view .LVU29
 115 000c 8768     		ldr	r7, [r0, #8]
 399:RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 116              		.loc 1 399 7 view .LVU30
 117 000e A7EB0509 		sub	r9, r7, r5
 118              	.LVL11:
 400:RTT/SEGGER_RTT.c ****     //
 119              		.loc 1 400 3 is_stmt 1 view .LVU31
 400:RTT/SEGGER_RTT.c ****     //
 120              		.loc 1 400 6 is_stmt 0 view .LVU32
 121 0012 9145     		cmp	r9, r2
 122 0014 07D9     		bls	.L5
 412:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 123              		.loc 1 412 5 is_stmt 1 view .LVU33
 124 0016 4068     		ldr	r0, [r0, #4]
 125              	.LVL12:
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 12


 412:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 126              		.loc 1 412 5 is_stmt 0 view .LVU34
 127 0018 2844     		add	r0, r0, r5
 128 001a FFF7FEFF 		bl	memcpy
 129              	.LVL13:
 413:RTT/SEGGER_RTT.c **** #endif
 130              		.loc 1 413 5 is_stmt 1 view .LVU35
 413:RTT/SEGGER_RTT.c **** #endif
 131              		.loc 1 413 26 is_stmt 0 view .LVU36
 132 001e 3544     		add	r5, r5, r6
 133              	.LVL14:
 413:RTT/SEGGER_RTT.c **** #endif
 134              		.loc 1 413 18 view .LVU37
 135 0020 E560     		str	r5, [r4, #12]
 136              	.L4:
 439:RTT/SEGGER_RTT.c **** 
 137              		.loc 1 439 1 view .LVU38
 138 0022 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 139              	.LVL15:
 140              	.L5:
 432:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 141              		.loc 1 432 5 is_stmt 1 view .LVU39
 433:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 142              		.loc 1 433 5 view .LVU40
 143 0026 4068     		ldr	r0, [r0, #4]
 144              	.LVL16:
 433:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 145              		.loc 1 433 5 is_stmt 0 view .LVU41
 146 0028 4A46     		mov	r2, r9
 147              	.LVL17:
 433:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 148              		.loc 1 433 5 view .LVU42
 149 002a 2844     		add	r0, r0, r5
 150 002c FFF7FEFF 		bl	memcpy
 151              	.LVL18:
 434:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 152              		.loc 1 434 5 is_stmt 1 view .LVU43
 434:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 153              		.loc 1 434 20 is_stmt 0 view .LVU44
 154 0030 ED1B     		subs	r5, r5, r7
 155              	.LVL19:
 434:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 156              		.loc 1 434 20 view .LVU45
 157 0032 3544     		add	r5, r5, r6
 158              	.LVL20:
 435:RTT/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 159              		.loc 1 435 5 is_stmt 1 view .LVU46
 160 0034 2A46     		mov	r2, r5
 161 0036 08EB0901 		add	r1, r8, r9
 162 003a 6068     		ldr	r0, [r4, #4]
 163 003c FFF7FEFF 		bl	memcpy
 164              	.LVL21:
 436:RTT/SEGGER_RTT.c **** #endif
 165              		.loc 1 436 5 view .LVU47
 436:RTT/SEGGER_RTT.c **** #endif
 166              		.loc 1 436 18 is_stmt 0 view .LVU48
 167 0040 E560     		str	r5, [r4, #12]
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 13


 439:RTT/SEGGER_RTT.c **** 
 168              		.loc 1 439 1 view .LVU49
 169 0042 EEE7     		b	.L4
 170              		.cfi_endproc
 171              	.LFE2:
 173              		.section	.text._WriteBlocking,"ax",%progbits
 174              		.align	1
 175              		.syntax unified
 176              		.thumb
 177              		.thumb_func
 179              	_WriteBlocking:
 180              	.LVL22:
 181              	.LFB1:
 326:RTT/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 182              		.loc 1 326 101 is_stmt 1 view -0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 326:RTT/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 186              		.loc 1 326 101 is_stmt 0 view .LVU51
 187 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 188              	.LCFI1:
 189              		.cfi_def_cfa_offset 32
 190              		.cfi_offset 3, -32
 191              		.cfi_offset 4, -28
 192              		.cfi_offset 5, -24
 193              		.cfi_offset 6, -20
 194              		.cfi_offset 7, -16
 195              		.cfi_offset 8, -12
 196              		.cfi_offset 9, -8
 197              		.cfi_offset 14, -4
 198 0004 0646     		mov	r6, r0
 199 0006 8846     		mov	r8, r1
 200 0008 1746     		mov	r7, r2
 327:RTT/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 201              		.loc 1 327 3 is_stmt 1 view .LVU52
 328:RTT/SEGGER_RTT.c ****   unsigned RdOff;
 202              		.loc 1 328 3 view .LVU53
 329:RTT/SEGGER_RTT.c ****   unsigned WrOff;
 203              		.loc 1 329 3 view .LVU54
 330:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 204              		.loc 1 330 3 view .LVU55
 337:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 205              		.loc 1 337 3 view .LVU56
 206              	.LVL23:
 338:RTT/SEGGER_RTT.c ****   do {
 207              		.loc 1 338 3 view .LVU57
 338:RTT/SEGGER_RTT.c ****   do {
 208              		.loc 1 338 9 is_stmt 0 view .LVU58
 209 000a C568     		ldr	r5, [r0, #12]
 210              	.LVL24:
 337:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 211              		.loc 1 337 19 view .LVU59
 212 000c 4FF00009 		mov	r9, #0
 213 0010 18E0     		b	.L12
 214              	.LVL25:
 215              	.L17:
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 14


 342:RTT/SEGGER_RTT.c ****     } else {
 216              		.loc 1 342 7 is_stmt 1 view .LVU60
 342:RTT/SEGGER_RTT.c ****     } else {
 217              		.loc 1 342 31 is_stmt 0 view .LVU61
 218 0012 641B     		subs	r4, r4, r5
 219              	.LVL26:
 342:RTT/SEGGER_RTT.c ****     } else {
 220              		.loc 1 342 23 view .LVU62
 221 0014 621E     		subs	r2, r4, #1
 222              	.LVL27:
 223              	.L10:
 346:RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 224              		.loc 1 346 5 is_stmt 1 view .LVU63
 346:RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 225              		.loc 1 346 23 is_stmt 0 view .LVU64
 226 0016 B368     		ldr	r3, [r6, #8]
 227 0018 5C1B     		subs	r4, r3, r5
 346:RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 228              		.loc 1 346 21 view .LVU65
 229 001a 9442     		cmp	r4, r2
 230 001c 28BF     		it	cs
 231 001e 1446     		movcs	r4, r2
 232              	.LVL28:
 347:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 233              		.loc 1 347 5 is_stmt 1 view .LVU66
 347:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 234              		.loc 1 347 21 is_stmt 0 view .LVU67
 235 0020 BC42     		cmp	r4, r7
 236 0022 28BF     		it	cs
 237 0024 3C46     		movcs	r4, r7
 238              	.LVL29:
 357:RTT/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 239              		.loc 1 357 5 is_stmt 1 view .LVU68
 240 0026 7068     		ldr	r0, [r6, #4]
 241 0028 2246     		mov	r2, r4
 242 002a 4146     		mov	r1, r8
 243 002c 2844     		add	r0, r0, r5
 244 002e FFF7FEFF 		bl	memcpy
 245              	.LVL30:
 358:RTT/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 246              		.loc 1 358 5 view .LVU69
 358:RTT/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 247              		.loc 1 358 21 is_stmt 0 view .LVU70
 248 0032 A144     		add	r9, r9, r4
 249              	.LVL31:
 359:RTT/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 250              		.loc 1 359 5 is_stmt 1 view .LVU71
 359:RTT/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 251              		.loc 1 359 21 is_stmt 0 view .LVU72
 252 0034 A044     		add	r8, r8, r4
 253              	.LVL32:
 360:RTT/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 254              		.loc 1 360 5 is_stmt 1 view .LVU73
 360:RTT/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 255              		.loc 1 360 21 is_stmt 0 view .LVU74
 256 0036 3F1B     		subs	r7, r7, r4
 257              	.LVL33:
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 15


 361:RTT/SEGGER_RTT.c **** #endif
 258              		.loc 1 361 5 is_stmt 1 view .LVU75
 361:RTT/SEGGER_RTT.c **** #endif
 259              		.loc 1 361 21 is_stmt 0 view .LVU76
 260 0038 2544     		add	r5, r5, r4
 261              	.LVL34:
 363:RTT/SEGGER_RTT.c ****       WrOff = 0u;
 262              		.loc 1 363 5 is_stmt 1 view .LVU77
 363:RTT/SEGGER_RTT.c ****       WrOff = 0u;
 263              		.loc 1 363 23 is_stmt 0 view .LVU78
 264 003a B368     		ldr	r3, [r6, #8]
 363:RTT/SEGGER_RTT.c ****       WrOff = 0u;
 265              		.loc 1 363 8 view .LVU79
 266 003c AB42     		cmp	r3, r5
 267 003e 09D0     		beq	.L15
 268              	.LVL35:
 269              	.L11:
 366:RTT/SEGGER_RTT.c ****   } while (NumBytes);
 270              		.loc 1 366 5 is_stmt 1 view .LVU80
 366:RTT/SEGGER_RTT.c ****   } while (NumBytes);
 271              		.loc 1 366 18 is_stmt 0 view .LVU81
 272 0040 F560     		str	r5, [r6, #12]
 367:RTT/SEGGER_RTT.c ****   //
 273              		.loc 1 367 11 is_stmt 1 view .LVU82
 367:RTT/SEGGER_RTT.c ****   //
 274              		.loc 1 367 3 is_stmt 0 view .LVU83
 275 0042 4FB1     		cbz	r7, .L16
 276              	.LVL36:
 277              	.L12:
 339:RTT/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 278              		.loc 1 339 3 is_stmt 1 view .LVU84
 340:RTT/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 279              		.loc 1 340 5 view .LVU85
 340:RTT/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 280              		.loc 1 340 11 is_stmt 0 view .LVU86
 281 0044 3469     		ldr	r4, [r6, #16]
 282              	.LVL37:
 341:RTT/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 283              		.loc 1 341 5 is_stmt 1 view .LVU87
 341:RTT/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 284              		.loc 1 341 8 is_stmt 0 view .LVU88
 285 0046 A542     		cmp	r5, r4
 286 0048 E3D3     		bcc	.L17
 344:RTT/SEGGER_RTT.c ****     }
 287              		.loc 1 344 7 is_stmt 1 view .LVU89
 344:RTT/SEGGER_RTT.c ****     }
 288              		.loc 1 344 30 is_stmt 0 view .LVU90
 289 004a B268     		ldr	r2, [r6, #8]
 344:RTT/SEGGER_RTT.c ****     }
 290              		.loc 1 344 62 view .LVU91
 291 004c 641B     		subs	r4, r4, r5
 292              	.LVL38:
 344:RTT/SEGGER_RTT.c ****     }
 293              		.loc 1 344 45 view .LVU92
 294 004e 1444     		add	r4, r4, r2
 344:RTT/SEGGER_RTT.c ****     }
 295              		.loc 1 344 23 view .LVU93
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 16


 296 0050 621E     		subs	r2, r4, #1
 297              	.LVL39:
 344:RTT/SEGGER_RTT.c ****     }
 298              		.loc 1 344 23 view .LVU94
 299 0052 E0E7     		b	.L10
 300              	.LVL40:
 301              	.L15:
 364:RTT/SEGGER_RTT.c ****     }
 302              		.loc 1 364 13 view .LVU95
 303 0054 0025     		movs	r5, #0
 304              	.LVL41:
 364:RTT/SEGGER_RTT.c ****     }
 305              		.loc 1 364 13 view .LVU96
 306 0056 F3E7     		b	.L11
 307              	.LVL42:
 308              	.L16:
 369:RTT/SEGGER_RTT.c **** }
 309              		.loc 1 369 3 is_stmt 1 view .LVU97
 370:RTT/SEGGER_RTT.c **** 
 310              		.loc 1 370 1 is_stmt 0 view .LVU98
 311 0058 4846     		mov	r0, r9
 312 005a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 370:RTT/SEGGER_RTT.c **** 
 313              		.loc 1 370 1 view .LVU99
 314              		.cfi_endproc
 315              	.LFE1:
 317              		.section	.text._PostTerminalSwitch,"ax",%progbits
 318              		.align	1
 319              		.syntax unified
 320              		.thumb
 321              		.thumb_func
 323              	_PostTerminalSwitch:
 324              	.LVL43:
 325              	.LFB3:
 454:RTT/SEGGER_RTT.c ****   unsigned char ac[2];
 326              		.loc 1 454 88 is_stmt 1 view -0
 327              		.cfi_startproc
 328              		@ args = 0, pretend = 0, frame = 8
 329              		@ frame_needed = 0, uses_anonymous_args = 0
 454:RTT/SEGGER_RTT.c ****   unsigned char ac[2];
 330              		.loc 1 454 88 is_stmt 0 view .LVU101
 331 0000 00B5     		push	{lr}
 332              	.LCFI2:
 333              		.cfi_def_cfa_offset 4
 334              		.cfi_offset 14, -4
 335 0002 83B0     		sub	sp, sp, #12
 336              	.LCFI3:
 337              		.cfi_def_cfa_offset 16
 455:RTT/SEGGER_RTT.c **** 
 338              		.loc 1 455 3 is_stmt 1 view .LVU102
 457:RTT/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 339              		.loc 1 457 3 view .LVU103
 457:RTT/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 340              		.loc 1 457 9 is_stmt 0 view .LVU104
 341 0004 FF23     		movs	r3, #255
 342 0006 8DF80430 		strb	r3, [sp, #4]
 458:RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 17


 343              		.loc 1 458 3 is_stmt 1 view .LVU105
 458:RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 344              		.loc 1 458 23 is_stmt 0 view .LVU106
 345 000a 054B     		ldr	r3, .L20
 346 000c 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 458:RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 347              		.loc 1 458 9 view .LVU107
 348 000e 8DF80530 		strb	r3, [sp, #5]
 459:RTT/SEGGER_RTT.c **** }
 349              		.loc 1 459 3 is_stmt 1 view .LVU108
 350 0012 0222     		movs	r2, #2
 351 0014 01A9     		add	r1, sp, #4
 352              	.LVL44:
 459:RTT/SEGGER_RTT.c **** }
 353              		.loc 1 459 3 is_stmt 0 view .LVU109
 354 0016 FFF7FEFF 		bl	_WriteBlocking
 355              	.LVL45:
 460:RTT/SEGGER_RTT.c **** 
 356              		.loc 1 460 1 view .LVU110
 357 001a 03B0     		add	sp, sp, #12
 358              	.LCFI4:
 359              		.cfi_def_cfa_offset 4
 360              		@ sp needed
 361 001c 5DF804FB 		ldr	pc, [sp], #4
 362              	.L21:
 363              		.align	2
 364              	.L20:
 365 0020 00000000 		.word	.LANCHOR0
 366              		.cfi_endproc
 367              	.LFE3:
 369              		.section	.rodata._DoInit.str1.4,"aMS",%progbits,1
 370              		.align	2
 371              	.LC0:
 372 0000 5465726D 		.ascii	"Terminal\000"
 372      696E616C 
 372      00
 373 0009 000000   		.align	2
 374              	.LC1:
 375 000c 52545400 		.ascii	"RTT\000"
 376              		.align	2
 377              	.LC2:
 378 0010 53454747 		.ascii	"SEGGER\000"
 378      455200
 379              		.section	.text._DoInit,"ax",%progbits
 380              		.align	1
 381              		.syntax unified
 382              		.thumb
 383              		.thumb_func
 385              	_DoInit:
 386              	.LFB0:
 271:RTT/SEGGER_RTT.c ****   SEGGER_RTT_CB* p;
 387              		.loc 1 271 27 is_stmt 1 view -0
 388              		.cfi_startproc
 389              		@ args = 0, pretend = 0, frame = 0
 390              		@ frame_needed = 0, uses_anonymous_args = 0
 391              		@ link register save eliminated.
 272:RTT/SEGGER_RTT.c ****   //
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 18


 392              		.loc 1 272 3 view .LVU112
 276:RTT/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 393              		.loc 1 276 3 view .LVU113
 394              	.LVL46:
 277:RTT/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 395              		.loc 1 277 3 view .LVU114
 277:RTT/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 396              		.loc 1 277 25 is_stmt 0 view .LVU115
 397 0000 124B     		ldr	r3, .L23
 398 0002 0322     		movs	r2, #3
 399 0004 1A61     		str	r2, [r3, #16]
 278:RTT/SEGGER_RTT.c ****   //
 400              		.loc 1 278 3 is_stmt 1 view .LVU116
 278:RTT/SEGGER_RTT.c ****   //
 401              		.loc 1 278 25 is_stmt 0 view .LVU117
 402 0006 5A61     		str	r2, [r3, #20]
 282:RTT/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 403              		.loc 1 282 3 is_stmt 1 view .LVU118
 282:RTT/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 404              		.loc 1 282 27 is_stmt 0 view .LVU119
 405 0008 1149     		ldr	r1, .L23+4
 406 000a 9961     		str	r1, [r3, #24]
 283:RTT/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 407              		.loc 1 283 3 is_stmt 1 view .LVU120
 283:RTT/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 408              		.loc 1 283 27 is_stmt 0 view .LVU121
 409 000c 114A     		ldr	r2, .L23+8
 410 000e DA61     		str	r2, [r3, #28]
 284:RTT/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 411              		.loc 1 284 3 is_stmt 1 view .LVU122
 284:RTT/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 412              		.loc 1 284 27 is_stmt 0 view .LVU123
 413 0010 4FF48062 		mov	r2, #1024
 414 0014 1A62     		str	r2, [r3, #32]
 285:RTT/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 415              		.loc 1 285 3 is_stmt 1 view .LVU124
 285:RTT/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 416              		.loc 1 285 27 is_stmt 0 view .LVU125
 417 0016 0022     		movs	r2, #0
 418 0018 9A62     		str	r2, [r3, #40]
 286:RTT/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 419              		.loc 1 286 3 is_stmt 1 view .LVU126
 286:RTT/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 420              		.loc 1 286 27 is_stmt 0 view .LVU127
 421 001a 5A62     		str	r2, [r3, #36]
 287:RTT/SEGGER_RTT.c ****   //
 422              		.loc 1 287 3 is_stmt 1 view .LVU128
 287:RTT/SEGGER_RTT.c ****   //
 423              		.loc 1 287 27 is_stmt 0 view .LVU129
 424 001c DA62     		str	r2, [r3, #44]
 291:RTT/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 425              		.loc 1 291 3 is_stmt 1 view .LVU130
 291:RTT/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 426              		.loc 1 291 29 is_stmt 0 view .LVU131
 427 001e 1966     		str	r1, [r3, #96]
 292:RTT/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 428              		.loc 1 292 3 is_stmt 1 view .LVU132
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 19


 292:RTT/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 429              		.loc 1 292 29 is_stmt 0 view .LVU133
 430 0020 0D49     		ldr	r1, .L23+12
 431 0022 5966     		str	r1, [r3, #100]
 293:RTT/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 432              		.loc 1 293 3 is_stmt 1 view .LVU134
 293:RTT/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 433              		.loc 1 293 29 is_stmt 0 view .LVU135
 434 0024 1021     		movs	r1, #16
 435 0026 9966     		str	r1, [r3, #104]
 294:RTT/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 436              		.loc 1 294 3 is_stmt 1 view .LVU136
 294:RTT/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 437              		.loc 1 294 29 is_stmt 0 view .LVU137
 438 0028 1A67     		str	r2, [r3, #112]
 295:RTT/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 439              		.loc 1 295 3 is_stmt 1 view .LVU138
 295:RTT/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 440              		.loc 1 295 29 is_stmt 0 view .LVU139
 441 002a DA66     		str	r2, [r3, #108]
 296:RTT/SEGGER_RTT.c ****   //
 442              		.loc 1 296 3 is_stmt 1 view .LVU140
 296:RTT/SEGGER_RTT.c ****   //
 443              		.loc 1 296 29 is_stmt 0 view .LVU141
 444 002c 5A67     		str	r2, [r3, #116]
 302:RTT/SEGGER_RTT.c ****   strcpy(&p->acID[0], "SEGGER");
 445              		.loc 1 302 3 is_stmt 1 view .LVU142
 446 002e 0B4A     		ldr	r2, .L23+16
 447 0030 1068     		ldr	r0, [r2]
 448 0032 C3F80700 		str	r0, [r3, #7]	@ unaligned
 303:RTT/SEGGER_RTT.c ****   p->acID[6] = ' ';
 449              		.loc 1 303 3 view .LVU143
 450 0036 0A4A     		ldr	r2, .L23+20
 451 0038 92E80300 		ldm	r2, {r0, r1}
 452 003c 1860     		str	r0, [r3]
 453 003e 9980     		strh	r1, [r3, #4]	@ movhi
 454 0040 090C     		lsrs	r1, r1, #16
 455 0042 9971     		strb	r1, [r3, #6]
 304:RTT/SEGGER_RTT.c **** }
 456              		.loc 1 304 3 view .LVU144
 304:RTT/SEGGER_RTT.c **** }
 457              		.loc 1 304 14 is_stmt 0 view .LVU145
 458 0044 2022     		movs	r2, #32
 459 0046 9A71     		strb	r2, [r3, #6]
 305:RTT/SEGGER_RTT.c **** 
 460              		.loc 1 305 1 view .LVU146
 461 0048 7047     		bx	lr
 462              	.L24:
 463 004a 00BF     		.align	2
 464              	.L23:
 465 004c 00000000 		.word	.LANCHOR1
 466 0050 00000000 		.word	.LC0
 467 0054 00000000 		.word	.LANCHOR2
 468 0058 00000000 		.word	.LANCHOR3
 469 005c 0C000000 		.word	.LC1
 470 0060 10000000 		.word	.LC2
 471              		.cfi_endproc
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 20


 472              	.LFE0:
 474              		.section	.text.SEGGER_RTT_ReadNoLock,"ax",%progbits
 475              		.align	1
 476              		.global	SEGGER_RTT_ReadNoLock
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 481              	SEGGER_RTT_ReadNoLock:
 482              	.LVL47:
 483              	.LFB5:
 493:RTT/SEGGER_RTT.c **** 
 494:RTT/SEGGER_RTT.c **** /*********************************************************************
 495:RTT/SEGGER_RTT.c **** *
 496:RTT/SEGGER_RTT.c **** *       Public code
 497:RTT/SEGGER_RTT.c **** *
 498:RTT/SEGGER_RTT.c **** **********************************************************************
 499:RTT/SEGGER_RTT.c **** */
 500:RTT/SEGGER_RTT.c **** /*********************************************************************
 501:RTT/SEGGER_RTT.c **** *
 502:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ReadNoLock()
 503:RTT/SEGGER_RTT.c **** *
 504:RTT/SEGGER_RTT.c **** *  Function description
 505:RTT/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 506:RTT/SEGGER_RTT.c **** *    which have been previously stored by the host.
 507:RTT/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 508:RTT/SEGGER_RTT.c **** *
 509:RTT/SEGGER_RTT.c **** *  Parameters
 510:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 511:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 512:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 513:RTT/SEGGER_RTT.c **** *
 514:RTT/SEGGER_RTT.c **** *  Return value
 515:RTT/SEGGER_RTT.c **** *    Number of bytes that have been read.
 516:RTT/SEGGER_RTT.c **** */
 517:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 484              		.loc 1 517 88 is_stmt 1 view -0
 485              		.cfi_startproc
 486              		@ args = 0, pretend = 0, frame = 0
 487              		@ frame_needed = 0, uses_anonymous_args = 0
 488              		.loc 1 517 88 is_stmt 0 view .LVU148
 489 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 490              	.LCFI5:
 491              		.cfi_def_cfa_offset 32
 492              		.cfi_offset 4, -32
 493              		.cfi_offset 5, -28
 494              		.cfi_offset 6, -24
 495              		.cfi_offset 7, -20
 496              		.cfi_offset 8, -16
 497              		.cfi_offset 9, -12
 498              		.cfi_offset 10, -8
 499              		.cfi_offset 14, -4
 500 0004 0446     		mov	r4, r0
 501 0006 8846     		mov	r8, r1
 502 0008 9146     		mov	r9, r2
 518:RTT/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 503              		.loc 1 518 3 is_stmt 1 view .LVU149
 519:RTT/SEGGER_RTT.c ****   unsigned                NumBytesRead;
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 21


 504              		.loc 1 519 3 view .LVU150
 520:RTT/SEGGER_RTT.c ****   unsigned                RdOff;
 505              		.loc 1 520 3 view .LVU151
 521:RTT/SEGGER_RTT.c ****   unsigned                WrOff;
 506              		.loc 1 521 3 view .LVU152
 522:RTT/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 507              		.loc 1 522 3 view .LVU153
 523:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 508              		.loc 1 523 3 view .LVU154
 524:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 525:RTT/SEGGER_RTT.c ****   const char*             pSrc;
 526:RTT/SEGGER_RTT.c **** #endif
 527:RTT/SEGGER_RTT.c ****   //
 528:RTT/SEGGER_RTT.c ****   INIT();
 509              		.loc 1 528 3 view .LVU155
 510              		.loc 1 528 3 view .LVU156
 511 000a 244B     		ldr	r3, .L36
 512 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 513 000e C3B1     		cbz	r3, .L33
 514              	.LVL48:
 515              	.L26:
 516              		.loc 1 528 3 discriminator 3 view .LVU157
 529:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aDown[BufferIndex];
 517              		.loc 1 529 3 discriminator 3 view .LVU158
 530:RTT/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 518              		.loc 1 530 3 discriminator 3 view .LVU159
 531:RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 519              		.loc 1 531 3 discriminator 3 view .LVU160
 520              		.loc 1 531 9 is_stmt 0 discriminator 3 view .LVU161
 521 0010 04EB4403 		add	r3, r4, r4, lsl #1
 522 0014 214A     		ldr	r2, .L36
 523 0016 02EBC303 		add	r3, r2, r3, lsl #3
 524 001a 1F6F     		ldr	r7, [r3, #112]
 525              	.LVL49:
 532:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 526              		.loc 1 532 3 is_stmt 1 discriminator 3 view .LVU162
 527              		.loc 1 532 9 is_stmt 0 discriminator 3 view .LVU163
 528 001c DD6E     		ldr	r5, [r3, #108]
 529              	.LVL50:
 533:RTT/SEGGER_RTT.c ****   NumBytesRead = 0u;
 530              		.loc 1 533 3 is_stmt 1 discriminator 3 view .LVU164
 534:RTT/SEGGER_RTT.c ****   //
 535:RTT/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 536:RTT/SEGGER_RTT.c ****   //
 537:RTT/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 531              		.loc 1 537 3 discriminator 3 view .LVU165
 532              		.loc 1 537 6 is_stmt 0 discriminator 3 view .LVU166
 533 001e AF42     		cmp	r7, r5
 534 0020 12D8     		bhi	.L34
 533:RTT/SEGGER_RTT.c ****   NumBytesRead = 0u;
 535              		.loc 1 533 16 view .LVU167
 536 0022 0026     		movs	r6, #0
 537              	.LVL51:
 538              	.L27:
 538:RTT/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 539:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 540:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 22


 541:RTT/SEGGER_RTT.c ****     pSrc = pRing->pBuffer + RdOff;
 542:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 543:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 544:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 545:RTT/SEGGER_RTT.c ****     while (NumBytesRem--) {
 546:RTT/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 547:RTT/SEGGER_RTT.c ****     };
 548:RTT/SEGGER_RTT.c **** #else
 549:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 550:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 551:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 552:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 553:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 554:RTT/SEGGER_RTT.c **** #endif
 555:RTT/SEGGER_RTT.c ****     //
 556:RTT/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 557:RTT/SEGGER_RTT.c ****     //
 558:RTT/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 559:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 560:RTT/SEGGER_RTT.c ****     }
 561:RTT/SEGGER_RTT.c ****   }
 562:RTT/SEGGER_RTT.c ****   //
 563:RTT/SEGGER_RTT.c ****   // Read remaining items of buffer
 564:RTT/SEGGER_RTT.c ****   //
 565:RTT/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 539              		.loc 1 565 3 is_stmt 1 view .LVU168
 540              		.loc 1 565 15 is_stmt 0 view .LVU169
 541 0024 ED1B     		subs	r5, r5, r7
 542              	.LVL52:
 566:RTT/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 543              		.loc 1 566 3 is_stmt 1 view .LVU170
 544              		.loc 1 566 15 is_stmt 0 view .LVU171
 545 0026 4D45     		cmp	r5, r9
 546 0028 28BF     		it	cs
 547 002a 4D46     		movcs	r5, r9
 548              	.LVL53:
 567:RTT/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 549              		.loc 1 567 3 is_stmt 1 view .LVU172
 550              		.loc 1 567 6 is_stmt 0 view .LVU173
 551 002c 3DBB     		cbnz	r5, .L35
 552              	.LVL54:
 553              	.L28:
 568:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 569:RTT/SEGGER_RTT.c ****     pSrc = pRing->pBuffer + RdOff;
 570:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 571:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 572:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 573:RTT/SEGGER_RTT.c ****     while (NumBytesRem--) {
 574:RTT/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 575:RTT/SEGGER_RTT.c ****     };
 576:RTT/SEGGER_RTT.c **** #else
 577:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 578:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 579:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 580:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 581:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 582:RTT/SEGGER_RTT.c **** #endif
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 23


 583:RTT/SEGGER_RTT.c ****   }
 584:RTT/SEGGER_RTT.c ****   if (NumBytesRead) {
 554              		.loc 1 584 3 is_stmt 1 view .LVU174
 555              		.loc 1 584 6 is_stmt 0 view .LVU175
 556 002e 2EB1     		cbz	r6, .L25
 585:RTT/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 557              		.loc 1 585 5 is_stmt 1 view .LVU176
 558              		.loc 1 585 18 is_stmt 0 view .LVU177
 559 0030 04EB4404 		add	r4, r4, r4, lsl #1
 560              	.LVL55:
 561              		.loc 1 585 18 view .LVU178
 562 0034 1948     		ldr	r0, .L36
 563 0036 00EBC404 		add	r4, r0, r4, lsl #3
 564 003a 2767     		str	r7, [r4, #112]
 586:RTT/SEGGER_RTT.c ****   }
 587:RTT/SEGGER_RTT.c ****   //
 588:RTT/SEGGER_RTT.c ****   return NumBytesRead;
 565              		.loc 1 588 3 is_stmt 1 view .LVU179
 566              	.L25:
 589:RTT/SEGGER_RTT.c **** }
 567              		.loc 1 589 1 is_stmt 0 view .LVU180
 568 003c 3046     		mov	r0, r6
 569 003e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 570              	.LVL56:
 571              	.L33:
 528:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aDown[BufferIndex];
 572              		.loc 1 528 3 is_stmt 1 discriminator 1 view .LVU181
 573 0042 FFF7FEFF 		bl	_DoInit
 574              	.LVL57:
 528:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aDown[BufferIndex];
 575              		.loc 1 528 3 is_stmt 0 discriminator 1 view .LVU182
 576 0046 E3E7     		b	.L26
 577              	.LVL58:
 578              	.L34:
 538:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 579              		.loc 1 538 5 is_stmt 1 view .LVU183
 538:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 580              		.loc 1 538 24 is_stmt 0 view .LVU184
 581 0048 04EB440A 		add	r10, r4, r4, lsl #1
 582 004c 02EBCA0A 		add	r10, r2, r10, lsl #3
 583 0050 DAF86860 		ldr	r6, [r10, #104]
 538:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 584              		.loc 1 538 17 view .LVU185
 585 0054 F61B     		subs	r6, r6, r7
 586              	.LVL59:
 539:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 587              		.loc 1 539 5 is_stmt 1 view .LVU186
 539:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 588              		.loc 1 539 17 is_stmt 0 view .LVU187
 589 0056 4E45     		cmp	r6, r9
 590 0058 28BF     		it	cs
 591 005a 4E46     		movcs	r6, r9
 592              	.LVL60:
 549:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 593              		.loc 1 549 5 is_stmt 1 view .LVU188
 594 005c DAF86410 		ldr	r1, [r10, #100]
 595 0060 3246     		mov	r2, r6
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 24


 596 0062 3944     		add	r1, r1, r7
 597 0064 4046     		mov	r0, r8
 598 0066 FFF7FEFF 		bl	memcpy
 599              	.LVL61:
 550:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 600              		.loc 1 550 5 view .LVU189
 551:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 601              		.loc 1 551 5 view .LVU190
 551:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 602              		.loc 1 551 18 is_stmt 0 view .LVU191
 603 006a B044     		add	r8, r8, r6
 604              	.LVL62:
 552:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 605              		.loc 1 552 5 is_stmt 1 view .LVU192
 552:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 606              		.loc 1 552 18 is_stmt 0 view .LVU193
 607 006c A9EB0609 		sub	r9, r9, r6
 608              	.LVL63:
 553:RTT/SEGGER_RTT.c **** #endif
 609              		.loc 1 553 5 is_stmt 1 view .LVU194
 553:RTT/SEGGER_RTT.c **** #endif
 610              		.loc 1 553 18 is_stmt 0 view .LVU195
 611 0070 3744     		add	r7, r7, r6
 612              	.LVL64:
 558:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 613              		.loc 1 558 5 is_stmt 1 view .LVU196
 558:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 614              		.loc 1 558 23 is_stmt 0 view .LVU197
 615 0072 DAF86830 		ldr	r3, [r10, #104]
 558:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 616              		.loc 1 558 8 view .LVU198
 617 0076 BB42     		cmp	r3, r7
 618 0078 D4D1     		bne	.L27
 559:RTT/SEGGER_RTT.c ****     }
 619              		.loc 1 559 13 view .LVU199
 620 007a 0027     		movs	r7, #0
 621              	.LVL65:
 559:RTT/SEGGER_RTT.c ****     }
 622              		.loc 1 559 13 view .LVU200
 623 007c D2E7     		b	.L27
 624              	.LVL66:
 625              	.L35:
 577:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 626              		.loc 1 577 5 is_stmt 1 view .LVU201
 627 007e 04EB4403 		add	r3, r4, r4, lsl #1
 628 0082 064A     		ldr	r2, .L36
 629 0084 02EBC303 		add	r3, r2, r3, lsl #3
 630 0088 596E     		ldr	r1, [r3, #100]
 631 008a 2A46     		mov	r2, r5
 632 008c 3944     		add	r1, r1, r7
 633 008e 4046     		mov	r0, r8
 634 0090 FFF7FEFF 		bl	memcpy
 635              	.LVL67:
 578:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 636              		.loc 1 578 5 view .LVU202
 578:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 637              		.loc 1 578 18 is_stmt 0 view .LVU203
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 25


 638 0094 2E44     		add	r6, r6, r5
 639              	.LVL68:
 579:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 640              		.loc 1 579 5 is_stmt 1 view .LVU204
 580:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 641              		.loc 1 580 5 view .LVU205
 581:RTT/SEGGER_RTT.c **** #endif
 642              		.loc 1 581 5 view .LVU206
 581:RTT/SEGGER_RTT.c **** #endif
 643              		.loc 1 581 18 is_stmt 0 view .LVU207
 644 0096 2F44     		add	r7, r7, r5
 645              	.LVL69:
 581:RTT/SEGGER_RTT.c **** #endif
 646              		.loc 1 581 18 view .LVU208
 647 0098 C9E7     		b	.L28
 648              	.L37:
 649 009a 00BF     		.align	2
 650              	.L36:
 651 009c 00000000 		.word	.LANCHOR1
 652              		.cfi_endproc
 653              	.LFE5:
 655              		.section	.text.SEGGER_RTT_Read,"ax",%progbits
 656              		.align	1
 657              		.global	SEGGER_RTT_Read
 658              		.syntax unified
 659              		.thumb
 660              		.thumb_func
 662              	SEGGER_RTT_Read:
 663              	.LVL70:
 664              	.LFB6:
 590:RTT/SEGGER_RTT.c **** 
 591:RTT/SEGGER_RTT.c **** /*********************************************************************
 592:RTT/SEGGER_RTT.c **** *
 593:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_Read
 594:RTT/SEGGER_RTT.c **** *
 595:RTT/SEGGER_RTT.c **** *  Function description
 596:RTT/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 597:RTT/SEGGER_RTT.c **** *    which have been previously stored by the host.
 598:RTT/SEGGER_RTT.c **** *
 599:RTT/SEGGER_RTT.c **** *  Parameters
 600:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 601:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 602:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 603:RTT/SEGGER_RTT.c **** *
 604:RTT/SEGGER_RTT.c **** *  Return value
 605:RTT/SEGGER_RTT.c **** *    Number of bytes that have been read.
 606:RTT/SEGGER_RTT.c **** */
 607:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 665              		.loc 1 607 84 is_stmt 1 view -0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 0
 668              		@ frame_needed = 0, uses_anonymous_args = 0
 669              		.loc 1 607 84 is_stmt 0 view .LVU210
 670 0000 10B5     		push	{r4, lr}
 671              	.LCFI6:
 672              		.cfi_def_cfa_offset 8
 673              		.cfi_offset 4, -8
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 26


 674              		.cfi_offset 14, -4
 675 0002 0B46     		mov	r3, r1
 608:RTT/SEGGER_RTT.c ****   unsigned NumBytesRead;
 676              		.loc 1 608 3 is_stmt 1 view .LVU211
 677              	.LBB2:
 609:RTT/SEGGER_RTT.c ****   //
 610:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 678              		.loc 1 610 3 view .LVU212
 679              		.loc 1 610 3 view .LVU213
 680              		.syntax unified
 681              	@ 610 "RTT/SEGGER_RTT.c" 1
 682 0004 EFF31184 		mrs   r4, basepri  
 683 0008 4FF02001 		mov   r1, #32       
 684 000c 81F31188 		msr   basepri, r1  
 685              		
 686              	@ 0 "" 2
 687              	.LVL71:
 688              		.loc 1 610 20 view .LVU214
 611:RTT/SEGGER_RTT.c ****   //
 612:RTT/SEGGER_RTT.c ****   // Call the non-locking read function
 613:RTT/SEGGER_RTT.c ****   //
 614:RTT/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 689              		.loc 1 614 3 view .LVU215
 690              		.loc 1 614 18 is_stmt 0 view .LVU216
 691              		.thumb
 692              		.syntax unified
 693 0010 1946     		mov	r1, r3
 694 0012 FFF7FEFF 		bl	SEGGER_RTT_ReadNoLock
 695              	.LVL72:
 615:RTT/SEGGER_RTT.c ****   //
 616:RTT/SEGGER_RTT.c ****   // Finish up.
 617:RTT/SEGGER_RTT.c ****   //
 618:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 696              		.loc 1 618 3 is_stmt 1 view .LVU217
 697              		.syntax unified
 698              	@ 618 "RTT/SEGGER_RTT.c" 1
 699 0016 84F31188 		msr   basepri, r4  
 700              		
 701              	@ 0 "" 2
 702              		.thumb
 703              		.syntax unified
 704              	.LBE2:
 705              		.loc 1 618 22 view .LVU218
 619:RTT/SEGGER_RTT.c ****   //
 620:RTT/SEGGER_RTT.c ****   return NumBytesRead;
 706              		.loc 1 620 3 view .LVU219
 621:RTT/SEGGER_RTT.c **** }
 707              		.loc 1 621 1 is_stmt 0 view .LVU220
 708 001a 10BD     		pop	{r4, pc}
 709              		.loc 1 621 1 view .LVU221
 710              		.cfi_endproc
 711              	.LFE6:
 713              		.section	.text.SEGGER_RTT_WriteWithOverwriteNoLock,"ax",%progbits
 714              		.align	1
 715              		.global	SEGGER_RTT_WriteWithOverwriteNoLock
 716              		.syntax unified
 717              		.thumb
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 27


 718              		.thumb_func
 720              	SEGGER_RTT_WriteWithOverwriteNoLock:
 721              	.LVL73:
 722              	.LFB7:
 622:RTT/SEGGER_RTT.c **** 
 623:RTT/SEGGER_RTT.c **** /*********************************************************************
 624:RTT/SEGGER_RTT.c **** *
 625:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteWithOverwriteNoLock
 626:RTT/SEGGER_RTT.c **** *
 627:RTT/SEGGER_RTT.c **** *  Function description
 628:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 629:RTT/SEGGER_RTT.c **** *    control block.
 630:RTT/SEGGER_RTT.c **** *    SEGGER_RTT_WriteWithOverwriteNoLock does not lock the application 
 631:RTT/SEGGER_RTT.c **** *    and overwrites data if the data does not fit into the buffer.
 632:RTT/SEGGER_RTT.c **** *
 633:RTT/SEGGER_RTT.c **** *  Parameters
 634:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 635:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 636:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 637:RTT/SEGGER_RTT.c **** *
 638:RTT/SEGGER_RTT.c **** *  Notes
 639:RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, data is overwritten.
 640:RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 641:RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 642:RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 643:RTT/SEGGER_RTT.c **** *    (3) Do not use SEGGER_RTT_WriteWithOverwriteNoLock if a J-Link 
 644:RTT/SEGGER_RTT.c **** *        connection reads RTT data.
 645:RTT/SEGGER_RTT.c **** */
 646:RTT/SEGGER_RTT.c **** void SEGGER_RTT_WriteWithOverwriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumByt
 723              		.loc 1 646 104 is_stmt 1 view -0
 724              		.cfi_startproc
 725              		@ args = 0, pretend = 0, frame = 0
 726              		@ frame_needed = 0, uses_anonymous_args = 0
 727              		.loc 1 646 104 is_stmt 0 view .LVU223
 728 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 729              	.LCFI7:
 730              		.cfi_def_cfa_offset 32
 731              		.cfi_offset 3, -32
 732              		.cfi_offset 4, -28
 733              		.cfi_offset 5, -24
 734              		.cfi_offset 6, -20
 735              		.cfi_offset 7, -16
 736              		.cfi_offset 8, -12
 737              		.cfi_offset 9, -8
 738              		.cfi_offset 14, -4
 739 0004 0646     		mov	r6, r0
 740 0006 8846     		mov	r8, r1
 741 0008 1746     		mov	r7, r2
 647:RTT/SEGGER_RTT.c ****   const char*           pData;
 742              		.loc 1 647 3 is_stmt 1 view .LVU224
 648:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 743              		.loc 1 648 3 view .LVU225
 649:RTT/SEGGER_RTT.c ****   unsigned              Avail;
 744              		.loc 1 649 3 view .LVU226
 650:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 651:RTT/SEGGER_RTT.c ****   char*                 pDst;
 652:RTT/SEGGER_RTT.c **** #endif
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 28


 653:RTT/SEGGER_RTT.c **** 
 654:RTT/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 745              		.loc 1 654 3 view .LVU227
 746              	.LVL74:
 655:RTT/SEGGER_RTT.c ****   //
 656:RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer and copy some elements into local variables.
 657:RTT/SEGGER_RTT.c ****   //
 658:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 747              		.loc 1 658 3 view .LVU228
 659:RTT/SEGGER_RTT.c ****   //
 660:RTT/SEGGER_RTT.c ****   // Check if we will overwrite data and need to adjust the RdOff.
 661:RTT/SEGGER_RTT.c ****   //
 662:RTT/SEGGER_RTT.c ****   if (pRing->WrOff == pRing->RdOff) {
 748              		.loc 1 662 3 view .LVU229
 749              		.loc 1 662 12 is_stmt 0 view .LVU230
 750 000a 00EB4002 		add	r2, r0, r0, lsl #1
 751              	.LVL75:
 752              		.loc 1 662 12 view .LVU231
 753 000e 3F4B     		ldr	r3, .L53
 754 0010 03EBC203 		add	r3, r3, r2, lsl #3
 755 0014 596A     		ldr	r1, [r3, #36]
 756              	.LVL76:
 757              		.loc 1 662 28 view .LVU232
 758 0016 9B6A     		ldr	r3, [r3, #40]
 759              		.loc 1 662 6 view .LVU233
 760 0018 9942     		cmp	r1, r3
 761 001a 0FD0     		beq	.L51
 663:RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 664:RTT/SEGGER_RTT.c ****   } else if ( pRing->WrOff < pRing->RdOff) {
 762              		.loc 1 664 10 is_stmt 1 view .LVU234
 763              		.loc 1 664 35 is_stmt 0 view .LVU235
 764 001c 00EB4003 		add	r3, r0, r0, lsl #1
 765 0020 3A4A     		ldr	r2, .L53
 766 0022 02EBC303 		add	r3, r2, r3, lsl #3
 767 0026 9B6A     		ldr	r3, [r3, #40]
 768              		.loc 1 664 13 view .LVU236
 769 0028 9942     		cmp	r1, r3
 770 002a 19D2     		bcs	.L43
 665:RTT/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u;
 771              		.loc 1 665 5 is_stmt 1 view .LVU237
 772              		.loc 1 665 18 is_stmt 0 view .LVU238
 773 002c 00EB4003 		add	r3, r0, r0, lsl #1
 774 0030 02EBC303 		add	r3, r2, r3, lsl #3
 775 0034 9B6A     		ldr	r3, [r3, #40]
 776              		.loc 1 665 26 view .LVU239
 777 0036 5B1A     		subs	r3, r3, r1
 778              		.loc 1 665 11 view .LVU240
 779 0038 013B     		subs	r3, r3, #1
 780              	.LVL77:
 781              		.loc 1 665 11 view .LVU241
 782 003a 05E0     		b	.L42
 783              	.LVL78:
 784              	.L51:
 663:RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 785              		.loc 1 663 5 is_stmt 1 view .LVU242
 663:RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 786              		.loc 1 663 18 is_stmt 0 view .LVU243
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 29


 787 003c 1346     		mov	r3, r2
 788 003e 334A     		ldr	r2, .L53
 789 0040 02EBC303 		add	r3, r2, r3, lsl #3
 790 0044 1B6A     		ldr	r3, [r3, #32]
 663:RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 791              		.loc 1 663 11 view .LVU244
 792 0046 013B     		subs	r3, r3, #1
 793              	.LVL79:
 794              	.L42:
 666:RTT/SEGGER_RTT.c ****   } else {
 667:RTT/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u + pRing->SizeOfBuffer;
 668:RTT/SEGGER_RTT.c ****   }
 669:RTT/SEGGER_RTT.c ****   if (NumBytes > Avail) {
 795              		.loc 1 669 3 is_stmt 1 view .LVU245
 796              		.loc 1 669 6 is_stmt 0 view .LVU246
 797 0048 BB42     		cmp	r3, r7
 798 004a 25D2     		bcs	.L44
 670:RTT/SEGGER_RTT.c ****     pRing->RdOff += (NumBytes - Avail);
 799              		.loc 1 670 5 is_stmt 1 view .LVU247
 800              		.loc 1 670 18 is_stmt 0 view .LVU248
 801 004c 06EB4602 		add	r2, r6, r6, lsl #1
 802 0050 2E48     		ldr	r0, .L53
 803              	.LVL80:
 804              		.loc 1 670 18 view .LVU249
 805 0052 00EBC202 		add	r2, r0, r2, lsl #3
 806 0056 906A     		ldr	r0, [r2, #40]
 807              		.loc 1 670 31 view .LVU250
 808 0058 FB1A     		subs	r3, r7, r3
 809              	.LVL81:
 810              		.loc 1 670 18 view .LVU251
 811 005a 0344     		add	r3, r3, r0
 812 005c 9362     		str	r3, [r2, #40]
 671:RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 813              		.loc 1 671 5 is_stmt 1 view .LVU252
 814              		.loc 1 671 11 is_stmt 0 view .LVU253
 815 005e 12E0     		b	.L45
 816              	.LVL82:
 817              	.L43:
 667:RTT/SEGGER_RTT.c ****   }
 818              		.loc 1 667 5 is_stmt 1 view .LVU254
 667:RTT/SEGGER_RTT.c ****   }
 819              		.loc 1 667 18 is_stmt 0 view .LVU255
 820 0060 00EB4002 		add	r2, r0, r0, lsl #1
 821 0064 294B     		ldr	r3, .L53
 822 0066 03EBC202 		add	r2, r3, r2, lsl #3
 823 006a 936A     		ldr	r3, [r2, #40]
 667:RTT/SEGGER_RTT.c ****   }
 824              		.loc 1 667 26 view .LVU256
 825 006c 5B1A     		subs	r3, r3, r1
 667:RTT/SEGGER_RTT.c ****   }
 826              		.loc 1 667 53 view .LVU257
 827 006e 126A     		ldr	r2, [r2, #32]
 667:RTT/SEGGER_RTT.c ****   }
 828              		.loc 1 667 46 view .LVU258
 829 0070 1344     		add	r3, r3, r2
 667:RTT/SEGGER_RTT.c ****   }
 830              		.loc 1 667 11 view .LVU259
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 30


 831 0072 013B     		subs	r3, r3, #1
 832              	.LVL83:
 667:RTT/SEGGER_RTT.c ****   }
 833              		.loc 1 667 11 view .LVU260
 834 0074 E8E7     		b	.L42
 835              	.LVL84:
 836              	.L46:
 672:RTT/SEGGER_RTT.c ****       pRing->RdOff -= pRing->SizeOfBuffer;
 837              		.loc 1 672 7 is_stmt 1 view .LVU261
 838              		.loc 1 672 20 is_stmt 0 view .LVU262
 839 0076 06EB4603 		add	r3, r6, r6, lsl #1
 840 007a 244A     		ldr	r2, .L53
 841 007c 02EBC303 		add	r3, r2, r3, lsl #3
 842 0080 9A6A     		ldr	r2, [r3, #40]
 843 0082 121A     		subs	r2, r2, r0
 844 0084 9A62     		str	r2, [r3, #40]
 845              	.L45:
 671:RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 846              		.loc 1 671 11 is_stmt 1 view .LVU263
 671:RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 847              		.loc 1 671 17 is_stmt 0 view .LVU264
 848 0086 06EB4603 		add	r3, r6, r6, lsl #1
 849 008a 204A     		ldr	r2, .L53
 850 008c 02EBC303 		add	r3, r2, r3, lsl #3
 851 0090 9A6A     		ldr	r2, [r3, #40]
 671:RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 852              		.loc 1 671 33 view .LVU265
 853 0092 186A     		ldr	r0, [r3, #32]
 671:RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 854              		.loc 1 671 11 view .LVU266
 855 0094 8242     		cmp	r2, r0
 856 0096 EED2     		bcs	.L46
 857              	.L44:
 673:RTT/SEGGER_RTT.c ****     }
 674:RTT/SEGGER_RTT.c ****   }
 675:RTT/SEGGER_RTT.c ****   //
 676:RTT/SEGGER_RTT.c ****   // Write all data, no need to check the RdOff, but possibly handle multiple wrap-arounds
 677:RTT/SEGGER_RTT.c ****   //
 678:RTT/SEGGER_RTT.c ****   Avail = pRing->SizeOfBuffer - pRing->WrOff;
 858              		.loc 1 678 3 is_stmt 1 view .LVU267
 859              		.loc 1 678 16 is_stmt 0 view .LVU268
 860 0098 06EB4603 		add	r3, r6, r6, lsl #1
 861 009c 1B4A     		ldr	r2, .L53
 862 009e 02EBC303 		add	r3, r2, r3, lsl #3
 863 00a2 1C6A     		ldr	r4, [r3, #32]
 864              		.loc 1 678 9 view .LVU269
 865 00a4 641A     		subs	r4, r4, r1
 866              	.LVL85:
 867              	.L49:
 679:RTT/SEGGER_RTT.c ****   do {
 868              		.loc 1 679 3 is_stmt 1 view .LVU270
 680:RTT/SEGGER_RTT.c ****     if (Avail > NumBytes) {
 869              		.loc 1 680 5 view .LVU271
 870              		.loc 1 680 8 is_stmt 0 view .LVU272
 871 00a6 A742     		cmp	r7, r4
 872 00a8 19D3     		bcc	.L52
 681:RTT/SEGGER_RTT.c ****       //
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 31


 682:RTT/SEGGER_RTT.c ****       // Last round
 683:RTT/SEGGER_RTT.c ****       //
 684:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 685:RTT/SEGGER_RTT.c ****       pDst = pRing->pBuffer + pRing->WrOff;
 686:RTT/SEGGER_RTT.c ****       Avail = NumBytes;
 687:RTT/SEGGER_RTT.c ****       while (NumBytes--) {
 688:RTT/SEGGER_RTT.c ****         *pDst++ = *pData++;
 689:RTT/SEGGER_RTT.c ****       };
 690:RTT/SEGGER_RTT.c ****       pRing->WrOff += Avail;
 691:RTT/SEGGER_RTT.c **** #else
 692:RTT/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY(pRing->pBuffer + pRing->WrOff, pData, NumBytes);
 693:RTT/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 694:RTT/SEGGER_RTT.c **** #endif
 695:RTT/SEGGER_RTT.c ****       break;
 696:RTT/SEGGER_RTT.c ****     } else {
 697:RTT/SEGGER_RTT.c ****       //
 698:RTT/SEGGER_RTT.c ****       //  Wrap-around necessary, write until wrap-around and reset WrOff
 699:RTT/SEGGER_RTT.c ****       //
 700:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 701:RTT/SEGGER_RTT.c ****       pDst = pRing->pBuffer + pRing->WrOff;
 702:RTT/SEGGER_RTT.c ****       NumBytes -= Avail;
 703:RTT/SEGGER_RTT.c ****       while (Avail--) {
 704:RTT/SEGGER_RTT.c ****         *pDst++ = *pData++;
 705:RTT/SEGGER_RTT.c ****       };
 706:RTT/SEGGER_RTT.c ****       pRing->WrOff = 0;
 707:RTT/SEGGER_RTT.c **** #else
 708:RTT/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY(pRing->pBuffer + pRing->WrOff, pData, Avail);
 873              		.loc 1 708 7 is_stmt 1 view .LVU273
 874 00aa 184D     		ldr	r5, .L53
 875 00ac 731C     		adds	r3, r6, #1
 876 00ae 03EB4303 		add	r3, r3, r3, lsl #1
 877 00b2 05EBC303 		add	r3, r5, r3, lsl #3
 878 00b6 5868     		ldr	r0, [r3, #4]
 879 00b8 06EB4603 		add	r3, r6, r6, lsl #1
 880 00bc 05EBC305 		add	r5, r5, r3, lsl #3
 881 00c0 6B6A     		ldr	r3, [r5, #36]
 882 00c2 2246     		mov	r2, r4
 883 00c4 4146     		mov	r1, r8
 884 00c6 1844     		add	r0, r0, r3
 885 00c8 FFF7FEFF 		bl	memcpy
 886              	.LVL86:
 709:RTT/SEGGER_RTT.c ****       pData += Avail;
 887              		.loc 1 709 7 view .LVU274
 888              		.loc 1 709 13 is_stmt 0 view .LVU275
 889 00cc A044     		add	r8, r8, r4
 890              	.LVL87:
 710:RTT/SEGGER_RTT.c ****       pRing->WrOff = 0;
 891              		.loc 1 710 7 is_stmt 1 view .LVU276
 892              		.loc 1 710 20 is_stmt 0 view .LVU277
 893 00ce 0023     		movs	r3, #0
 894 00d0 6B62     		str	r3, [r5, #36]
 711:RTT/SEGGER_RTT.c ****       NumBytes -= Avail;
 895              		.loc 1 711 7 is_stmt 1 view .LVU278
 896              		.loc 1 711 16 is_stmt 0 view .LVU279
 897 00d2 3F1B     		subs	r7, r7, r4
 898              	.LVL88:
 712:RTT/SEGGER_RTT.c **** #endif
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 32


 713:RTT/SEGGER_RTT.c ****       Avail = (pRing->SizeOfBuffer - 1);
 899              		.loc 1 713 7 is_stmt 1 view .LVU280
 900              		.loc 1 713 21 is_stmt 0 view .LVU281
 901 00d4 2C6A     		ldr	r4, [r5, #32]
 902              	.LVL89:
 903              		.loc 1 713 13 view .LVU282
 904 00d6 013C     		subs	r4, r4, #1
 905              	.LVL90:
 714:RTT/SEGGER_RTT.c ****     }
 715:RTT/SEGGER_RTT.c ****   } while (NumBytes);
 906              		.loc 1 715 11 is_stmt 1 view .LVU283
 907              		.loc 1 715 3 is_stmt 0 view .LVU284
 908 00d8 002F     		cmp	r7, #0
 909 00da E4D1     		bne	.L49
 910 00dc 13E0     		b	.L40
 911              	.L52:
 692:RTT/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 912              		.loc 1 692 7 is_stmt 1 view .LVU285
 913 00de 0B4C     		ldr	r4, .L53
 914              	.LVL91:
 692:RTT/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 915              		.loc 1 692 7 is_stmt 0 view .LVU286
 916 00e0 731C     		adds	r3, r6, #1
 917 00e2 03EB4303 		add	r3, r3, r3, lsl #1
 918 00e6 04EBC303 		add	r3, r4, r3, lsl #3
 919 00ea 5868     		ldr	r0, [r3, #4]
 920 00ec 06EB4605 		add	r5, r6, r6, lsl #1
 921 00f0 04EBC505 		add	r5, r4, r5, lsl #3
 922 00f4 6B6A     		ldr	r3, [r5, #36]
 923 00f6 3A46     		mov	r2, r7
 924 00f8 4146     		mov	r1, r8
 925 00fa 1844     		add	r0, r0, r3
 926 00fc FFF7FEFF 		bl	memcpy
 927              	.LVL92:
 693:RTT/SEGGER_RTT.c **** #endif
 928              		.loc 1 693 7 is_stmt 1 view .LVU287
 693:RTT/SEGGER_RTT.c **** #endif
 929              		.loc 1 693 20 is_stmt 0 view .LVU288
 930 0100 6B6A     		ldr	r3, [r5, #36]
 931 0102 1F44     		add	r7, r7, r3
 932              	.LVL93:
 693:RTT/SEGGER_RTT.c **** #endif
 933              		.loc 1 693 20 view .LVU289
 934 0104 6F62     		str	r7, [r5, #36]
 695:RTT/SEGGER_RTT.c ****     } else {
 935              		.loc 1 695 7 is_stmt 1 view .LVU290
 936              	.L40:
 716:RTT/SEGGER_RTT.c **** }
 937              		.loc 1 716 1 is_stmt 0 view .LVU291
 938 0106 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 939              	.LVL94:
 940              	.L54:
 941              		.loc 1 716 1 view .LVU292
 942 010a 00BF     		.align	2
 943              	.L53:
 944 010c 00000000 		.word	.LANCHOR1
 945              		.cfi_endproc
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 33


 946              	.LFE7:
 948              		.section	.text.SEGGER_RTT_WriteNoLock,"ax",%progbits
 949              		.align	1
 950              		.global	SEGGER_RTT_WriteNoLock
 951              		.syntax unified
 952              		.thumb
 953              		.thumb_func
 955              	SEGGER_RTT_WriteNoLock:
 956              	.LVL95:
 957              	.LFB8:
 717:RTT/SEGGER_RTT.c **** 
 718:RTT/SEGGER_RTT.c **** /*********************************************************************
 719:RTT/SEGGER_RTT.c **** *
 720:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteSkipNoLock
 721:RTT/SEGGER_RTT.c **** *
 722:RTT/SEGGER_RTT.c **** *  Function description
 723:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 724:RTT/SEGGER_RTT.c **** *    control block which is then read by the host.
 725:RTT/SEGGER_RTT.c **** *    SEGGER_RTT_WriteSkipNoLock does not lock the application and
 726:RTT/SEGGER_RTT.c **** *    skips all data, if the data does not fit into the buffer.
 727:RTT/SEGGER_RTT.c **** *
 728:RTT/SEGGER_RTT.c **** *  Parameters
 729:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 730:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 731:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 732:RTT/SEGGER_RTT.c **** *                 MUST be > 0!!!
 733:RTT/SEGGER_RTT.c **** *                 This is done for performance reasons, so no initial check has do be done.
 734:RTT/SEGGER_RTT.c **** *
 735:RTT/SEGGER_RTT.c **** *  Return value
 736:RTT/SEGGER_RTT.c **** *    1: Data has been copied
 737:RTT/SEGGER_RTT.c **** *    0: No space, data has not been copied
 738:RTT/SEGGER_RTT.c **** *
 739:RTT/SEGGER_RTT.c **** *  Notes
 740:RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
 741:RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 742:RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 743:RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 744:RTT/SEGGER_RTT.c **** */
 745:RTT/SEGGER_RTT.c **** #if (RTT_USE_ASM == 0)
 746:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 747:RTT/SEGGER_RTT.c ****   const char*           pData;
 748:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 749:RTT/SEGGER_RTT.c ****   unsigned              Avail;
 750:RTT/SEGGER_RTT.c ****   unsigned              RdOff;
 751:RTT/SEGGER_RTT.c ****   unsigned              WrOff;
 752:RTT/SEGGER_RTT.c ****   unsigned              Rem;
 753:RTT/SEGGER_RTT.c ****   //
 754:RTT/SEGGER_RTT.c ****   // Cases:
 755:RTT/SEGGER_RTT.c ****   //   1) RdOff <= WrOff => Space until wrap-around is sufficient
 756:RTT/SEGGER_RTT.c ****   //   2) RdOff <= WrOff => Space after wrap-around needed (copy in 2 chunks)
 757:RTT/SEGGER_RTT.c ****   //   3) RdOff <  WrOff => No space in buf
 758:RTT/SEGGER_RTT.c ****   //   4) RdOff >  WrOff => Space is sufficient
 759:RTT/SEGGER_RTT.c ****   //   5) RdOff >  WrOff => No space in buf
 760:RTT/SEGGER_RTT.c ****   //
 761:RTT/SEGGER_RTT.c ****   // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enou
 762:RTT/SEGGER_RTT.c ****   //
 763:RTT/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 34


 764:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 765:RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 766:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 767:RTT/SEGGER_RTT.c ****   if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 768:RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte n
 769:RTT/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 1)?
 770:RTT/SEGGER_RTT.c **** CopyStraight:
 771:RTT/SEGGER_RTT.c ****       memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 772:RTT/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 773:RTT/SEGGER_RTT.c ****       return 1;
 774:RTT/SEGGER_RTT.c ****     }
 775:RTT/SEGGER_RTT.c ****     Avail += RdOff;                                     // Space incl. wrap-around
 776:RTT/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does
 777:RTT/SEGGER_RTT.c ****       Rem = pRing->SizeOfBuffer - WrOff;                // Space until end of buffer
 778:RTT/SEGGER_RTT.c ****       memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
 779:RTT/SEGGER_RTT.c ****       NumBytes -= Rem;
 780:RTT/SEGGER_RTT.c ****       //
 781:RTT/SEGGER_RTT.c ****       // Special case: First check that assumed RdOff == 0 calculated that last element before wrap
 782:RTT/SEGGER_RTT.c ****       // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is
 783:RTT/SEGGER_RTT.c ****       // In this case, we may use a copy straight until buffer end anyway without needing to copy 2
 784:RTT/SEGGER_RTT.c ****       // Therefore, check if 2nd memcpy is necessary at all
 785:RTT/SEGGER_RTT.c ****       //
 786:RTT/SEGGER_RTT.c ****       if (NumBytes) {
 787:RTT/SEGGER_RTT.c ****         memcpy(pRing->pBuffer, pData + Rem, NumBytes);
 788:RTT/SEGGER_RTT.c ****       }
 789:RTT/SEGGER_RTT.c ****       pRing->WrOff = NumBytes;
 790:RTT/SEGGER_RTT.c ****       return 1;
 791:RTT/SEGGER_RTT.c ****     }
 792:RTT/SEGGER_RTT.c ****   } else {                                             // Potential case 4)
 793:RTT/SEGGER_RTT.c ****     Avail = RdOff - WrOff - 1u;
 794:RTT/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does
 795:RTT/SEGGER_RTT.c ****       goto CopyStraight;
 796:RTT/SEGGER_RTT.c ****     }
 797:RTT/SEGGER_RTT.c ****   }
 798:RTT/SEGGER_RTT.c ****   return 0;     // No space in buffer
 799:RTT/SEGGER_RTT.c **** }
 800:RTT/SEGGER_RTT.c **** #endif
 801:RTT/SEGGER_RTT.c **** 
 802:RTT/SEGGER_RTT.c **** /*********************************************************************
 803:RTT/SEGGER_RTT.c **** *
 804:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteNoLock
 805:RTT/SEGGER_RTT.c **** *
 806:RTT/SEGGER_RTT.c **** *  Function description
 807:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 808:RTT/SEGGER_RTT.c **** *    control block which is then read by the host.
 809:RTT/SEGGER_RTT.c **** *    SEGGER_RTT_WriteNoLock does not lock the application.
 810:RTT/SEGGER_RTT.c **** *
 811:RTT/SEGGER_RTT.c **** *  Parameters
 812:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 813:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 814:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 815:RTT/SEGGER_RTT.c **** *
 816:RTT/SEGGER_RTT.c **** *  Return value
 817:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
 818:RTT/SEGGER_RTT.c **** *
 819:RTT/SEGGER_RTT.c **** *  Notes
 820:RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 35


 821:RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 822:RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 823:RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 824:RTT/SEGGER_RTT.c **** */
 825:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 958              		.loc 1 825 95 is_stmt 1 view -0
 959              		.cfi_startproc
 960              		@ args = 0, pretend = 0, frame = 0
 961              		@ frame_needed = 0, uses_anonymous_args = 0
 962              		.loc 1 825 95 is_stmt 0 view .LVU294
 963 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 964              	.LCFI8:
 965              		.cfi_def_cfa_offset 24
 966              		.cfi_offset 3, -24
 967              		.cfi_offset 4, -20
 968              		.cfi_offset 5, -16
 969              		.cfi_offset 6, -12
 970              		.cfi_offset 7, -8
 971              		.cfi_offset 14, -4
 972 0002 0F46     		mov	r7, r1
 973 0004 1646     		mov	r6, r2
 826:RTT/SEGGER_RTT.c ****   unsigned              Status;
 974              		.loc 1 826 3 is_stmt 1 view .LVU295
 827:RTT/SEGGER_RTT.c ****   unsigned              Avail;
 975              		.loc 1 827 3 view .LVU296
 828:RTT/SEGGER_RTT.c ****   const char*           pData;
 976              		.loc 1 828 3 view .LVU297
 829:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 977              		.loc 1 829 3 view .LVU298
 830:RTT/SEGGER_RTT.c **** 
 831:RTT/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 978              		.loc 1 831 3 view .LVU299
 979              	.LVL96:
 832:RTT/SEGGER_RTT.c ****   //
 833:RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
 834:RTT/SEGGER_RTT.c ****   //
 835:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 980              		.loc 1 835 3 view .LVU300
 981              		.loc 1 835 9 is_stmt 0 view .LVU301
 982 0006 184B     		ldr	r3, .L62
 983 0008 451C     		adds	r5, r0, #1
 984 000a 05EB4505 		add	r5, r5, r5, lsl #1
 985 000e 03EBC505 		add	r5, r3, r5, lsl #3
 986              	.LVL97:
 836:RTT/SEGGER_RTT.c ****   //
 837:RTT/SEGGER_RTT.c ****   // How we output depends upon the mode...
 838:RTT/SEGGER_RTT.c ****   //
 839:RTT/SEGGER_RTT.c ****   switch (pRing->Flags) {
 987              		.loc 1 839 3 is_stmt 1 view .LVU302
 988              		.loc 1 839 16 is_stmt 0 view .LVU303
 989 0012 00EB4000 		add	r0, r0, r0, lsl #1
 990              	.LVL98:
 991              		.loc 1 839 16 view .LVU304
 992 0016 03EBC000 		add	r0, r3, r0, lsl #3
 993 001a C46A     		ldr	r4, [r0, #44]
 994              		.loc 1 839 3 view .LVU305
 995 001c 012C     		cmp	r4, #1
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 36


 996 001e 11D0     		beq	.L56
 997 0020 022C     		cmp	r4, #2
 998 0022 1CD0     		beq	.L57
 999 0024 14B1     		cbz	r4, .L61
 1000 0026 0024     		movs	r4, #0
 1001              	.LVL99:
 840:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
 841:RTT/SEGGER_RTT.c ****     //
 842:RTT/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
 843:RTT/SEGGER_RTT.c ****     // of this output, don't bother.
 844:RTT/SEGGER_RTT.c ****     //
 845:RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 846:RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 847:RTT/SEGGER_RTT.c ****       Status = 0u;
 848:RTT/SEGGER_RTT.c ****     } else {
 849:RTT/SEGGER_RTT.c ****       Status = NumBytes;
 850:RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 851:RTT/SEGGER_RTT.c ****     }
 852:RTT/SEGGER_RTT.c ****     break;
 853:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
 854:RTT/SEGGER_RTT.c ****     //
 855:RTT/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
 856:RTT/SEGGER_RTT.c ****     //
 857:RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 858:RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 859:RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 860:RTT/SEGGER_RTT.c ****     break;
 861:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
 862:RTT/SEGGER_RTT.c ****     //
 863:RTT/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
 864:RTT/SEGGER_RTT.c ****     //
 865:RTT/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
 866:RTT/SEGGER_RTT.c ****     break;
 867:RTT/SEGGER_RTT.c ****   default:
 868:RTT/SEGGER_RTT.c ****     Status = 0u;
 869:RTT/SEGGER_RTT.c ****     break;
 870:RTT/SEGGER_RTT.c ****   }
 871:RTT/SEGGER_RTT.c ****   //
 872:RTT/SEGGER_RTT.c ****   // Finish up.
 873:RTT/SEGGER_RTT.c ****   //
 874:RTT/SEGGER_RTT.c ****   return Status;
 1002              		.loc 1 874 3 is_stmt 1 view .LVU306
 1003              	.L55:
 875:RTT/SEGGER_RTT.c **** }
 1004              		.loc 1 875 1 is_stmt 0 view .LVU307
 1005 0028 2046     		mov	r0, r4
 1006 002a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1007              	.LVL100:
 1008              	.L61:
 845:RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1009              		.loc 1 845 5 is_stmt 1 view .LVU308
 845:RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1010              		.loc 1 845 13 is_stmt 0 view .LVU309
 1011 002c 2846     		mov	r0, r5
 1012 002e FFF7FEFF 		bl	_GetAvailWriteSpace
 1013              	.LVL101:
 846:RTT/SEGGER_RTT.c ****       Status = 0u;
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 37


 1014              		.loc 1 846 5 is_stmt 1 view .LVU310
 846:RTT/SEGGER_RTT.c ****       Status = 0u;
 1015              		.loc 1 846 8 is_stmt 0 view .LVU311
 1016 0032 8642     		cmp	r6, r0
 1017 0034 F8D8     		bhi	.L55
 849:RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1018              		.loc 1 849 7 is_stmt 1 view .LVU312
 1019              	.LVL102:
 850:RTT/SEGGER_RTT.c ****     }
 1020              		.loc 1 850 7 view .LVU313
 1021 0036 3246     		mov	r2, r6
 1022 0038 3946     		mov	r1, r7
 1023 003a 2846     		mov	r0, r5
 1024              	.LVL103:
 850:RTT/SEGGER_RTT.c ****     }
 1025              		.loc 1 850 7 is_stmt 0 view .LVU314
 1026 003c FFF7FEFF 		bl	_WriteNoCheck
 1027              	.LVL104:
 849:RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1028              		.loc 1 849 14 view .LVU315
 1029 0040 3446     		mov	r4, r6
 1030 0042 F1E7     		b	.L55
 1031              	.LVL105:
 1032              	.L56:
 857:RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1033              		.loc 1 857 5 is_stmt 1 view .LVU316
 857:RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1034              		.loc 1 857 13 is_stmt 0 view .LVU317
 1035 0044 2846     		mov	r0, r5
 1036 0046 FFF7FEFF 		bl	_GetAvailWriteSpace
 1037              	.LVL106:
 858:RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1038              		.loc 1 858 5 is_stmt 1 view .LVU318
 858:RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1039              		.loc 1 858 12 is_stmt 0 view .LVU319
 1040 004a 3446     		mov	r4, r6
 1041 004c 8642     		cmp	r6, r0
 1042 004e 28BF     		it	cs
 1043 0050 0446     		movcs	r4, r0
 1044              	.LVL107:
 859:RTT/SEGGER_RTT.c ****     break;
 1045              		.loc 1 859 5 is_stmt 1 view .LVU320
 1046 0052 2246     		mov	r2, r4
 1047 0054 3946     		mov	r1, r7
 1048 0056 2846     		mov	r0, r5
 1049              	.LVL108:
 859:RTT/SEGGER_RTT.c ****     break;
 1050              		.loc 1 859 5 is_stmt 0 view .LVU321
 1051 0058 FFF7FEFF 		bl	_WriteNoCheck
 1052              	.LVL109:
 860:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
 1053              		.loc 1 860 5 is_stmt 1 view .LVU322
 1054 005c E4E7     		b	.L55
 1055              	.LVL110:
 1056              	.L57:
 865:RTT/SEGGER_RTT.c ****     break;
 1057              		.loc 1 865 5 view .LVU323
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 38


 865:RTT/SEGGER_RTT.c ****     break;
 1058              		.loc 1 865 14 is_stmt 0 view .LVU324
 1059 005e 2846     		mov	r0, r5
 1060 0060 FFF7FEFF 		bl	_WriteBlocking
 1061              	.LVL111:
 865:RTT/SEGGER_RTT.c ****     break;
 1062              		.loc 1 865 14 view .LVU325
 1063 0064 0446     		mov	r4, r0
 1064              	.LVL112:
 866:RTT/SEGGER_RTT.c ****   default:
 1065              		.loc 1 866 5 is_stmt 1 view .LVU326
 1066 0066 DFE7     		b	.L55
 1067              	.L63:
 1068              		.align	2
 1069              	.L62:
 1070 0068 00000000 		.word	.LANCHOR1
 1071              		.cfi_endproc
 1072              	.LFE8:
 1074              		.section	.text.SEGGER_RTT_Write,"ax",%progbits
 1075              		.align	1
 1076              		.global	SEGGER_RTT_Write
 1077              		.syntax unified
 1078              		.thumb
 1079              		.thumb_func
 1081              	SEGGER_RTT_Write:
 1082              	.LVL113:
 1083              	.LFB9:
 876:RTT/SEGGER_RTT.c **** 
 877:RTT/SEGGER_RTT.c **** /*********************************************************************
 878:RTT/SEGGER_RTT.c **** *
 879:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_Write
 880:RTT/SEGGER_RTT.c **** *
 881:RTT/SEGGER_RTT.c **** *  Function description
 882:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 883:RTT/SEGGER_RTT.c **** *    control block which is then read by the host.
 884:RTT/SEGGER_RTT.c **** *
 885:RTT/SEGGER_RTT.c **** *  Parameters
 886:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 887:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 888:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 889:RTT/SEGGER_RTT.c **** *
 890:RTT/SEGGER_RTT.c **** *  Return value
 891:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
 892:RTT/SEGGER_RTT.c **** *
 893:RTT/SEGGER_RTT.c **** *  Notes
 894:RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
 895:RTT/SEGGER_RTT.c **** */
 896:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1084              		.loc 1 896 89 view -0
 1085              		.cfi_startproc
 1086              		@ args = 0, pretend = 0, frame = 0
 1087              		@ frame_needed = 0, uses_anonymous_args = 0
 1088              		.loc 1 896 89 is_stmt 0 view .LVU328
 1089 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1090              	.LCFI9:
 1091              		.cfi_def_cfa_offset 24
 1092              		.cfi_offset 3, -24
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 39


 1093              		.cfi_offset 4, -20
 1094              		.cfi_offset 5, -16
 1095              		.cfi_offset 6, -12
 1096              		.cfi_offset 7, -8
 1097              		.cfi_offset 14, -4
 1098 0002 0446     		mov	r4, r0
 1099 0004 0D46     		mov	r5, r1
 1100 0006 1646     		mov	r6, r2
 897:RTT/SEGGER_RTT.c ****   unsigned Status;
 1101              		.loc 1 897 3 is_stmt 1 view .LVU329
 898:RTT/SEGGER_RTT.c ****   //
 899:RTT/SEGGER_RTT.c ****   INIT();
 1102              		.loc 1 899 3 view .LVU330
 1103              		.loc 1 899 3 view .LVU331
 1104 0008 094B     		ldr	r3, .L68
 1105 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1106 000c 6BB1     		cbz	r3, .L67
 1107              	.LVL114:
 1108              	.L65:
 1109              		.loc 1 899 3 discriminator 3 view .LVU332
 1110              	.LBB3:
 900:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1111              		.loc 1 900 3 discriminator 3 view .LVU333
 1112              		.loc 1 900 3 discriminator 3 view .LVU334
 1113              		.syntax unified
 1114              	@ 900 "RTT/SEGGER_RTT.c" 1
 1115 000e EFF31187 		mrs   r7, basepri  
 1116 0012 4FF02001 		mov   r1, #32       
 1117 0016 81F31188 		msr   basepri, r1  
 1118              		
 1119              	@ 0 "" 2
 1120              	.LVL115:
 1121              		.loc 1 900 20 discriminator 3 view .LVU335
 901:RTT/SEGGER_RTT.c ****   //
 902:RTT/SEGGER_RTT.c ****   // Call the non-locking write function
 903:RTT/SEGGER_RTT.c ****   //
 904:RTT/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 1122              		.loc 1 904 3 discriminator 3 view .LVU336
 1123              		.loc 1 904 12 is_stmt 0 discriminator 3 view .LVU337
 1124              		.thumb
 1125              		.syntax unified
 1126 001a 3246     		mov	r2, r6
 1127 001c 2946     		mov	r1, r5
 1128 001e 2046     		mov	r0, r4
 1129 0020 FFF7FEFF 		bl	SEGGER_RTT_WriteNoLock
 1130              	.LVL116:
 905:RTT/SEGGER_RTT.c ****   //
 906:RTT/SEGGER_RTT.c ****   // Finish up.
 907:RTT/SEGGER_RTT.c ****   //
 908:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1131              		.loc 1 908 3 is_stmt 1 discriminator 3 view .LVU338
 1132              		.syntax unified
 1133              	@ 908 "RTT/SEGGER_RTT.c" 1
 1134 0024 87F31188 		msr   basepri, r7  
 1135              		
 1136              	@ 0 "" 2
 1137              		.thumb
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 40


 1138              		.syntax unified
 1139              	.LBE3:
 1140              		.loc 1 908 22 discriminator 3 view .LVU339
 909:RTT/SEGGER_RTT.c ****   //
 910:RTT/SEGGER_RTT.c ****   return Status;
 1141              		.loc 1 910 3 discriminator 3 view .LVU340
 911:RTT/SEGGER_RTT.c **** }
 1142              		.loc 1 911 1 is_stmt 0 discriminator 3 view .LVU341
 1143 0028 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1144              	.LVL117:
 1145              	.L67:
 899:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1146              		.loc 1 899 3 is_stmt 1 discriminator 1 view .LVU342
 1147 002a FFF7FEFF 		bl	_DoInit
 1148              	.LVL118:
 899:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1149              		.loc 1 899 3 is_stmt 0 discriminator 1 view .LVU343
 1150 002e EEE7     		b	.L65
 1151              	.L69:
 1152              		.align	2
 1153              	.L68:
 1154 0030 00000000 		.word	.LANCHOR1
 1155              		.cfi_endproc
 1156              	.LFE9:
 1158              		.section	.text.SEGGER_RTT_WriteString,"ax",%progbits
 1159              		.align	1
 1160              		.global	SEGGER_RTT_WriteString
 1161              		.syntax unified
 1162              		.thumb
 1163              		.thumb_func
 1165              	SEGGER_RTT_WriteString:
 1166              	.LVL119:
 1167              	.LFB10:
 912:RTT/SEGGER_RTT.c **** 
 913:RTT/SEGGER_RTT.c **** /*********************************************************************
 914:RTT/SEGGER_RTT.c **** *
 915:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteString
 916:RTT/SEGGER_RTT.c **** *
 917:RTT/SEGGER_RTT.c **** *  Function description
 918:RTT/SEGGER_RTT.c **** *    Stores string in SEGGER RTT control block.
 919:RTT/SEGGER_RTT.c **** *    This data is read by the host.
 920:RTT/SEGGER_RTT.c **** *
 921:RTT/SEGGER_RTT.c **** *  Parameters
 922:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 923:RTT/SEGGER_RTT.c **** *    s            Pointer to string.
 924:RTT/SEGGER_RTT.c **** *
 925:RTT/SEGGER_RTT.c **** *  Return value
 926:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
 927:RTT/SEGGER_RTT.c **** *
 928:RTT/SEGGER_RTT.c **** *  Notes
 929:RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
 930:RTT/SEGGER_RTT.c **** *    (2) String passed to this function has to be \0 terminated
 931:RTT/SEGGER_RTT.c **** *    (3) \0 termination character is *not* stored in RTT buffer
 932:RTT/SEGGER_RTT.c **** */
 933:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 1168              		.loc 1 933 70 is_stmt 1 view -0
 1169              		.cfi_startproc
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 41


 1170              		@ args = 0, pretend = 0, frame = 0
 1171              		@ frame_needed = 0, uses_anonymous_args = 0
 1172              		.loc 1 933 70 is_stmt 0 view .LVU345
 1173 0000 38B5     		push	{r3, r4, r5, lr}
 1174              	.LCFI10:
 1175              		.cfi_def_cfa_offset 16
 1176              		.cfi_offset 3, -16
 1177              		.cfi_offset 4, -12
 1178              		.cfi_offset 5, -8
 1179              		.cfi_offset 14, -4
 1180 0002 0546     		mov	r5, r0
 1181 0004 0C46     		mov	r4, r1
 934:RTT/SEGGER_RTT.c ****   unsigned Len;
 1182              		.loc 1 934 3 is_stmt 1 view .LVU346
 935:RTT/SEGGER_RTT.c **** 
 936:RTT/SEGGER_RTT.c ****   Len = STRLEN(s);
 1183              		.loc 1 936 3 view .LVU347
 1184              		.loc 1 936 9 is_stmt 0 view .LVU348
 1185 0006 0846     		mov	r0, r1
 1186              	.LVL120:
 1187              		.loc 1 936 9 view .LVU349
 1188 0008 FFF7FEFF 		bl	strlen
 1189              	.LVL121:
 1190              		.loc 1 936 9 view .LVU350
 1191 000c 0246     		mov	r2, r0
 1192              	.LVL122:
 937:RTT/SEGGER_RTT.c ****   return SEGGER_RTT_Write(BufferIndex, s, Len);
 1193              		.loc 1 937 3 is_stmt 1 view .LVU351
 1194              		.loc 1 937 10 is_stmt 0 view .LVU352
 1195 000e 2146     		mov	r1, r4
 1196 0010 2846     		mov	r0, r5
 1197              	.LVL123:
 1198              		.loc 1 937 10 view .LVU353
 1199 0012 FFF7FEFF 		bl	SEGGER_RTT_Write
 1200              	.LVL124:
 938:RTT/SEGGER_RTT.c **** }
 1201              		.loc 1 938 1 view .LVU354
 1202 0016 38BD     		pop	{r3, r4, r5, pc}
 1203              		.loc 1 938 1 view .LVU355
 1204              		.cfi_endproc
 1205              	.LFE10:
 1207              		.section	.text.SEGGER_RTT_PutCharSkipNoLock,"ax",%progbits
 1208              		.align	1
 1209              		.global	SEGGER_RTT_PutCharSkipNoLock
 1210              		.syntax unified
 1211              		.thumb
 1212              		.thumb_func
 1214              	SEGGER_RTT_PutCharSkipNoLock:
 1215              	.LVL125:
 1216              	.LFB11:
 939:RTT/SEGGER_RTT.c **** 
 940:RTT/SEGGER_RTT.c **** /*********************************************************************
 941:RTT/SEGGER_RTT.c **** *
 942:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkipNoLock
 943:RTT/SEGGER_RTT.c **** *
 944:RTT/SEGGER_RTT.c **** *  Function description
 945:RTT/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 42


 946:RTT/SEGGER_RTT.c **** *    SEGGER_RTT_PutCharSkipNoLock does not lock the application and
 947:RTT/SEGGER_RTT.c **** *    skips the byte, if it does not fit into the buffer.
 948:RTT/SEGGER_RTT.c **** *
 949:RTT/SEGGER_RTT.c **** *  Parameters
 950:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 951:RTT/SEGGER_RTT.c **** *    c            Byte to be stored.
 952:RTT/SEGGER_RTT.c **** *
 953:RTT/SEGGER_RTT.c **** *  Return value
 954:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
 955:RTT/SEGGER_RTT.c **** *
 956:RTT/SEGGER_RTT.c **** *  Notes
 957:RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
 958:RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 959:RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 960:RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 961:RTT/SEGGER_RTT.c **** */
 962:RTT/SEGGER_RTT.c **** 
 963:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkipNoLock(unsigned BufferIndex, char c) {
 1217              		.loc 1 963 69 is_stmt 1 view -0
 1218              		.cfi_startproc
 1219              		@ args = 0, pretend = 0, frame = 0
 1220              		@ frame_needed = 0, uses_anonymous_args = 0
 1221              		@ link register save eliminated.
 1222              		.loc 1 963 69 is_stmt 0 view .LVU357
 1223 0000 30B4     		push	{r4, r5}
 1224              	.LCFI11:
 1225              		.cfi_def_cfa_offset 8
 1226              		.cfi_offset 4, -8
 1227              		.cfi_offset 5, -4
 964:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1228              		.loc 1 964 3 is_stmt 1 view .LVU358
 965:RTT/SEGGER_RTT.c ****   unsigned              WrOff;
 1229              		.loc 1 965 3 view .LVU359
 966:RTT/SEGGER_RTT.c ****   unsigned              Status;
 1230              		.loc 1 966 3 view .LVU360
 967:RTT/SEGGER_RTT.c ****   //
 968:RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
 969:RTT/SEGGER_RTT.c ****   //
 970:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 1231              		.loc 1 970 3 view .LVU361
 1232              	.LVL126:
 971:RTT/SEGGER_RTT.c ****   //
 972:RTT/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
 973:RTT/SEGGER_RTT.c ****   //
 974:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1233              		.loc 1 974 3 view .LVU362
 1234              		.loc 1 974 16 is_stmt 0 view .LVU363
 1235 0002 00EB4002 		add	r2, r0, r0, lsl #1
 1236 0006 114B     		ldr	r3, .L79
 1237 0008 03EBC203 		add	r3, r3, r2, lsl #3
 1238 000c 5D6A     		ldr	r5, [r3, #36]
 1239              		.loc 1 974 9 view .LVU364
 1240 000e 6A1C     		adds	r2, r5, #1
 1241              	.LVL127:
 975:RTT/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1242              		.loc 1 975 3 is_stmt 1 view .LVU365
 1243              		.loc 1 975 21 is_stmt 0 view .LVU366
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 43


 1244 0010 1B6A     		ldr	r3, [r3, #32]
 1245              		.loc 1 975 6 view .LVU367
 1246 0012 9342     		cmp	r3, r2
 1247 0014 16D0     		beq	.L78
 1248              	.LVL128:
 1249              	.L73:
 976:RTT/SEGGER_RTT.c ****     WrOff = 0;
 977:RTT/SEGGER_RTT.c ****   }
 978:RTT/SEGGER_RTT.c ****   //
 979:RTT/SEGGER_RTT.c ****   // Output byte if free space is available
 980:RTT/SEGGER_RTT.c ****   //
 981:RTT/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1250              		.loc 1 981 3 is_stmt 1 view .LVU368
 1251              		.loc 1 981 21 is_stmt 0 view .LVU369
 1252 0016 00EB4003 		add	r3, r0, r0, lsl #1
 1253 001a 0C4C     		ldr	r4, .L79
 1254 001c 04EBC303 		add	r3, r4, r3, lsl #3
 1255 0020 9B6A     		ldr	r3, [r3, #40]
 1256              		.loc 1 981 6 view .LVU370
 1257 0022 9342     		cmp	r3, r2
 1258 0024 10D0     		beq	.L76
 982:RTT/SEGGER_RTT.c ****     pRing->pBuffer[pRing->WrOff] = c;
 1259              		.loc 1 982 5 is_stmt 1 view .LVU371
 1260              		.loc 1 982 10 is_stmt 0 view .LVU372
 1261 0026 431C     		adds	r3, r0, #1
 1262 0028 03EB4303 		add	r3, r3, r3, lsl #1
 1263 002c 04EBC303 		add	r3, r4, r3, lsl #3
 1264 0030 5B68     		ldr	r3, [r3, #4]
 1265              		.loc 1 982 34 view .LVU373
 1266 0032 5955     		strb	r1, [r3, r5]
 983:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1267              		.loc 1 983 5 is_stmt 1 view .LVU374
 1268              		.loc 1 983 18 is_stmt 0 view .LVU375
 1269 0034 00EB4000 		add	r0, r0, r0, lsl #1
 1270              	.LVL129:
 1271              		.loc 1 983 18 view .LVU376
 1272 0038 04EBC000 		add	r0, r4, r0, lsl #3
 1273 003c 4262     		str	r2, [r0, #36]
 984:RTT/SEGGER_RTT.c ****     Status = 1;
 1274              		.loc 1 984 5 is_stmt 1 view .LVU377
 1275              	.LVL130:
 1276              		.loc 1 984 12 is_stmt 0 view .LVU378
 1277 003e 0120     		movs	r0, #1
 1278              	.LVL131:
 1279              	.L72:
 985:RTT/SEGGER_RTT.c ****   } else {
 986:RTT/SEGGER_RTT.c ****     Status = 0;
 987:RTT/SEGGER_RTT.c ****   }
 988:RTT/SEGGER_RTT.c ****   //
 989:RTT/SEGGER_RTT.c ****   return Status;
 990:RTT/SEGGER_RTT.c **** }
 1280              		.loc 1 990 1 view .LVU379
 1281 0040 30BC     		pop	{r4, r5}
 1282              	.LCFI12:
 1283              		.cfi_remember_state
 1284              		.cfi_restore 5
 1285              		.cfi_restore 4
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 44


 1286              		.cfi_def_cfa_offset 0
 1287 0042 7047     		bx	lr
 1288              	.LVL132:
 1289              	.L78:
 1290              	.LCFI13:
 1291              		.cfi_restore_state
 976:RTT/SEGGER_RTT.c ****   }
 1292              		.loc 1 976 11 view .LVU380
 1293 0044 0022     		movs	r2, #0
 1294              	.LVL133:
 976:RTT/SEGGER_RTT.c ****   }
 1295              		.loc 1 976 11 view .LVU381
 1296 0046 E6E7     		b	.L73
 1297              	.LVL134:
 1298              	.L76:
 986:RTT/SEGGER_RTT.c ****   }
 1299              		.loc 1 986 12 view .LVU382
 1300 0048 0020     		movs	r0, #0
 1301              	.LVL135:
 989:RTT/SEGGER_RTT.c **** }
 1302              		.loc 1 989 3 is_stmt 1 view .LVU383
 989:RTT/SEGGER_RTT.c **** }
 1303              		.loc 1 989 10 is_stmt 0 view .LVU384
 1304 004a F9E7     		b	.L72
 1305              	.L80:
 1306              		.align	2
 1307              	.L79:
 1308 004c 00000000 		.word	.LANCHOR1
 1309              		.cfi_endproc
 1310              	.LFE11:
 1312              		.section	.text.SEGGER_RTT_PutCharSkip,"ax",%progbits
 1313              		.align	1
 1314              		.global	SEGGER_RTT_PutCharSkip
 1315              		.syntax unified
 1316              		.thumb
 1317              		.thumb_func
 1319              	SEGGER_RTT_PutCharSkip:
 1320              	.LVL136:
 1321              	.LFB12:
 991:RTT/SEGGER_RTT.c **** 
 992:RTT/SEGGER_RTT.c **** /*********************************************************************
 993:RTT/SEGGER_RTT.c **** *
 994:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkip
 995:RTT/SEGGER_RTT.c **** *
 996:RTT/SEGGER_RTT.c **** *  Function description
 997:RTT/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
 998:RTT/SEGGER_RTT.c **** *
 999:RTT/SEGGER_RTT.c **** *  Parameters
1000:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1001:RTT/SEGGER_RTT.c **** *    c            Byte to be stored.
1002:RTT/SEGGER_RTT.c **** *
1003:RTT/SEGGER_RTT.c **** *  Return value
1004:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1005:RTT/SEGGER_RTT.c **** *
1006:RTT/SEGGER_RTT.c **** *  Notes
1007:RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1008:RTT/SEGGER_RTT.c **** */
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 45


1009:RTT/SEGGER_RTT.c **** 
1010:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkip(unsigned BufferIndex, char c) {
 1322              		.loc 1 1010 63 is_stmt 1 view -0
 1323              		.cfi_startproc
 1324              		@ args = 0, pretend = 0, frame = 0
 1325              		@ frame_needed = 0, uses_anonymous_args = 0
 1326              		.loc 1 1010 63 is_stmt 0 view .LVU386
 1327 0000 38B5     		push	{r3, r4, r5, lr}
 1328              	.LCFI14:
 1329              		.cfi_def_cfa_offset 16
 1330              		.cfi_offset 3, -16
 1331              		.cfi_offset 4, -12
 1332              		.cfi_offset 5, -8
 1333              		.cfi_offset 14, -4
 1334 0002 0446     		mov	r4, r0
 1335 0004 0D46     		mov	r5, r1
1011:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1336              		.loc 1 1011 3 is_stmt 1 view .LVU387
1012:RTT/SEGGER_RTT.c ****   unsigned              WrOff;
 1337              		.loc 1 1012 3 view .LVU388
1013:RTT/SEGGER_RTT.c ****   unsigned              Status;
 1338              		.loc 1 1013 3 view .LVU389
1014:RTT/SEGGER_RTT.c ****   //
1015:RTT/SEGGER_RTT.c ****   // Prepare
1016:RTT/SEGGER_RTT.c ****   //
1017:RTT/SEGGER_RTT.c ****   INIT();
 1339              		.loc 1 1017 3 view .LVU390
 1340              		.loc 1 1017 3 view .LVU391
 1341 0006 194B     		ldr	r3, .L90
 1342 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1343 000a 3BB3     		cbz	r3, .L88
 1344              	.LVL137:
 1345              	.L82:
 1346              		.loc 1 1017 3 discriminator 3 view .LVU392
 1347              	.LBB4:
1018:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1348              		.loc 1 1018 3 discriminator 3 view .LVU393
 1349              		.loc 1 1018 3 discriminator 3 view .LVU394
 1350              		.syntax unified
 1351              	@ 1018 "RTT/SEGGER_RTT.c" 1
 1352 000c EFF3118C 		mrs   ip, basepri  
 1353 0010 4FF02001 		mov   r1, #32       
 1354 0014 81F31188 		msr   basepri, r1  
 1355              		
 1356              	@ 0 "" 2
 1357              	.LVL138:
 1358              		.loc 1 1018 20 discriminator 3 view .LVU395
1019:RTT/SEGGER_RTT.c ****   //
1020:RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1021:RTT/SEGGER_RTT.c ****   //
1022:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 1359              		.loc 1 1022 3 discriminator 3 view .LVU396
1023:RTT/SEGGER_RTT.c ****   //
1024:RTT/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1025:RTT/SEGGER_RTT.c ****   //
1026:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1360              		.loc 1 1026 3 discriminator 3 view .LVU397
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 46


 1361              		.loc 1 1026 16 is_stmt 0 discriminator 3 view .LVU398
 1362              		.thumb
 1363              		.syntax unified
 1364 0018 04EB4403 		add	r3, r4, r4, lsl #1
 1365 001c 134A     		ldr	r2, .L90
 1366 001e 02EBC303 		add	r3, r2, r3, lsl #3
 1367 0022 586A     		ldr	r0, [r3, #36]
 1368              		.loc 1 1026 9 discriminator 3 view .LVU399
 1369 0024 421C     		adds	r2, r0, #1
 1370              	.LVL139:
1027:RTT/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1371              		.loc 1 1027 3 is_stmt 1 discriminator 3 view .LVU400
 1372              		.loc 1 1027 21 is_stmt 0 discriminator 3 view .LVU401
 1373 0026 1B6A     		ldr	r3, [r3, #32]
 1374              		.loc 1 1027 6 discriminator 3 view .LVU402
 1375 0028 9342     		cmp	r3, r2
 1376 002a 1AD0     		beq	.L89
 1377              	.LVL140:
 1378              	.L83:
1028:RTT/SEGGER_RTT.c ****     WrOff = 0;
1029:RTT/SEGGER_RTT.c ****   }
1030:RTT/SEGGER_RTT.c ****   //
1031:RTT/SEGGER_RTT.c ****   // Output byte if free space is available
1032:RTT/SEGGER_RTT.c ****   //
1033:RTT/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1379              		.loc 1 1033 3 is_stmt 1 view .LVU403
 1380              		.loc 1 1033 21 is_stmt 0 view .LVU404
 1381 002c 04EB4403 		add	r3, r4, r4, lsl #1
 1382 0030 0E49     		ldr	r1, .L90
 1383 0032 01EBC303 		add	r3, r1, r3, lsl #3
 1384 0036 9B6A     		ldr	r3, [r3, #40]
 1385              		.loc 1 1033 6 view .LVU405
 1386 0038 9342     		cmp	r3, r2
 1387 003a 14D0     		beq	.L86
1034:RTT/SEGGER_RTT.c ****     pRing->pBuffer[pRing->WrOff] = c;
 1388              		.loc 1 1034 5 is_stmt 1 view .LVU406
 1389              		.loc 1 1034 10 is_stmt 0 view .LVU407
 1390 003c 631C     		adds	r3, r4, #1
 1391 003e 03EB4303 		add	r3, r3, r3, lsl #1
 1392 0042 01EBC303 		add	r3, r1, r3, lsl #3
 1393 0046 5B68     		ldr	r3, [r3, #4]
 1394              		.loc 1 1034 34 view .LVU408
 1395 0048 1D54     		strb	r5, [r3, r0]
1035:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1396              		.loc 1 1035 5 is_stmt 1 view .LVU409
 1397              		.loc 1 1035 18 is_stmt 0 view .LVU410
 1398 004a 04EB4404 		add	r4, r4, r4, lsl #1
 1399              	.LVL141:
 1400              		.loc 1 1035 18 view .LVU411
 1401 004e 01EBC404 		add	r4, r1, r4, lsl #3
 1402 0052 6262     		str	r2, [r4, #36]
1036:RTT/SEGGER_RTT.c ****     Status = 1;
 1403              		.loc 1 1036 5 is_stmt 1 view .LVU412
 1404              	.LVL142:
 1405              		.loc 1 1036 12 is_stmt 0 view .LVU413
 1406 0054 0120     		movs	r0, #1
 1407              	.LVL143:
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 47


 1408              	.L84:
1037:RTT/SEGGER_RTT.c ****   } else {
1038:RTT/SEGGER_RTT.c ****     Status = 0;
1039:RTT/SEGGER_RTT.c ****   }
1040:RTT/SEGGER_RTT.c ****   //
1041:RTT/SEGGER_RTT.c ****   // Finish up.
1042:RTT/SEGGER_RTT.c ****   //
1043:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1409              		.loc 1 1043 3 is_stmt 1 view .LVU414
 1410              		.syntax unified
 1411              	@ 1043 "RTT/SEGGER_RTT.c" 1
 1412 0056 8CF31188 		msr   basepri, ip  
 1413              		
 1414              	@ 0 "" 2
 1415              		.thumb
 1416              		.syntax unified
 1417              	.LBE4:
 1418              		.loc 1 1043 22 view .LVU415
1044:RTT/SEGGER_RTT.c ****   //
1045:RTT/SEGGER_RTT.c ****   return Status;
 1419              		.loc 1 1045 3 view .LVU416
1046:RTT/SEGGER_RTT.c **** }
 1420              		.loc 1 1046 1 is_stmt 0 view .LVU417
 1421 005a 38BD     		pop	{r3, r4, r5, pc}
 1422              	.LVL144:
 1423              	.L88:
1017:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1424              		.loc 1 1017 3 is_stmt 1 discriminator 1 view .LVU418
 1425 005c FFF7FEFF 		bl	_DoInit
 1426              	.LVL145:
1017:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1427              		.loc 1 1017 3 is_stmt 0 discriminator 1 view .LVU419
 1428 0060 D4E7     		b	.L82
 1429              	.LVL146:
 1430              	.L89:
 1431              	.LBB5:
1028:RTT/SEGGER_RTT.c ****   }
 1432              		.loc 1 1028 11 view .LVU420
 1433 0062 0022     		movs	r2, #0
 1434              	.LVL147:
1028:RTT/SEGGER_RTT.c ****   }
 1435              		.loc 1 1028 11 view .LVU421
 1436 0064 E2E7     		b	.L83
 1437              	.LVL148:
 1438              	.L86:
1038:RTT/SEGGER_RTT.c ****   }
 1439              		.loc 1 1038 12 view .LVU422
 1440 0066 0020     		movs	r0, #0
 1441 0068 F5E7     		b	.L84
 1442              	.L91:
 1443 006a 00BF     		.align	2
 1444              	.L90:
 1445 006c 00000000 		.word	.LANCHOR1
 1446              	.LBE5:
 1447              		.cfi_endproc
 1448              	.LFE12:
 1450              		.section	.text.SEGGER_RTT_PutChar,"ax",%progbits
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 48


 1451              		.align	1
 1452              		.global	SEGGER_RTT_PutChar
 1453              		.syntax unified
 1454              		.thumb
 1455              		.thumb_func
 1457              	SEGGER_RTT_PutChar:
 1458              	.LVL149:
 1459              	.LFB13:
1047:RTT/SEGGER_RTT.c **** 
1048:RTT/SEGGER_RTT.c ****  /*********************************************************************
1049:RTT/SEGGER_RTT.c **** *
1050:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_PutChar
1051:RTT/SEGGER_RTT.c **** *
1052:RTT/SEGGER_RTT.c **** *  Function description
1053:RTT/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1054:RTT/SEGGER_RTT.c **** *
1055:RTT/SEGGER_RTT.c **** *  Parameters
1056:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1057:RTT/SEGGER_RTT.c **** *    c            Byte to be stored.
1058:RTT/SEGGER_RTT.c **** *
1059:RTT/SEGGER_RTT.c **** *  Return value
1060:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1061:RTT/SEGGER_RTT.c **** *
1062:RTT/SEGGER_RTT.c **** *  Notes
1063:RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1064:RTT/SEGGER_RTT.c **** */
1065:RTT/SEGGER_RTT.c **** 
1066:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutChar(unsigned BufferIndex, char c) {
 1460              		.loc 1 1066 59 is_stmt 1 view -0
 1461              		.cfi_startproc
 1462              		@ args = 0, pretend = 0, frame = 0
 1463              		@ frame_needed = 0, uses_anonymous_args = 0
 1464              		.loc 1 1066 59 is_stmt 0 view .LVU424
 1465 0000 38B5     		push	{r3, r4, r5, lr}
 1466              	.LCFI15:
 1467              		.cfi_def_cfa_offset 16
 1468              		.cfi_offset 3, -16
 1469              		.cfi_offset 4, -12
 1470              		.cfi_offset 5, -8
 1471              		.cfi_offset 14, -4
 1472 0002 0446     		mov	r4, r0
 1473 0004 0D46     		mov	r5, r1
1067:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1474              		.loc 1 1067 3 is_stmt 1 view .LVU425
1068:RTT/SEGGER_RTT.c ****   unsigned              WrOff;
 1475              		.loc 1 1068 3 view .LVU426
1069:RTT/SEGGER_RTT.c ****   unsigned              Status;
 1476              		.loc 1 1069 3 view .LVU427
1070:RTT/SEGGER_RTT.c ****   //
1071:RTT/SEGGER_RTT.c ****   // Prepare
1072:RTT/SEGGER_RTT.c ****   //
1073:RTT/SEGGER_RTT.c ****   INIT();
 1477              		.loc 1 1073 3 view .LVU428
 1478              		.loc 1 1073 3 view .LVU429
 1479 0006 214B     		ldr	r3, .L103
 1480 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1481 000a 7BB3     		cbz	r3, .L101
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 49


 1482              	.LVL150:
 1483              	.L93:
 1484              		.loc 1 1073 3 discriminator 3 view .LVU430
 1485              	.LBB6:
1074:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1486              		.loc 1 1074 3 discriminator 3 view .LVU431
 1487              		.loc 1 1074 3 discriminator 3 view .LVU432
 1488              		.syntax unified
 1489              	@ 1074 "RTT/SEGGER_RTT.c" 1
 1490 000c EFF3118C 		mrs   ip, basepri  
 1491 0010 4FF02001 		mov   r1, #32       
 1492 0014 81F31188 		msr   basepri, r1  
 1493              		
 1494              	@ 0 "" 2
 1495              	.LVL151:
 1496              		.loc 1 1074 20 discriminator 3 view .LVU433
1075:RTT/SEGGER_RTT.c ****   //
1076:RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1077:RTT/SEGGER_RTT.c ****   //
1078:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 1497              		.loc 1 1078 3 discriminator 3 view .LVU434
1079:RTT/SEGGER_RTT.c ****   //
1080:RTT/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1081:RTT/SEGGER_RTT.c ****   //
1082:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1498              		.loc 1 1082 3 discriminator 3 view .LVU435
 1499              		.loc 1 1082 16 is_stmt 0 discriminator 3 view .LVU436
 1500              		.thumb
 1501              		.syntax unified
 1502 0018 04EB4403 		add	r3, r4, r4, lsl #1
 1503 001c 1B4A     		ldr	r2, .L103
 1504 001e 02EBC303 		add	r3, r2, r3, lsl #3
 1505 0022 596A     		ldr	r1, [r3, #36]
 1506              		.loc 1 1082 9 discriminator 3 view .LVU437
 1507 0024 481C     		adds	r0, r1, #1
 1508              	.LVL152:
1083:RTT/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1509              		.loc 1 1083 3 is_stmt 1 discriminator 3 view .LVU438
 1510              		.loc 1 1083 21 is_stmt 0 discriminator 3 view .LVU439
 1511 0026 1B6A     		ldr	r3, [r3, #32]
 1512              		.loc 1 1083 6 discriminator 3 view .LVU440
 1513 0028 8342     		cmp	r3, r0
 1514 002a 22D0     		beq	.L102
 1515              	.LVL153:
 1516              	.L94:
1084:RTT/SEGGER_RTT.c ****     WrOff = 0;
1085:RTT/SEGGER_RTT.c ****   }
1086:RTT/SEGGER_RTT.c ****   //
1087:RTT/SEGGER_RTT.c ****   // Wait for free space if mode is set to blocking
1088:RTT/SEGGER_RTT.c ****   //
1089:RTT/SEGGER_RTT.c ****   if (pRing->Flags == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 1517              		.loc 1 1089 3 is_stmt 1 view .LVU441
 1518              		.loc 1 1089 12 is_stmt 0 view .LVU442
 1519 002c 04EB4403 		add	r3, r4, r4, lsl #1
 1520 0030 164A     		ldr	r2, .L103
 1521 0032 02EBC303 		add	r3, r2, r3, lsl #3
 1522 0036 DB6A     		ldr	r3, [r3, #44]
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 50


 1523              		.loc 1 1089 6 view .LVU443
 1524 0038 022B     		cmp	r3, #2
 1525 003a 1CD0     		beq	.L96
 1526              	.L95:
1090:RTT/SEGGER_RTT.c ****     while (WrOff == pRing->RdOff) {
1091:RTT/SEGGER_RTT.c ****       ;
1092:RTT/SEGGER_RTT.c ****     }
1093:RTT/SEGGER_RTT.c ****   }
1094:RTT/SEGGER_RTT.c ****   //
1095:RTT/SEGGER_RTT.c ****   // Output byte if free space is available
1096:RTT/SEGGER_RTT.c ****   //
1097:RTT/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1527              		.loc 1 1097 3 is_stmt 1 view .LVU444
 1528              		.loc 1 1097 21 is_stmt 0 view .LVU445
 1529 003c 04EB4403 		add	r3, r4, r4, lsl #1
 1530 0040 124A     		ldr	r2, .L103
 1531 0042 02EBC303 		add	r3, r2, r3, lsl #3
 1532 0046 9B6A     		ldr	r3, [r3, #40]
 1533              		.loc 1 1097 6 view .LVU446
 1534 0048 8342     		cmp	r3, r0
 1535 004a 1DD0     		beq	.L99
1098:RTT/SEGGER_RTT.c ****     pRing->pBuffer[pRing->WrOff] = c;
 1536              		.loc 1 1098 5 is_stmt 1 view .LVU447
 1537              		.loc 1 1098 10 is_stmt 0 view .LVU448
 1538 004c 631C     		adds	r3, r4, #1
 1539 004e 03EB4303 		add	r3, r3, r3, lsl #1
 1540 0052 02EBC303 		add	r3, r2, r3, lsl #3
 1541 0056 5B68     		ldr	r3, [r3, #4]
 1542              		.loc 1 1098 34 view .LVU449
 1543 0058 5D54     		strb	r5, [r3, r1]
1099:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1544              		.loc 1 1099 5 is_stmt 1 view .LVU450
 1545              		.loc 1 1099 18 is_stmt 0 view .LVU451
 1546 005a 04EB4404 		add	r4, r4, r4, lsl #1
 1547              	.LVL154:
 1548              		.loc 1 1099 18 view .LVU452
 1549 005e 02EBC404 		add	r4, r2, r4, lsl #3
 1550 0062 6062     		str	r0, [r4, #36]
1100:RTT/SEGGER_RTT.c ****     Status = 1;
 1551              		.loc 1 1100 5 is_stmt 1 view .LVU453
 1552              	.LVL155:
 1553              		.loc 1 1100 12 is_stmt 0 view .LVU454
 1554 0064 0120     		movs	r0, #1
 1555              	.LVL156:
 1556              	.L97:
1101:RTT/SEGGER_RTT.c ****   } else {
1102:RTT/SEGGER_RTT.c ****     Status = 0;
1103:RTT/SEGGER_RTT.c ****   }
1104:RTT/SEGGER_RTT.c ****   //
1105:RTT/SEGGER_RTT.c ****   // Finish up.
1106:RTT/SEGGER_RTT.c ****   //
1107:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1557              		.loc 1 1107 3 is_stmt 1 view .LVU455
 1558              		.syntax unified
 1559              	@ 1107 "RTT/SEGGER_RTT.c" 1
 1560 0066 8CF31188 		msr   basepri, ip  
 1561              		
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 51


 1562              	@ 0 "" 2
 1563              		.thumb
 1564              		.syntax unified
 1565              	.LBE6:
 1566              		.loc 1 1107 22 view .LVU456
1108:RTT/SEGGER_RTT.c ****   //
1109:RTT/SEGGER_RTT.c ****   return Status;
 1567              		.loc 1 1109 3 view .LVU457
1110:RTT/SEGGER_RTT.c **** }
 1568              		.loc 1 1110 1 is_stmt 0 view .LVU458
 1569 006a 38BD     		pop	{r3, r4, r5, pc}
 1570              	.LVL157:
 1571              	.L101:
1073:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1572              		.loc 1 1073 3 is_stmt 1 discriminator 1 view .LVU459
 1573 006c FFF7FEFF 		bl	_DoInit
 1574              	.LVL158:
1073:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1575              		.loc 1 1073 3 is_stmt 0 discriminator 1 view .LVU460
 1576 0070 CCE7     		b	.L93
 1577              	.LVL159:
 1578              	.L102:
 1579              	.LBB7:
1084:RTT/SEGGER_RTT.c ****   }
 1580              		.loc 1 1084 11 view .LVU461
 1581 0072 0020     		movs	r0, #0
 1582              	.LVL160:
1084:RTT/SEGGER_RTT.c ****   }
 1583              		.loc 1 1084 11 view .LVU462
 1584 0074 DAE7     		b	.L94
 1585              	.LVL161:
 1586              	.L96:
1091:RTT/SEGGER_RTT.c ****     }
 1587              		.loc 1 1091 7 is_stmt 1 discriminator 1 view .LVU463
1090:RTT/SEGGER_RTT.c ****       ;
 1588              		.loc 1 1090 11 discriminator 1 view .LVU464
1090:RTT/SEGGER_RTT.c ****       ;
 1589              		.loc 1 1090 26 is_stmt 0 discriminator 1 view .LVU465
 1590 0076 04EB4403 		add	r3, r4, r4, lsl #1
 1591 007a 044A     		ldr	r2, .L103
 1592 007c 02EBC303 		add	r3, r2, r3, lsl #3
 1593 0080 9B6A     		ldr	r3, [r3, #40]
1090:RTT/SEGGER_RTT.c ****       ;
 1594              		.loc 1 1090 11 discriminator 1 view .LVU466
 1595 0082 8342     		cmp	r3, r0
 1596 0084 F7D0     		beq	.L96
 1597 0086 D9E7     		b	.L95
 1598              	.L99:
1102:RTT/SEGGER_RTT.c ****   }
 1599              		.loc 1 1102 12 view .LVU467
 1600 0088 0020     		movs	r0, #0
 1601              	.LVL162:
1102:RTT/SEGGER_RTT.c ****   }
 1602              		.loc 1 1102 12 view .LVU468
 1603 008a ECE7     		b	.L97
 1604              	.L104:
 1605              		.align	2
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 52


 1606              	.L103:
 1607 008c 00000000 		.word	.LANCHOR1
 1608              	.LBE7:
 1609              		.cfi_endproc
 1610              	.LFE13:
 1612              		.section	.text.SEGGER_RTT_GetKey,"ax",%progbits
 1613              		.align	1
 1614              		.global	SEGGER_RTT_GetKey
 1615              		.syntax unified
 1616              		.thumb
 1617              		.thumb_func
 1619              	SEGGER_RTT_GetKey:
 1620              	.LFB14:
1111:RTT/SEGGER_RTT.c **** 
1112:RTT/SEGGER_RTT.c **** /*********************************************************************
1113:RTT/SEGGER_RTT.c **** *
1114:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_GetKey
1115:RTT/SEGGER_RTT.c **** *
1116:RTT/SEGGER_RTT.c **** *  Function description
1117:RTT/SEGGER_RTT.c **** *    Reads one character from the SEGGER RTT buffer.
1118:RTT/SEGGER_RTT.c **** *    Host has previously stored data there.
1119:RTT/SEGGER_RTT.c **** *
1120:RTT/SEGGER_RTT.c **** *  Return value
1121:RTT/SEGGER_RTT.c **** *    <  0 -   No character available (buffer empty).
1122:RTT/SEGGER_RTT.c **** *    >= 0 -   Character which has been read. (Possible values: 0 - 255)
1123:RTT/SEGGER_RTT.c **** *
1124:RTT/SEGGER_RTT.c **** *  Notes
1125:RTT/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0.
1126:RTT/SEGGER_RTT.c **** */
1127:RTT/SEGGER_RTT.c **** int SEGGER_RTT_GetKey(void) {
 1621              		.loc 1 1127 29 is_stmt 1 view -0
 1622              		.cfi_startproc
 1623              		@ args = 0, pretend = 0, frame = 8
 1624              		@ frame_needed = 0, uses_anonymous_args = 0
 1625 0000 00B5     		push	{lr}
 1626              	.LCFI16:
 1627              		.cfi_def_cfa_offset 4
 1628              		.cfi_offset 14, -4
 1629 0002 83B0     		sub	sp, sp, #12
 1630              	.LCFI17:
 1631              		.cfi_def_cfa_offset 16
1128:RTT/SEGGER_RTT.c ****   char c;
 1632              		.loc 1 1128 3 view .LVU470
1129:RTT/SEGGER_RTT.c ****   int r;
 1633              		.loc 1 1129 3 view .LVU471
1130:RTT/SEGGER_RTT.c **** 
1131:RTT/SEGGER_RTT.c ****   r = (int)SEGGER_RTT_Read(0u, &c, 1u);
 1634              		.loc 1 1131 3 view .LVU472
 1635              		.loc 1 1131 12 is_stmt 0 view .LVU473
 1636 0004 0122     		movs	r2, #1
 1637 0006 0DF10701 		add	r1, sp, #7
 1638 000a 0020     		movs	r0, #0
 1639 000c FFF7FEFF 		bl	SEGGER_RTT_Read
 1640              	.LVL163:
1132:RTT/SEGGER_RTT.c ****   if (r == 1) {
 1641              		.loc 1 1132 3 is_stmt 1 view .LVU474
 1642              		.loc 1 1132 6 is_stmt 0 view .LVU475
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 53


 1643 0010 0128     		cmp	r0, #1
 1644 0012 04D1     		bne	.L107
1133:RTT/SEGGER_RTT.c ****     r = (int)(unsigned char)c;
 1645              		.loc 1 1133 5 is_stmt 1 view .LVU476
 1646              		.loc 1 1133 9 is_stmt 0 view .LVU477
 1647 0014 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1648              	.LVL164:
 1649              	.L105:
1134:RTT/SEGGER_RTT.c ****   } else {
1135:RTT/SEGGER_RTT.c ****     r = -1;
1136:RTT/SEGGER_RTT.c ****   }
1137:RTT/SEGGER_RTT.c ****   return r;
1138:RTT/SEGGER_RTT.c **** }
 1650              		.loc 1 1138 1 view .LVU478
 1651 0018 03B0     		add	sp, sp, #12
 1652              	.LCFI18:
 1653              		.cfi_remember_state
 1654              		.cfi_def_cfa_offset 4
 1655              		@ sp needed
 1656 001a 5DF804FB 		ldr	pc, [sp], #4
 1657              	.LVL165:
 1658              	.L107:
 1659              	.LCFI19:
 1660              		.cfi_restore_state
1135:RTT/SEGGER_RTT.c ****   }
 1661              		.loc 1 1135 7 view .LVU479
 1662 001e 4FF0FF30 		mov	r0, #-1
 1663              	.LVL166:
1137:RTT/SEGGER_RTT.c **** }
 1664              		.loc 1 1137 3 is_stmt 1 view .LVU480
1137:RTT/SEGGER_RTT.c **** }
 1665              		.loc 1 1137 10 is_stmt 0 view .LVU481
 1666 0022 F9E7     		b	.L105
 1667              		.cfi_endproc
 1668              	.LFE14:
 1670              		.section	.text.SEGGER_RTT_WaitKey,"ax",%progbits
 1671              		.align	1
 1672              		.global	SEGGER_RTT_WaitKey
 1673              		.syntax unified
 1674              		.thumb
 1675              		.thumb_func
 1677              	SEGGER_RTT_WaitKey:
 1678              	.LFB15:
1139:RTT/SEGGER_RTT.c **** 
1140:RTT/SEGGER_RTT.c **** /*********************************************************************
1141:RTT/SEGGER_RTT.c **** *
1142:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WaitKey
1143:RTT/SEGGER_RTT.c **** *
1144:RTT/SEGGER_RTT.c **** *  Function description
1145:RTT/SEGGER_RTT.c **** *    Waits until at least one character is avaible in the SEGGER RTT buffer.
1146:RTT/SEGGER_RTT.c **** *    Once a character is available, it is read and this function returns.
1147:RTT/SEGGER_RTT.c **** *
1148:RTT/SEGGER_RTT.c **** *  Return value
1149:RTT/SEGGER_RTT.c **** *    >=0 -   Character which has been read.
1150:RTT/SEGGER_RTT.c **** *
1151:RTT/SEGGER_RTT.c **** *  Notes
1152:RTT/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 54


1153:RTT/SEGGER_RTT.c **** *    (2) This function is blocking if no character is present in RTT buffer
1154:RTT/SEGGER_RTT.c **** */
1155:RTT/SEGGER_RTT.c **** int SEGGER_RTT_WaitKey(void) {
 1679              		.loc 1 1155 30 is_stmt 1 view -0
 1680              		.cfi_startproc
 1681              		@ args = 0, pretend = 0, frame = 0
 1682              		@ frame_needed = 0, uses_anonymous_args = 0
 1683 0000 08B5     		push	{r3, lr}
 1684              	.LCFI20:
 1685              		.cfi_def_cfa_offset 8
 1686              		.cfi_offset 3, -8
 1687              		.cfi_offset 14, -4
 1688              	.L110:
1156:RTT/SEGGER_RTT.c ****   int r;
 1689              		.loc 1 1156 3 discriminator 1 view .LVU483
1157:RTT/SEGGER_RTT.c **** 
1158:RTT/SEGGER_RTT.c ****   do {
 1690              		.loc 1 1158 3 discriminator 1 view .LVU484
1159:RTT/SEGGER_RTT.c ****     r = SEGGER_RTT_GetKey();
 1691              		.loc 1 1159 5 discriminator 1 view .LVU485
 1692              		.loc 1 1159 9 is_stmt 0 discriminator 1 view .LVU486
 1693 0002 FFF7FEFF 		bl	SEGGER_RTT_GetKey
 1694              	.LVL167:
1160:RTT/SEGGER_RTT.c ****   } while (r < 0);
 1695              		.loc 1 1160 11 is_stmt 1 discriminator 1 view .LVU487
 1696              		.loc 1 1160 3 is_stmt 0 discriminator 1 view .LVU488
 1697 0006 0028     		cmp	r0, #0
 1698              		.loc 1 1160 3 discriminator 1 view .LVU489
 1699 0008 FBDB     		blt	.L110
1161:RTT/SEGGER_RTT.c ****   return r;
 1700              		.loc 1 1161 3 is_stmt 1 view .LVU490
1162:RTT/SEGGER_RTT.c **** }
 1701              		.loc 1 1162 1 is_stmt 0 view .LVU491
 1702 000a 08BD     		pop	{r3, pc}
 1703              		.cfi_endproc
 1704              	.LFE15:
 1706              		.section	.text.SEGGER_RTT_HasKey,"ax",%progbits
 1707              		.align	1
 1708              		.global	SEGGER_RTT_HasKey
 1709              		.syntax unified
 1710              		.thumb
 1711              		.thumb_func
 1713              	SEGGER_RTT_HasKey:
 1714              	.LFB16:
1163:RTT/SEGGER_RTT.c **** 
1164:RTT/SEGGER_RTT.c **** /*********************************************************************
1165:RTT/SEGGER_RTT.c **** *
1166:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_HasKey
1167:RTT/SEGGER_RTT.c **** *
1168:RTT/SEGGER_RTT.c **** *  Function description
1169:RTT/SEGGER_RTT.c **** *    Checks if at least one character for reading is available in the SEGGER RTT buffer.
1170:RTT/SEGGER_RTT.c **** *
1171:RTT/SEGGER_RTT.c **** *  Return value
1172:RTT/SEGGER_RTT.c **** *    == 0 -     No characters are available to read.
1173:RTT/SEGGER_RTT.c **** *    == 1 -     At least one character is available.
1174:RTT/SEGGER_RTT.c **** *
1175:RTT/SEGGER_RTT.c **** *  Notes
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 55


1176:RTT/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1177:RTT/SEGGER_RTT.c **** */
1178:RTT/SEGGER_RTT.c **** int SEGGER_RTT_HasKey(void) {
 1715              		.loc 1 1178 29 is_stmt 1 view -0
 1716              		.cfi_startproc
 1717              		@ args = 0, pretend = 0, frame = 0
 1718              		@ frame_needed = 0, uses_anonymous_args = 0
 1719 0000 08B5     		push	{r3, lr}
 1720              	.LCFI21:
 1721              		.cfi_def_cfa_offset 8
 1722              		.cfi_offset 3, -8
 1723              		.cfi_offset 14, -4
1179:RTT/SEGGER_RTT.c ****   unsigned RdOff;
 1724              		.loc 1 1179 3 view .LVU493
1180:RTT/SEGGER_RTT.c ****   int r;
 1725              		.loc 1 1180 3 view .LVU494
1181:RTT/SEGGER_RTT.c **** 
1182:RTT/SEGGER_RTT.c ****   INIT();
 1726              		.loc 1 1182 3 view .LVU495
 1727              		.loc 1 1182 3 view .LVU496
 1728 0002 074B     		ldr	r3, .L118
 1729 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1730 0006 33B1     		cbz	r3, .L117
 1731              	.L113:
 1732              		.loc 1 1182 3 discriminator 3 view .LVU497
1183:RTT/SEGGER_RTT.c ****   RdOff = _SEGGER_RTT.aDown[0].RdOff;
 1733              		.loc 1 1183 3 discriminator 3 view .LVU498
 1734              		.loc 1 1183 9 is_stmt 0 discriminator 3 view .LVU499
 1735 0008 054B     		ldr	r3, .L118
 1736 000a 1A6F     		ldr	r2, [r3, #112]
 1737              	.LVL168:
1184:RTT/SEGGER_RTT.c ****   if (RdOff != _SEGGER_RTT.aDown[0].WrOff) {
 1738              		.loc 1 1184 3 is_stmt 1 discriminator 3 view .LVU500
 1739              		.loc 1 1184 36 is_stmt 0 discriminator 3 view .LVU501
 1740 000c DB6E     		ldr	r3, [r3, #108]
 1741              		.loc 1 1184 6 discriminator 3 view .LVU502
 1742 000e 9342     		cmp	r3, r2
 1743 0010 04D0     		beq	.L115
1185:RTT/SEGGER_RTT.c ****     r = 1;
 1744              		.loc 1 1185 7 view .LVU503
 1745 0012 0120     		movs	r0, #1
 1746              	.L112:
1186:RTT/SEGGER_RTT.c ****   } else {
1187:RTT/SEGGER_RTT.c ****     r = 0;
1188:RTT/SEGGER_RTT.c ****   }
1189:RTT/SEGGER_RTT.c ****   return r;
1190:RTT/SEGGER_RTT.c **** }
 1747              		.loc 1 1190 1 view .LVU504
 1748 0014 08BD     		pop	{r3, pc}
 1749              	.LVL169:
 1750              	.L117:
1182:RTT/SEGGER_RTT.c ****   RdOff = _SEGGER_RTT.aDown[0].RdOff;
 1751              		.loc 1 1182 3 is_stmt 1 discriminator 1 view .LVU505
 1752 0016 FFF7FEFF 		bl	_DoInit
 1753              	.LVL170:
 1754 001a F5E7     		b	.L113
 1755              	.LVL171:
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 56


 1756              	.L115:
1187:RTT/SEGGER_RTT.c ****   }
 1757              		.loc 1 1187 7 is_stmt 0 view .LVU506
 1758 001c 0020     		movs	r0, #0
 1759              	.LVL172:
1189:RTT/SEGGER_RTT.c **** }
 1760              		.loc 1 1189 3 is_stmt 1 view .LVU507
1189:RTT/SEGGER_RTT.c **** }
 1761              		.loc 1 1189 10 is_stmt 0 view .LVU508
 1762 001e F9E7     		b	.L112
 1763              	.L119:
 1764              		.align	2
 1765              	.L118:
 1766 0020 00000000 		.word	.LANCHOR1
 1767              		.cfi_endproc
 1768              	.LFE16:
 1770              		.section	.text.SEGGER_RTT_HasData,"ax",%progbits
 1771              		.align	1
 1772              		.global	SEGGER_RTT_HasData
 1773              		.syntax unified
 1774              		.thumb
 1775              		.thumb_func
 1777              	SEGGER_RTT_HasData:
 1778              	.LVL173:
 1779              	.LFB17:
1191:RTT/SEGGER_RTT.c **** 
1192:RTT/SEGGER_RTT.c **** /*********************************************************************
1193:RTT/SEGGER_RTT.c **** *
1194:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_HasData
1195:RTT/SEGGER_RTT.c **** *
1196:RTT/SEGGER_RTT.c **** *  Function description
1197:RTT/SEGGER_RTT.c **** *    Check if there is data from the host in the given buffer.
1198:RTT/SEGGER_RTT.c **** *
1199:RTT/SEGGER_RTT.c **** *  Return value:
1200:RTT/SEGGER_RTT.c **** *  ==0:  No data
1201:RTT/SEGGER_RTT.c **** *  !=0:  Data in buffer
1202:RTT/SEGGER_RTT.c **** *
1203:RTT/SEGGER_RTT.c **** */
1204:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasData(unsigned BufferIndex) {
 1780              		.loc 1 1204 51 is_stmt 1 view -0
 1781              		.cfi_startproc
 1782              		@ args = 0, pretend = 0, frame = 0
 1783              		@ frame_needed = 0, uses_anonymous_args = 0
 1784              		@ link register save eliminated.
1205:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 1785              		.loc 1 1205 3 view .LVU510
1206:RTT/SEGGER_RTT.c ****   unsigned                v;
 1786              		.loc 1 1206 3 view .LVU511
1207:RTT/SEGGER_RTT.c **** 
1208:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aDown[BufferIndex];
 1787              		.loc 1 1208 3 view .LVU512
1209:RTT/SEGGER_RTT.c ****   v = pRing->WrOff;
 1788              		.loc 1 1209 3 view .LVU513
 1789              		.loc 1 1209 5 is_stmt 0 view .LVU514
 1790 0000 064B     		ldr	r3, .L121
 1791 0002 00EB4002 		add	r2, r0, r0, lsl #1
 1792 0006 03EBC202 		add	r2, r3, r2, lsl #3
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 57


 1793 000a D26E     		ldr	r2, [r2, #108]
 1794              	.LVL174:
1210:RTT/SEGGER_RTT.c ****   return v - pRing->RdOff;
 1795              		.loc 1 1210 3 is_stmt 1 view .LVU515
 1796              		.loc 1 1210 19 is_stmt 0 view .LVU516
 1797 000c 00EB4000 		add	r0, r0, r0, lsl #1
 1798              	.LVL175:
 1799              		.loc 1 1210 19 view .LVU517
 1800 0010 03EBC000 		add	r0, r3, r0, lsl #3
 1801 0014 006F     		ldr	r0, [r0, #112]
1211:RTT/SEGGER_RTT.c **** }
 1802              		.loc 1 1211 1 view .LVU518
 1803 0016 101A     		subs	r0, r2, r0
 1804 0018 7047     		bx	lr
 1805              	.L122:
 1806 001a 00BF     		.align	2
 1807              	.L121:
 1808 001c 00000000 		.word	.LANCHOR1
 1809              		.cfi_endproc
 1810              	.LFE17:
 1812              		.section	.text.SEGGER_RTT_HasDataUp,"ax",%progbits
 1813              		.align	1
 1814              		.global	SEGGER_RTT_HasDataUp
 1815              		.syntax unified
 1816              		.thumb
 1817              		.thumb_func
 1819              	SEGGER_RTT_HasDataUp:
 1820              	.LVL176:
 1821              	.LFB18:
1212:RTT/SEGGER_RTT.c **** 
1213:RTT/SEGGER_RTT.c **** /*********************************************************************
1214:RTT/SEGGER_RTT.c **** *
1215:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_HasDataUp
1216:RTT/SEGGER_RTT.c **** *
1217:RTT/SEGGER_RTT.c **** *  Function description
1218:RTT/SEGGER_RTT.c **** *    Check if there is data remaining to be sent in the given buffer.
1219:RTT/SEGGER_RTT.c **** *
1220:RTT/SEGGER_RTT.c **** *  Return value:
1221:RTT/SEGGER_RTT.c **** *  ==0:  No data
1222:RTT/SEGGER_RTT.c **** *  !=0:  Data in buffer
1223:RTT/SEGGER_RTT.c **** *
1224:RTT/SEGGER_RTT.c **** */
1225:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
 1822              		.loc 1 1225 53 is_stmt 1 view -0
 1823              		.cfi_startproc
 1824              		@ args = 0, pretend = 0, frame = 0
 1825              		@ frame_needed = 0, uses_anonymous_args = 0
 1826              		@ link register save eliminated.
1226:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1827              		.loc 1 1226 3 view .LVU520
1227:RTT/SEGGER_RTT.c ****   unsigned                v;
 1828              		.loc 1 1227 3 view .LVU521
1228:RTT/SEGGER_RTT.c **** 
1229:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 1829              		.loc 1 1229 3 view .LVU522
1230:RTT/SEGGER_RTT.c ****   v = pRing->RdOff;
 1830              		.loc 1 1230 3 view .LVU523
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 58


 1831              		.loc 1 1230 5 is_stmt 0 view .LVU524
 1832 0000 064B     		ldr	r3, .L124
 1833 0002 00EB4002 		add	r2, r0, r0, lsl #1
 1834 0006 03EBC202 		add	r2, r3, r2, lsl #3
 1835 000a 926A     		ldr	r2, [r2, #40]
 1836              	.LVL177:
1231:RTT/SEGGER_RTT.c ****   return pRing->WrOff - v;
 1837              		.loc 1 1231 3 is_stmt 1 view .LVU525
 1838              		.loc 1 1231 15 is_stmt 0 view .LVU526
 1839 000c 00EB4000 		add	r0, r0, r0, lsl #1
 1840              	.LVL178:
 1841              		.loc 1 1231 15 view .LVU527
 1842 0010 03EBC000 		add	r0, r3, r0, lsl #3
 1843 0014 406A     		ldr	r0, [r0, #36]
1232:RTT/SEGGER_RTT.c **** }
 1844              		.loc 1 1232 1 view .LVU528
 1845 0016 801A     		subs	r0, r0, r2
 1846 0018 7047     		bx	lr
 1847              	.L125:
 1848 001a 00BF     		.align	2
 1849              	.L124:
 1850 001c 00000000 		.word	.LANCHOR1
 1851              		.cfi_endproc
 1852              	.LFE18:
 1854              		.section	.text.SEGGER_RTT_AllocDownBuffer,"ax",%progbits
 1855              		.align	1
 1856              		.global	SEGGER_RTT_AllocDownBuffer
 1857              		.syntax unified
 1858              		.thumb
 1859              		.thumb_func
 1861              	SEGGER_RTT_AllocDownBuffer:
 1862              	.LVL179:
 1863              	.LFB19:
1233:RTT/SEGGER_RTT.c **** 
1234:RTT/SEGGER_RTT.c **** /*********************************************************************
1235:RTT/SEGGER_RTT.c **** *
1236:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_AllocDownBuffer
1237:RTT/SEGGER_RTT.c **** *
1238:RTT/SEGGER_RTT.c **** *  Function description
1239:RTT/SEGGER_RTT.c **** *    Run-time configuration of the next down-buffer (H->T).
1240:RTT/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1241:RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1242:RTT/SEGGER_RTT.c **** *
1243:RTT/SEGGER_RTT.c **** *  Parameters
1244:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1245:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1246:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1247:RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1248:RTT/SEGGER_RTT.c **** *
1249:RTT/SEGGER_RTT.c **** *  Return value
1250:RTT/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1251:RTT/SEGGER_RTT.c **** *     < 0 - Error
1252:RTT/SEGGER_RTT.c **** */
1253:RTT/SEGGER_RTT.c **** int SEGGER_RTT_AllocDownBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flag
 1864              		.loc 1 1253 103 is_stmt 1 view -0
 1865              		.cfi_startproc
 1866              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 59


 1867              		@ frame_needed = 0, uses_anonymous_args = 0
 1868              		.loc 1 1253 103 is_stmt 0 view .LVU530
 1869 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1870              	.LCFI22:
 1871              		.cfi_def_cfa_offset 24
 1872              		.cfi_offset 4, -24
 1873              		.cfi_offset 5, -20
 1874              		.cfi_offset 6, -16
 1875              		.cfi_offset 7, -12
 1876              		.cfi_offset 8, -8
 1877              		.cfi_offset 14, -4
 1878 0004 8046     		mov	r8, r0
 1879 0006 0F46     		mov	r7, r1
 1880 0008 1646     		mov	r6, r2
 1881 000a 1D46     		mov	r5, r3
1254:RTT/SEGGER_RTT.c ****   int BufferIndex;
 1882              		.loc 1 1254 3 is_stmt 1 view .LVU531
1255:RTT/SEGGER_RTT.c **** 
1256:RTT/SEGGER_RTT.c ****   INIT();
 1883              		.loc 1 1256 3 view .LVU532
 1884              		.loc 1 1256 3 view .LVU533
 1885 000c 184B     		ldr	r3, .L134
 1886              	.LVL180:
 1887              		.loc 1 1256 3 is_stmt 0 view .LVU534
 1888 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1889 0010 3BB3     		cbz	r3, .L133
 1890              	.LVL181:
 1891              	.L127:
 1892              		.loc 1 1256 3 is_stmt 1 discriminator 3 view .LVU535
 1893              	.LBB8:
1257:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1894              		.loc 1 1257 3 discriminator 3 view .LVU536
 1895              		.loc 1 1257 3 discriminator 3 view .LVU537
 1896              		.syntax unified
 1897              	@ 1257 "RTT/SEGGER_RTT.c" 1
 1898 0012 EFF31182 		mrs   r2, basepri  
 1899 0016 4FF02001 		mov   r1, #32       
 1900 001a 81F31188 		msr   basepri, r1  
 1901              		
 1902              	@ 0 "" 2
 1903              	.LVL182:
 1904              		.loc 1 1257 20 discriminator 3 view .LVU538
1258:RTT/SEGGER_RTT.c ****   BufferIndex = 0;
 1905              		.loc 1 1258 3 discriminator 3 view .LVU539
 1906              		.loc 1 1258 15 is_stmt 0 discriminator 3 view .LVU540
 1907              		.thumb
 1908              		.syntax unified
 1909 001e 0020     		movs	r0, #0
 1910              	.LVL183:
 1911              	.L129:
1259:RTT/SEGGER_RTT.c ****   do {
 1912              		.loc 1 1259 3 is_stmt 1 view .LVU541
1260:RTT/SEGGER_RTT.c ****     if (_SEGGER_RTT.aDown[BufferIndex].pBuffer == NULL) {
 1913              		.loc 1 1260 5 view .LVU542
 1914              		.loc 1 1260 39 is_stmt 0 view .LVU543
 1915 0020 00EB400C 		add	ip, r0, r0, lsl #1
 1916 0024 124C     		ldr	r4, .L134
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 60


 1917 0026 04EBCC0C 		add	ip, r4, ip, lsl #3
 1918 002a DCF86430 		ldr	r3, [ip, #100]
 1919              		.loc 1 1260 8 view .LVU544
 1920 002e 1BB1     		cbz	r3, .L128
1261:RTT/SEGGER_RTT.c ****       break;
1262:RTT/SEGGER_RTT.c ****     }
1263:RTT/SEGGER_RTT.c ****     BufferIndex++;
 1921              		.loc 1 1263 5 is_stmt 1 view .LVU545
 1922              		.loc 1 1263 16 is_stmt 0 view .LVU546
 1923 0030 0130     		adds	r0, r0, #1
 1924              	.LVL184:
1264:RTT/SEGGER_RTT.c ****   } while (BufferIndex < _SEGGER_RTT.MaxNumDownBuffers);
 1925              		.loc 1 1264 11 is_stmt 1 view .LVU547
 1926              		.loc 1 1264 37 is_stmt 0 view .LVU548
 1927 0032 6369     		ldr	r3, [r4, #20]
 1928              		.loc 1 1264 3 view .LVU549
 1929 0034 8342     		cmp	r3, r0
 1930 0036 F3DC     		bgt	.L129
 1931              	.L128:
1265:RTT/SEGGER_RTT.c ****   if (BufferIndex < _SEGGER_RTT.MaxNumDownBuffers) {
 1932              		.loc 1 1265 3 is_stmt 1 view .LVU550
 1933              		.loc 1 1265 32 is_stmt 0 view .LVU551
 1934 0038 0D4B     		ldr	r3, .L134
 1935 003a 5B69     		ldr	r3, [r3, #20]
 1936              		.loc 1 1265 6 view .LVU552
 1937 003c 8342     		cmp	r3, r0
 1938 003e 13DD     		ble	.L131
1266:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 1939              		.loc 1 1266 5 is_stmt 1 view .LVU553
 1940              		.loc 1 1266 49 is_stmt 0 view .LVU554
 1941 0040 00EB4003 		add	r3, r0, r0, lsl #1
 1942 0044 0A49     		ldr	r1, .L134
 1943 0046 01EBC303 		add	r3, r1, r3, lsl #3
 1944 004a C3F86080 		str	r8, [r3, #96]
1267:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 1945              		.loc 1 1267 5 is_stmt 1 view .LVU555
 1946              		.loc 1 1267 49 is_stmt 0 view .LVU556
 1947 004e 5F66     		str	r7, [r3, #100]
1268:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 1948              		.loc 1 1268 5 is_stmt 1 view .LVU557
 1949              		.loc 1 1268 49 is_stmt 0 view .LVU558
 1950 0050 9E66     		str	r6, [r3, #104]
1269:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 1951              		.loc 1 1269 5 is_stmt 1 view .LVU559
 1952              		.loc 1 1269 49 is_stmt 0 view .LVU560
 1953 0052 0021     		movs	r1, #0
 1954 0054 1967     		str	r1, [r3, #112]
1270:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 1955              		.loc 1 1270 5 is_stmt 1 view .LVU561
 1956              		.loc 1 1270 49 is_stmt 0 view .LVU562
 1957 0056 D966     		str	r1, [r3, #108]
1271:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].Flags        = Flags;
 1958              		.loc 1 1271 5 is_stmt 1 view .LVU563
 1959              		.loc 1 1271 49 is_stmt 0 view .LVU564
 1960 0058 5D67     		str	r5, [r3, #116]
 1961              	.LVL185:
 1962              	.L130:
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 61


1272:RTT/SEGGER_RTT.c ****   } else {
1273:RTT/SEGGER_RTT.c ****     BufferIndex = -1;
1274:RTT/SEGGER_RTT.c ****   }
1275:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1963              		.loc 1 1275 3 is_stmt 1 view .LVU565
 1964              		.syntax unified
 1965              	@ 1275 "RTT/SEGGER_RTT.c" 1
 1966 005a 82F31188 		msr   basepri, r2  
 1967              		
 1968              	@ 0 "" 2
 1969              		.thumb
 1970              		.syntax unified
 1971              	.LBE8:
 1972              		.loc 1 1275 22 view .LVU566
1276:RTT/SEGGER_RTT.c ****   return BufferIndex;
 1973              		.loc 1 1276 3 view .LVU567
1277:RTT/SEGGER_RTT.c **** }
 1974              		.loc 1 1277 1 is_stmt 0 view .LVU568
 1975 005e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1976              	.LVL186:
 1977              	.L133:
1256:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1978              		.loc 1 1256 3 is_stmt 1 discriminator 1 view .LVU569
 1979 0062 FFF7FEFF 		bl	_DoInit
 1980              	.LVL187:
1256:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1981              		.loc 1 1256 3 is_stmt 0 discriminator 1 view .LVU570
 1982 0066 D4E7     		b	.L127
 1983              	.LVL188:
 1984              	.L131:
 1985              	.LBB9:
1273:RTT/SEGGER_RTT.c ****   }
 1986              		.loc 1 1273 17 view .LVU571
 1987 0068 4FF0FF30 		mov	r0, #-1
 1988              	.LVL189:
1273:RTT/SEGGER_RTT.c ****   }
 1989              		.loc 1 1273 17 view .LVU572
 1990 006c F5E7     		b	.L130
 1991              	.L135:
 1992 006e 00BF     		.align	2
 1993              	.L134:
 1994 0070 00000000 		.word	.LANCHOR1
 1995              	.LBE9:
 1996              		.cfi_endproc
 1997              	.LFE19:
 1999              		.section	.text.SEGGER_RTT_AllocUpBuffer,"ax",%progbits
 2000              		.align	1
 2001              		.global	SEGGER_RTT_AllocUpBuffer
 2002              		.syntax unified
 2003              		.thumb
 2004              		.thumb_func
 2006              	SEGGER_RTT_AllocUpBuffer:
 2007              	.LVL190:
 2008              	.LFB20:
1278:RTT/SEGGER_RTT.c **** 
1279:RTT/SEGGER_RTT.c **** /*********************************************************************
1280:RTT/SEGGER_RTT.c **** *
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 62


1281:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_AllocUpBuffer
1282:RTT/SEGGER_RTT.c **** *
1283:RTT/SEGGER_RTT.c **** *  Function description
1284:RTT/SEGGER_RTT.c **** *    Run-time configuration of the next up-buffer (T->H).
1285:RTT/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1286:RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1287:RTT/SEGGER_RTT.c **** *
1288:RTT/SEGGER_RTT.c **** *  Parameters
1289:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1290:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1291:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1292:RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1293:RTT/SEGGER_RTT.c **** *
1294:RTT/SEGGER_RTT.c **** *  Return value
1295:RTT/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1296:RTT/SEGGER_RTT.c **** *     < 0 - Error
1297:RTT/SEGGER_RTT.c **** */
1298:RTT/SEGGER_RTT.c **** int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags)
 2009              		.loc 1 1298 101 is_stmt 1 view -0
 2010              		.cfi_startproc
 2011              		@ args = 0, pretend = 0, frame = 0
 2012              		@ frame_needed = 0, uses_anonymous_args = 0
 2013              		.loc 1 1298 101 is_stmt 0 view .LVU574
 2014 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2015              	.LCFI23:
 2016              		.cfi_def_cfa_offset 24
 2017              		.cfi_offset 3, -24
 2018              		.cfi_offset 4, -20
 2019              		.cfi_offset 5, -16
 2020              		.cfi_offset 6, -12
 2021              		.cfi_offset 7, -8
 2022              		.cfi_offset 14, -4
 2023 0002 0746     		mov	r7, r0
 2024 0004 0E46     		mov	r6, r1
 2025 0006 1546     		mov	r5, r2
 2026 0008 1C46     		mov	r4, r3
1299:RTT/SEGGER_RTT.c ****   int BufferIndex;
 2027              		.loc 1 1299 3 is_stmt 1 view .LVU575
1300:RTT/SEGGER_RTT.c **** 
1301:RTT/SEGGER_RTT.c ****   INIT();
 2028              		.loc 1 1301 3 view .LVU576
 2029              		.loc 1 1301 3 view .LVU577
 2030 000a 1C4B     		ldr	r3, .L144
 2031              	.LVL191:
 2032              		.loc 1 1301 3 is_stmt 0 view .LVU578
 2033 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2034 000e 73B3     		cbz	r3, .L143
 2035              	.LVL192:
 2036              	.L137:
 2037              		.loc 1 1301 3 is_stmt 1 discriminator 3 view .LVU579
 2038              	.LBB10:
1302:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2039              		.loc 1 1302 3 discriminator 3 view .LVU580
 2040              		.loc 1 1302 3 discriminator 3 view .LVU581
 2041              		.syntax unified
 2042              	@ 1302 "RTT/SEGGER_RTT.c" 1
 2043 0010 EFF31182 		mrs   r2, basepri  
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 63


 2044 0014 4FF02001 		mov   r1, #32       
 2045 0018 81F31188 		msr   basepri, r1  
 2046              		
 2047              	@ 0 "" 2
 2048              	.LVL193:
 2049              		.loc 1 1302 20 discriminator 3 view .LVU582
1303:RTT/SEGGER_RTT.c ****   BufferIndex = 0;
 2050              		.loc 1 1303 3 discriminator 3 view .LVU583
 2051              		.loc 1 1303 15 is_stmt 0 discriminator 3 view .LVU584
 2052              		.thumb
 2053              		.syntax unified
 2054 001c 0020     		movs	r0, #0
 2055              	.LVL194:
 2056              	.L139:
1304:RTT/SEGGER_RTT.c ****   do {
 2057              		.loc 1 1304 3 is_stmt 1 view .LVU585
1305:RTT/SEGGER_RTT.c ****     if (_SEGGER_RTT.aUp[BufferIndex].pBuffer == NULL) {
 2058              		.loc 1 1305 5 view .LVU586
 2059              		.loc 1 1305 37 is_stmt 0 view .LVU587
 2060 001e 00F1010C 		add	ip, r0, #1
 2061 0022 0CEB4C0C 		add	ip, ip, ip, lsl #1
 2062 0026 154B     		ldr	r3, .L144
 2063 0028 03EBCC0C 		add	ip, r3, ip, lsl #3
 2064 002c DCF80430 		ldr	r3, [ip, #4]
 2065              		.loc 1 1305 8 view .LVU588
 2066 0030 23B1     		cbz	r3, .L138
1306:RTT/SEGGER_RTT.c ****       break;
1307:RTT/SEGGER_RTT.c ****     }
1308:RTT/SEGGER_RTT.c ****     BufferIndex++;
 2067              		.loc 1 1308 5 is_stmt 1 view .LVU589
 2068              		.loc 1 1308 16 is_stmt 0 view .LVU590
 2069 0032 0130     		adds	r0, r0, #1
 2070              	.LVL195:
1309:RTT/SEGGER_RTT.c ****   } while (BufferIndex < _SEGGER_RTT.MaxNumUpBuffers);
 2071              		.loc 1 1309 11 is_stmt 1 view .LVU591
 2072              		.loc 1 1309 37 is_stmt 0 view .LVU592
 2073 0034 114B     		ldr	r3, .L144
 2074 0036 1B69     		ldr	r3, [r3, #16]
 2075              		.loc 1 1309 3 view .LVU593
 2076 0038 8342     		cmp	r3, r0
 2077 003a F0DC     		bgt	.L139
 2078              	.L138:
1310:RTT/SEGGER_RTT.c ****   if (BufferIndex < _SEGGER_RTT.MaxNumUpBuffers) {
 2079              		.loc 1 1310 3 is_stmt 1 view .LVU594
 2080              		.loc 1 1310 32 is_stmt 0 view .LVU595
 2081 003c 0F4B     		ldr	r3, .L144
 2082 003e 1B69     		ldr	r3, [r3, #16]
 2083              		.loc 1 1310 6 view .LVU596
 2084 0040 8342     		cmp	r3, r0
 2085 0042 17DD     		ble	.L141
1311:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 2086              		.loc 1 1311 5 is_stmt 1 view .LVU597
 2087              		.loc 1 1311 47 is_stmt 0 view .LVU598
 2088 0044 0D4B     		ldr	r3, .L144
 2089 0046 411C     		adds	r1, r0, #1
 2090 0048 01EB410C 		add	ip, r1, r1, lsl #1
 2091 004c 43F83C70 		str	r7, [r3, ip, lsl #3]
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 64


1312:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 2092              		.loc 1 1312 5 is_stmt 1 view .LVU599
 2093              		.loc 1 1312 47 is_stmt 0 view .LVU600
 2094 0050 03EBCC01 		add	r1, r3, ip, lsl #3
 2095 0054 4E60     		str	r6, [r1, #4]
1313:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 2096              		.loc 1 1313 5 is_stmt 1 view .LVU601
 2097              		.loc 1 1313 47 is_stmt 0 view .LVU602
 2098 0056 00EB4001 		add	r1, r0, r0, lsl #1
 2099 005a 03EBC103 		add	r3, r3, r1, lsl #3
 2100 005e 1D62     		str	r5, [r3, #32]
1314:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 2101              		.loc 1 1314 5 is_stmt 1 view .LVU603
 2102              		.loc 1 1314 47 is_stmt 0 view .LVU604
 2103 0060 0021     		movs	r1, #0
 2104 0062 9962     		str	r1, [r3, #40]
1315:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 2105              		.loc 1 1315 5 is_stmt 1 view .LVU605
 2106              		.loc 1 1315 47 is_stmt 0 view .LVU606
 2107 0064 5962     		str	r1, [r3, #36]
1316:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].Flags        = Flags;
 2108              		.loc 1 1316 5 is_stmt 1 view .LVU607
 2109              		.loc 1 1316 47 is_stmt 0 view .LVU608
 2110 0066 DC62     		str	r4, [r3, #44]
 2111              	.LVL196:
 2112              	.L140:
1317:RTT/SEGGER_RTT.c ****   } else {
1318:RTT/SEGGER_RTT.c ****     BufferIndex = -1;
1319:RTT/SEGGER_RTT.c ****   }
1320:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2113              		.loc 1 1320 3 is_stmt 1 view .LVU609
 2114              		.syntax unified
 2115              	@ 1320 "RTT/SEGGER_RTT.c" 1
 2116 0068 82F31188 		msr   basepri, r2  
 2117              		
 2118              	@ 0 "" 2
 2119              		.thumb
 2120              		.syntax unified
 2121              	.LBE10:
 2122              		.loc 1 1320 22 view .LVU610
1321:RTT/SEGGER_RTT.c ****   return BufferIndex;
 2123              		.loc 1 1321 3 view .LVU611
1322:RTT/SEGGER_RTT.c **** }
 2124              		.loc 1 1322 1 is_stmt 0 view .LVU612
 2125 006c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2126              	.LVL197:
 2127              	.L143:
1301:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2128              		.loc 1 1301 3 is_stmt 1 discriminator 1 view .LVU613
 2129 006e FFF7FEFF 		bl	_DoInit
 2130              	.LVL198:
1301:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2131              		.loc 1 1301 3 is_stmt 0 discriminator 1 view .LVU614
 2132 0072 CDE7     		b	.L137
 2133              	.LVL199:
 2134              	.L141:
 2135              	.LBB11:
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 65


1318:RTT/SEGGER_RTT.c ****   }
 2136              		.loc 1 1318 17 view .LVU615
 2137 0074 4FF0FF30 		mov	r0, #-1
 2138              	.LVL200:
1318:RTT/SEGGER_RTT.c ****   }
 2139              		.loc 1 1318 17 view .LVU616
 2140 0078 F6E7     		b	.L140
 2141              	.L145:
 2142 007a 00BF     		.align	2
 2143              	.L144:
 2144 007c 00000000 		.word	.LANCHOR1
 2145              	.LBE11:
 2146              		.cfi_endproc
 2147              	.LFE20:
 2149              		.section	.text.SEGGER_RTT_ConfigUpBuffer,"ax",%progbits
 2150              		.align	1
 2151              		.global	SEGGER_RTT_ConfigUpBuffer
 2152              		.syntax unified
 2153              		.thumb
 2154              		.thumb_func
 2156              	SEGGER_RTT_ConfigUpBuffer:
 2157              	.LVL201:
 2158              	.LFB21:
1323:RTT/SEGGER_RTT.c **** 
1324:RTT/SEGGER_RTT.c **** /*********************************************************************
1325:RTT/SEGGER_RTT.c **** *
1326:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigUpBuffer
1327:RTT/SEGGER_RTT.c **** *
1328:RTT/SEGGER_RTT.c **** *  Function description
1329:RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer (T->H).
1330:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1331:RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1332:RTT/SEGGER_RTT.c **** *
1333:RTT/SEGGER_RTT.c **** *  Parameters
1334:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1335:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1336:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1337:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1338:RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1339:RTT/SEGGER_RTT.c **** *
1340:RTT/SEGGER_RTT.c **** *  Return value
1341:RTT/SEGGER_RTT.c **** *    >= 0 - O.K.
1342:RTT/SEGGER_RTT.c **** *     < 0 - Error
1343:RTT/SEGGER_RTT.c **** *
1344:RTT/SEGGER_RTT.c **** *  Additional information
1345:RTT/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1346:RTT/SEGGER_RTT.c **** *    May only be called once per buffer.
1347:RTT/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1348:RTT/SEGGER_RTT.c **** */
1349:RTT/SEGGER_RTT.c **** int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Buff
 2159              		.loc 1 1349 124 is_stmt 1 view -0
 2160              		.cfi_startproc
 2161              		@ args = 4, pretend = 0, frame = 0
 2162              		@ frame_needed = 0, uses_anonymous_args = 0
 2163              		.loc 1 1349 124 is_stmt 0 view .LVU618
 2164 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2165              	.LCFI24:
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 66


 2166              		.cfi_def_cfa_offset 24
 2167              		.cfi_offset 4, -24
 2168              		.cfi_offset 5, -20
 2169              		.cfi_offset 6, -16
 2170              		.cfi_offset 7, -12
 2171              		.cfi_offset 8, -8
 2172              		.cfi_offset 14, -4
 2173 0004 0446     		mov	r4, r0
 2174 0006 8846     		mov	r8, r1
 2175 0008 1746     		mov	r7, r2
 2176 000a 1E46     		mov	r6, r3
1350:RTT/SEGGER_RTT.c ****   int r;
 2177              		.loc 1 1350 3 is_stmt 1 view .LVU619
1351:RTT/SEGGER_RTT.c **** 
1352:RTT/SEGGER_RTT.c ****   INIT();
 2178              		.loc 1 1352 3 view .LVU620
 2179              		.loc 1 1352 3 view .LVU621
 2180 000c 184B     		ldr	r3, .L153
 2181              	.LVL202:
 2182              		.loc 1 1352 3 is_stmt 0 view .LVU622
 2183 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2184 0010 3BB3     		cbz	r3, .L152
 2185              	.LVL203:
 2186              	.L147:
 2187              		.loc 1 1352 3 is_stmt 1 discriminator 3 view .LVU623
1353:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2188              		.loc 1 1353 3 discriminator 3 view .LVU624
 2189              		.loc 1 1353 42 is_stmt 0 discriminator 3 view .LVU625
 2190 0012 174B     		ldr	r3, .L153
 2191 0014 1B69     		ldr	r3, [r3, #16]
 2192              		.loc 1 1353 6 discriminator 3 view .LVU626
 2193 0016 A342     		cmp	r3, r4
 2194 0018 26D9     		bls	.L150
 2195              	.LBB12:
1354:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2196              		.loc 1 1354 5 is_stmt 1 view .LVU627
 2197              		.loc 1 1354 5 view .LVU628
 2198              		.syntax unified
 2199              	@ 1354 "RTT/SEGGER_RTT.c" 1
 2200 001a EFF31183 		mrs   r3, basepri  
 2201 001e 4FF02001 		mov   r1, #32       
 2202 0022 81F31188 		msr   basepri, r1  
 2203              		
 2204              	@ 0 "" 2
 2205              	.LVL204:
 2206              		.loc 1 1354 22 view .LVU629
1355:RTT/SEGGER_RTT.c ****     if (BufferIndex > 0u) {
 2207              		.loc 1 1355 5 view .LVU630
 2208              		.loc 1 1355 8 is_stmt 0 view .LVU631
 2209              		.thumb
 2210              		.syntax unified
 2211 0026 84B1     		cbz	r4, .L149
1356:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 2212              		.loc 1 1356 7 is_stmt 1 view .LVU632
 2213              		.loc 1 1356 49 is_stmt 0 view .LVU633
 2214 0028 114D     		ldr	r5, .L153
 2215 002a 601C     		adds	r0, r4, #1
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 67


 2216 002c 00EB4002 		add	r2, r0, r0, lsl #1
 2217 0030 45F83280 		str	r8, [r5, r2, lsl #3]
1357:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 2218              		.loc 1 1357 7 is_stmt 1 view .LVU634
 2219              		.loc 1 1357 49 is_stmt 0 view .LVU635
 2220 0034 05EBC200 		add	r0, r5, r2, lsl #3
 2221 0038 4760     		str	r7, [r0, #4]
1358:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 2222              		.loc 1 1358 7 is_stmt 1 view .LVU636
 2223              		.loc 1 1358 49 is_stmt 0 view .LVU637
 2224 003a 04EB4402 		add	r2, r4, r4, lsl #1
 2225 003e 05EBC202 		add	r2, r5, r2, lsl #3
 2226 0042 1662     		str	r6, [r2, #32]
1359:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 2227              		.loc 1 1359 7 is_stmt 1 view .LVU638
 2228              		.loc 1 1359 49 is_stmt 0 view .LVU639
 2229 0044 0021     		movs	r1, #0
 2230 0046 9162     		str	r1, [r2, #40]
1360:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 2231              		.loc 1 1360 7 is_stmt 1 view .LVU640
 2232              		.loc 1 1360 49 is_stmt 0 view .LVU641
 2233 0048 5162     		str	r1, [r2, #36]
 2234              	.L149:
1361:RTT/SEGGER_RTT.c ****     }
1362:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 2235              		.loc 1 1362 5 is_stmt 1 view .LVU642
 2236              		.loc 1 1362 49 is_stmt 0 view .LVU643
 2237 004a 04EB4404 		add	r4, r4, r4, lsl #1
 2238              	.LVL205:
 2239              		.loc 1 1362 49 view .LVU644
 2240 004e 0848     		ldr	r0, .L153
 2241 0050 00EBC404 		add	r4, r0, r4, lsl #3
 2242 0054 069A     		ldr	r2, [sp, #24]
 2243 0056 E262     		str	r2, [r4, #44]
1363:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2244              		.loc 1 1363 5 is_stmt 1 view .LVU645
 2245              		.syntax unified
 2246              	@ 1363 "RTT/SEGGER_RTT.c" 1
 2247 0058 83F31188 		msr   basepri, r3  
 2248              		
 2249              	@ 0 "" 2
 2250              		.thumb
 2251              		.syntax unified
 2252              	.LBE12:
 2253              		.loc 1 1363 24 view .LVU646
1364:RTT/SEGGER_RTT.c ****     r =  0;
 2254              		.loc 1 1364 5 view .LVU647
 2255              	.LVL206:
 2256              		.loc 1 1364 7 is_stmt 0 view .LVU648
 2257 005c 0020     		movs	r0, #0
 2258              	.LVL207:
 2259              	.L146:
1365:RTT/SEGGER_RTT.c ****   } else {
1366:RTT/SEGGER_RTT.c ****     r = -1;
1367:RTT/SEGGER_RTT.c ****   }
1368:RTT/SEGGER_RTT.c ****   return r;
1369:RTT/SEGGER_RTT.c **** }
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 68


 2260              		.loc 1 1369 1 view .LVU649
 2261 005e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2262              	.LVL208:
 2263              	.L152:
1352:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2264              		.loc 1 1352 3 is_stmt 1 discriminator 1 view .LVU650
 2265 0062 FFF7FEFF 		bl	_DoInit
 2266              	.LVL209:
1352:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2267              		.loc 1 1352 3 is_stmt 0 discriminator 1 view .LVU651
 2268 0066 D4E7     		b	.L147
 2269              	.L150:
1366:RTT/SEGGER_RTT.c ****   }
 2270              		.loc 1 1366 7 view .LVU652
 2271 0068 4FF0FF30 		mov	r0, #-1
 2272              	.LVL210:
1368:RTT/SEGGER_RTT.c **** }
 2273              		.loc 1 1368 3 is_stmt 1 view .LVU653
1368:RTT/SEGGER_RTT.c **** }
 2274              		.loc 1 1368 10 is_stmt 0 view .LVU654
 2275 006c F7E7     		b	.L146
 2276              	.L154:
 2277 006e 00BF     		.align	2
 2278              	.L153:
 2279 0070 00000000 		.word	.LANCHOR1
 2280              		.cfi_endproc
 2281              	.LFE21:
 2283              		.section	.text.SEGGER_RTT_ConfigDownBuffer,"ax",%progbits
 2284              		.align	1
 2285              		.global	SEGGER_RTT_ConfigDownBuffer
 2286              		.syntax unified
 2287              		.thumb
 2288              		.thumb_func
 2290              	SEGGER_RTT_ConfigDownBuffer:
 2291              	.LVL211:
 2292              	.LFB22:
1370:RTT/SEGGER_RTT.c **** 
1371:RTT/SEGGER_RTT.c **** /*********************************************************************
1372:RTT/SEGGER_RTT.c **** *
1373:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigDownBuffer
1374:RTT/SEGGER_RTT.c **** *
1375:RTT/SEGGER_RTT.c **** *  Function description
1376:RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific down-buffer (H->T).
1377:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1378:RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1379:RTT/SEGGER_RTT.c **** *
1380:RTT/SEGGER_RTT.c **** *  Parameters
1381:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1382:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1383:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1384:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1385:RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1386:RTT/SEGGER_RTT.c **** *
1387:RTT/SEGGER_RTT.c **** *  Return value
1388:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1389:RTT/SEGGER_RTT.c **** *     < 0  Error
1390:RTT/SEGGER_RTT.c **** *
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 69


1391:RTT/SEGGER_RTT.c **** *  Additional information
1392:RTT/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1393:RTT/SEGGER_RTT.c **** *    May only be called once per buffer.
1394:RTT/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1395:RTT/SEGGER_RTT.c **** */
1396:RTT/SEGGER_RTT.c **** int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Bu
 2293              		.loc 1 1396 126 is_stmt 1 view -0
 2294              		.cfi_startproc
 2295              		@ args = 4, pretend = 0, frame = 0
 2296              		@ frame_needed = 0, uses_anonymous_args = 0
 2297              		.loc 1 1396 126 is_stmt 0 view .LVU656
 2298 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2299              	.LCFI25:
 2300              		.cfi_def_cfa_offset 24
 2301              		.cfi_offset 4, -24
 2302              		.cfi_offset 5, -20
 2303              		.cfi_offset 6, -16
 2304              		.cfi_offset 7, -12
 2305              		.cfi_offset 8, -8
 2306              		.cfi_offset 14, -4
 2307 0004 0446     		mov	r4, r0
 2308 0006 8846     		mov	r8, r1
 2309 0008 1746     		mov	r7, r2
 2310 000a 1E46     		mov	r6, r3
1397:RTT/SEGGER_RTT.c ****   int r;
 2311              		.loc 1 1397 3 is_stmt 1 view .LVU657
1398:RTT/SEGGER_RTT.c **** 
1399:RTT/SEGGER_RTT.c ****   INIT();
 2312              		.loc 1 1399 3 view .LVU658
 2313              		.loc 1 1399 3 view .LVU659
 2314 000c 154B     		ldr	r3, .L162
 2315              	.LVL212:
 2316              		.loc 1 1399 3 is_stmt 0 view .LVU660
 2317 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2318 0010 13B3     		cbz	r3, .L161
 2319              	.LVL213:
 2320              	.L156:
 2321              		.loc 1 1399 3 is_stmt 1 discriminator 3 view .LVU661
1400:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2322              		.loc 1 1400 3 discriminator 3 view .LVU662
 2323              		.loc 1 1400 42 is_stmt 0 discriminator 3 view .LVU663
 2324 0012 144B     		ldr	r3, .L162
 2325 0014 5B69     		ldr	r3, [r3, #20]
 2326              		.loc 1 1400 6 discriminator 3 view .LVU664
 2327 0016 A342     		cmp	r3, r4
 2328 0018 21D9     		bls	.L159
 2329              	.LBB13:
1401:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2330              		.loc 1 1401 5 is_stmt 1 view .LVU665
 2331              		.loc 1 1401 5 view .LVU666
 2332              		.syntax unified
 2333              	@ 1401 "RTT/SEGGER_RTT.c" 1
 2334 001a EFF31183 		mrs   r3, basepri  
 2335 001e 4FF02001 		mov   r1, #32       
 2336 0022 81F31188 		msr   basepri, r1  
 2337              		
 2338              	@ 0 "" 2
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 70


 2339              	.LVL214:
 2340              		.loc 1 1401 22 view .LVU667
1402:RTT/SEGGER_RTT.c ****     if (BufferIndex > 0u) {
 2341              		.loc 1 1402 5 view .LVU668
 2342              		.loc 1 1402 8 is_stmt 0 view .LVU669
 2343              		.thumb
 2344              		.syntax unified
 2345 0026 5CB1     		cbz	r4, .L158
1403:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 2346              		.loc 1 1403 7 is_stmt 1 view .LVU670
 2347              		.loc 1 1403 51 is_stmt 0 view .LVU671
 2348 0028 04EB4400 		add	r0, r4, r4, lsl #1
 2349 002c 0D4D     		ldr	r5, .L162
 2350 002e 05EBC000 		add	r0, r5, r0, lsl #3
 2351 0032 C0F86080 		str	r8, [r0, #96]
1404:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 2352              		.loc 1 1404 7 is_stmt 1 view .LVU672
 2353              		.loc 1 1404 51 is_stmt 0 view .LVU673
 2354 0036 4766     		str	r7, [r0, #100]
1405:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 2355              		.loc 1 1405 7 is_stmt 1 view .LVU674
 2356              		.loc 1 1405 51 is_stmt 0 view .LVU675
 2357 0038 8666     		str	r6, [r0, #104]
1406:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 2358              		.loc 1 1406 7 is_stmt 1 view .LVU676
 2359              		.loc 1 1406 51 is_stmt 0 view .LVU677
 2360 003a 0022     		movs	r2, #0
 2361 003c 0267     		str	r2, [r0, #112]
1407:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 2362              		.loc 1 1407 7 is_stmt 1 view .LVU678
 2363              		.loc 1 1407 51 is_stmt 0 view .LVU679
 2364 003e C266     		str	r2, [r0, #108]
 2365              	.L158:
1408:RTT/SEGGER_RTT.c ****     }
1409:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 2366              		.loc 1 1409 5 is_stmt 1 view .LVU680
 2367              		.loc 1 1409 51 is_stmt 0 view .LVU681
 2368 0040 04EB4404 		add	r4, r4, r4, lsl #1
 2369              	.LVL215:
 2370              		.loc 1 1409 51 view .LVU682
 2371 0044 0748     		ldr	r0, .L162
 2372 0046 00EBC404 		add	r4, r0, r4, lsl #3
 2373 004a 069A     		ldr	r2, [sp, #24]
 2374 004c 6267     		str	r2, [r4, #116]
1410:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2375              		.loc 1 1410 5 is_stmt 1 view .LVU683
 2376              		.syntax unified
 2377              	@ 1410 "RTT/SEGGER_RTT.c" 1
 2378 004e 83F31188 		msr   basepri, r3  
 2379              		
 2380              	@ 0 "" 2
 2381              		.thumb
 2382              		.syntax unified
 2383              	.LBE13:
 2384              		.loc 1 1410 24 view .LVU684
1411:RTT/SEGGER_RTT.c ****     r =  0;
 2385              		.loc 1 1411 5 view .LVU685
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 71


 2386              	.LVL216:
 2387              		.loc 1 1411 7 is_stmt 0 view .LVU686
 2388 0052 0020     		movs	r0, #0
 2389              	.LVL217:
 2390              	.L155:
1412:RTT/SEGGER_RTT.c ****   } else {
1413:RTT/SEGGER_RTT.c ****     r = -1;
1414:RTT/SEGGER_RTT.c ****   }
1415:RTT/SEGGER_RTT.c ****   return r;
1416:RTT/SEGGER_RTT.c **** }
 2391              		.loc 1 1416 1 view .LVU687
 2392 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2393              	.LVL218:
 2394              	.L161:
1399:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2395              		.loc 1 1399 3 is_stmt 1 discriminator 1 view .LVU688
 2396 0058 FFF7FEFF 		bl	_DoInit
 2397              	.LVL219:
1399:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2398              		.loc 1 1399 3 is_stmt 0 discriminator 1 view .LVU689
 2399 005c D9E7     		b	.L156
 2400              	.L159:
1413:RTT/SEGGER_RTT.c ****   }
 2401              		.loc 1 1413 7 view .LVU690
 2402 005e 4FF0FF30 		mov	r0, #-1
 2403              	.LVL220:
1415:RTT/SEGGER_RTT.c **** }
 2404              		.loc 1 1415 3 is_stmt 1 view .LVU691
1415:RTT/SEGGER_RTT.c **** }
 2405              		.loc 1 1415 10 is_stmt 0 view .LVU692
 2406 0062 F7E7     		b	.L155
 2407              	.L163:
 2408              		.align	2
 2409              	.L162:
 2410 0064 00000000 		.word	.LANCHOR1
 2411              		.cfi_endproc
 2412              	.LFE22:
 2414              		.section	.text.SEGGER_RTT_SetNameUpBuffer,"ax",%progbits
 2415              		.align	1
 2416              		.global	SEGGER_RTT_SetNameUpBuffer
 2417              		.syntax unified
 2418              		.thumb
 2419              		.thumb_func
 2421              	SEGGER_RTT_SetNameUpBuffer:
 2422              	.LVL221:
 2423              	.LFB23:
1417:RTT/SEGGER_RTT.c **** 
1418:RTT/SEGGER_RTT.c **** /*********************************************************************
1419:RTT/SEGGER_RTT.c **** *
1420:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameUpBuffer
1421:RTT/SEGGER_RTT.c **** *
1422:RTT/SEGGER_RTT.c **** *  Function description
1423:RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer name (T->H).
1424:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1425:RTT/SEGGER_RTT.c **** *
1426:RTT/SEGGER_RTT.c **** *  Parameters
1427:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 72


1428:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1429:RTT/SEGGER_RTT.c **** *
1430:RTT/SEGGER_RTT.c **** *  Return value
1431:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1432:RTT/SEGGER_RTT.c **** *     < 0  Error
1433:RTT/SEGGER_RTT.c **** */
1434:RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetNameUpBuffer(unsigned BufferIndex, const char* sName) {
 2424              		.loc 1 1434 73 is_stmt 1 view -0
 2425              		.cfi_startproc
 2426              		@ args = 0, pretend = 0, frame = 0
 2427              		@ frame_needed = 0, uses_anonymous_args = 0
 2428              		.loc 1 1434 73 is_stmt 0 view .LVU694
 2429 0000 38B5     		push	{r3, r4, r5, lr}
 2430              	.LCFI26:
 2431              		.cfi_def_cfa_offset 16
 2432              		.cfi_offset 3, -16
 2433              		.cfi_offset 4, -12
 2434              		.cfi_offset 5, -8
 2435              		.cfi_offset 14, -4
 2436 0002 0446     		mov	r4, r0
 2437 0004 0D46     		mov	r5, r1
1435:RTT/SEGGER_RTT.c ****   int r;
 2438              		.loc 1 1435 3 is_stmt 1 view .LVU695
1436:RTT/SEGGER_RTT.c **** 
1437:RTT/SEGGER_RTT.c ****   INIT();
 2439              		.loc 1 1437 3 view .LVU696
 2440              		.loc 1 1437 3 view .LVU697
 2441 0006 0E4B     		ldr	r3, .L170
 2442 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2443 000a 9BB1     		cbz	r3, .L169
 2444              	.LVL222:
 2445              	.L165:
 2446              		.loc 1 1437 3 discriminator 3 view .LVU698
1438:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2447              		.loc 1 1438 3 discriminator 3 view .LVU699
 2448              		.loc 1 1438 42 is_stmt 0 discriminator 3 view .LVU700
 2449 000c 0C4B     		ldr	r3, .L170
 2450 000e 1B69     		ldr	r3, [r3, #16]
 2451              		.loc 1 1438 6 discriminator 3 view .LVU701
 2452 0010 A342     		cmp	r3, r4
 2453 0012 12D9     		bls	.L167
 2454              	.LBB14:
1439:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2455              		.loc 1 1439 5 is_stmt 1 view .LVU702
 2456              		.loc 1 1439 5 view .LVU703
 2457              		.syntax unified
 2458              	@ 1439 "RTT/SEGGER_RTT.c" 1
 2459 0014 EFF31183 		mrs   r3, basepri  
 2460 0018 4FF02001 		mov   r1, #32       
 2461 001c 81F31188 		msr   basepri, r1  
 2462              		
 2463              	@ 0 "" 2
 2464              	.LVL223:
 2465              		.loc 1 1439 22 view .LVU704
1440:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].sName = sName;
 2466              		.loc 1 1440 5 view .LVU705
 2467              		.loc 1 1440 40 is_stmt 0 view .LVU706
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 73


 2468              		.thumb
 2469              		.syntax unified
 2470 0020 0134     		adds	r4, r4, #1
 2471              	.LVL224:
 2472              		.loc 1 1440 40 view .LVU707
 2473 0022 04EB4404 		add	r4, r4, r4, lsl #1
 2474              	.LVL225:
 2475              		.loc 1 1440 40 view .LVU708
 2476 0026 064A     		ldr	r2, .L170
 2477 0028 42F83450 		str	r5, [r2, r4, lsl #3]
1441:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2478              		.loc 1 1441 5 is_stmt 1 view .LVU709
 2479              		.syntax unified
 2480              	@ 1441 "RTT/SEGGER_RTT.c" 1
 2481 002c 83F31188 		msr   basepri, r3  
 2482              		
 2483              	@ 0 "" 2
 2484              		.thumb
 2485              		.syntax unified
 2486              	.LBE14:
 2487              		.loc 1 1441 24 view .LVU710
1442:RTT/SEGGER_RTT.c ****     r =  0;
 2488              		.loc 1 1442 5 view .LVU711
 2489              	.LVL226:
 2490              		.loc 1 1442 7 is_stmt 0 view .LVU712
 2491 0030 0020     		movs	r0, #0
 2492              	.LVL227:
 2493              	.L164:
1443:RTT/SEGGER_RTT.c ****   } else {
1444:RTT/SEGGER_RTT.c ****     r = -1;
1445:RTT/SEGGER_RTT.c ****   }
1446:RTT/SEGGER_RTT.c ****   return r;
1447:RTT/SEGGER_RTT.c **** }
 2494              		.loc 1 1447 1 view .LVU713
 2495 0032 38BD     		pop	{r3, r4, r5, pc}
 2496              	.LVL228:
 2497              	.L169:
1437:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2498              		.loc 1 1437 3 is_stmt 1 discriminator 1 view .LVU714
 2499 0034 FFF7FEFF 		bl	_DoInit
 2500              	.LVL229:
1437:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2501              		.loc 1 1437 3 is_stmt 0 discriminator 1 view .LVU715
 2502 0038 E8E7     		b	.L165
 2503              	.L167:
1444:RTT/SEGGER_RTT.c ****   }
 2504              		.loc 1 1444 7 view .LVU716
 2505 003a 4FF0FF30 		mov	r0, #-1
 2506              	.LVL230:
1446:RTT/SEGGER_RTT.c **** }
 2507              		.loc 1 1446 3 is_stmt 1 view .LVU717
1446:RTT/SEGGER_RTT.c **** }
 2508              		.loc 1 1446 10 is_stmt 0 view .LVU718
 2509 003e F8E7     		b	.L164
 2510              	.L171:
 2511              		.align	2
 2512              	.L170:
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 74


 2513 0040 00000000 		.word	.LANCHOR1
 2514              		.cfi_endproc
 2515              	.LFE23:
 2517              		.section	.text.SEGGER_RTT_SetNameDownBuffer,"ax",%progbits
 2518              		.align	1
 2519              		.global	SEGGER_RTT_SetNameDownBuffer
 2520              		.syntax unified
 2521              		.thumb
 2522              		.thumb_func
 2524              	SEGGER_RTT_SetNameDownBuffer:
 2525              	.LVL231:
 2526              	.LFB24:
1448:RTT/SEGGER_RTT.c **** 
1449:RTT/SEGGER_RTT.c **** /*********************************************************************
1450:RTT/SEGGER_RTT.c **** *
1451:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameDownBuffer
1452:RTT/SEGGER_RTT.c **** *
1453:RTT/SEGGER_RTT.c **** *  Function description
1454:RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific Down-buffer name (T->H).
1455:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1456:RTT/SEGGER_RTT.c **** *
1457:RTT/SEGGER_RTT.c **** *  Parameters
1458:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1459:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1460:RTT/SEGGER_RTT.c **** *
1461:RTT/SEGGER_RTT.c **** *  Return value
1462:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1463:RTT/SEGGER_RTT.c **** *     < 0  Error
1464:RTT/SEGGER_RTT.c **** */
1465:RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetNameDownBuffer(unsigned BufferIndex, const char* sName) {
 2527              		.loc 1 1465 75 is_stmt 1 view -0
 2528              		.cfi_startproc
 2529              		@ args = 0, pretend = 0, frame = 0
 2530              		@ frame_needed = 0, uses_anonymous_args = 0
 2531              		.loc 1 1465 75 is_stmt 0 view .LVU720
 2532 0000 38B5     		push	{r3, r4, r5, lr}
 2533              	.LCFI27:
 2534              		.cfi_def_cfa_offset 16
 2535              		.cfi_offset 3, -16
 2536              		.cfi_offset 4, -12
 2537              		.cfi_offset 5, -8
 2538              		.cfi_offset 14, -4
 2539 0002 0446     		mov	r4, r0
 2540 0004 0D46     		mov	r5, r1
1466:RTT/SEGGER_RTT.c ****   int r;
 2541              		.loc 1 1466 3 is_stmt 1 view .LVU721
1467:RTT/SEGGER_RTT.c **** 
1468:RTT/SEGGER_RTT.c ****   INIT();
 2542              		.loc 1 1468 3 view .LVU722
 2543              		.loc 1 1468 3 view .LVU723
 2544 0006 0E4B     		ldr	r3, .L178
 2545 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2546 000a 9BB1     		cbz	r3, .L177
 2547              	.LVL232:
 2548              	.L173:
 2549              		.loc 1 1468 3 discriminator 3 view .LVU724
1469:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 75


 2550              		.loc 1 1469 3 discriminator 3 view .LVU725
 2551              		.loc 1 1469 42 is_stmt 0 discriminator 3 view .LVU726
 2552 000c 0C4B     		ldr	r3, .L178
 2553 000e 5B69     		ldr	r3, [r3, #20]
 2554              		.loc 1 1469 6 discriminator 3 view .LVU727
 2555 0010 A342     		cmp	r3, r4
 2556 0012 12D9     		bls	.L175
 2557              	.LBB15:
1470:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2558              		.loc 1 1470 5 is_stmt 1 view .LVU728
 2559              		.loc 1 1470 5 view .LVU729
 2560              		.syntax unified
 2561              	@ 1470 "RTT/SEGGER_RTT.c" 1
 2562 0014 EFF31183 		mrs   r3, basepri  
 2563 0018 4FF02001 		mov   r1, #32       
 2564 001c 81F31188 		msr   basepri, r1  
 2565              		
 2566              	@ 0 "" 2
 2567              	.LVL233:
 2568              		.loc 1 1470 22 view .LVU730
1471:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].sName = sName;
 2569              		.loc 1 1471 5 view .LVU731
 2570              		.loc 1 1471 42 is_stmt 0 view .LVU732
 2571              		.thumb
 2572              		.syntax unified
 2573 0020 04EB4404 		add	r4, r4, r4, lsl #1
 2574              	.LVL234:
 2575              		.loc 1 1471 42 view .LVU733
 2576 0024 0648     		ldr	r0, .L178
 2577 0026 00EBC404 		add	r4, r0, r4, lsl #3
 2578 002a 2566     		str	r5, [r4, #96]
1472:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2579              		.loc 1 1472 5 is_stmt 1 view .LVU734
 2580              		.syntax unified
 2581              	@ 1472 "RTT/SEGGER_RTT.c" 1
 2582 002c 83F31188 		msr   basepri, r3  
 2583              		
 2584              	@ 0 "" 2
 2585              		.thumb
 2586              		.syntax unified
 2587              	.LBE15:
 2588              		.loc 1 1472 24 view .LVU735
1473:RTT/SEGGER_RTT.c ****     r =  0;
 2589              		.loc 1 1473 5 view .LVU736
 2590              	.LVL235:
 2591              		.loc 1 1473 7 is_stmt 0 view .LVU737
 2592 0030 0020     		movs	r0, #0
 2593              	.LVL236:
 2594              	.L172:
1474:RTT/SEGGER_RTT.c ****   } else {
1475:RTT/SEGGER_RTT.c ****     r = -1;
1476:RTT/SEGGER_RTT.c ****   }
1477:RTT/SEGGER_RTT.c ****   return r;
1478:RTT/SEGGER_RTT.c **** }
 2595              		.loc 1 1478 1 view .LVU738
 2596 0032 38BD     		pop	{r3, r4, r5, pc}
 2597              	.LVL237:
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 76


 2598              	.L177:
1468:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2599              		.loc 1 1468 3 is_stmt 1 discriminator 1 view .LVU739
 2600 0034 FFF7FEFF 		bl	_DoInit
 2601              	.LVL238:
1468:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2602              		.loc 1 1468 3 is_stmt 0 discriminator 1 view .LVU740
 2603 0038 E8E7     		b	.L173
 2604              	.L175:
1475:RTT/SEGGER_RTT.c ****   }
 2605              		.loc 1 1475 7 view .LVU741
 2606 003a 4FF0FF30 		mov	r0, #-1
 2607              	.LVL239:
1477:RTT/SEGGER_RTT.c **** }
 2608              		.loc 1 1477 3 is_stmt 1 view .LVU742
1477:RTT/SEGGER_RTT.c **** }
 2609              		.loc 1 1477 10 is_stmt 0 view .LVU743
 2610 003e F8E7     		b	.L172
 2611              	.L179:
 2612              		.align	2
 2613              	.L178:
 2614 0040 00000000 		.word	.LANCHOR1
 2615              		.cfi_endproc
 2616              	.LFE24:
 2618              		.section	.text.SEGGER_RTT_SetFlagsUpBuffer,"ax",%progbits
 2619              		.align	1
 2620              		.global	SEGGER_RTT_SetFlagsUpBuffer
 2621              		.syntax unified
 2622              		.thumb
 2623              		.thumb_func
 2625              	SEGGER_RTT_SetFlagsUpBuffer:
 2626              	.LVL240:
 2627              	.LFB25:
1479:RTT/SEGGER_RTT.c **** 
1480:RTT/SEGGER_RTT.c **** /*********************************************************************
1481:RTT/SEGGER_RTT.c **** *
1482:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsUpBuffer
1483:RTT/SEGGER_RTT.c **** *
1484:RTT/SEGGER_RTT.c **** *  Function description
1485:RTT/SEGGER_RTT.c **** *    Run-time configuration of specific up-buffer flags (T->H).
1486:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1487:RTT/SEGGER_RTT.c **** *
1488:RTT/SEGGER_RTT.c **** *  Parameters
1489:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer.
1490:RTT/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1491:RTT/SEGGER_RTT.c **** *
1492:RTT/SEGGER_RTT.c **** *  Return value
1493:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1494:RTT/SEGGER_RTT.c **** *     < 0  Error
1495:RTT/SEGGER_RTT.c **** */
1496:RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsUpBuffer(unsigned BufferIndex, unsigned Flags) {
 2628              		.loc 1 1496 71 is_stmt 1 view -0
 2629              		.cfi_startproc
 2630              		@ args = 0, pretend = 0, frame = 0
 2631              		@ frame_needed = 0, uses_anonymous_args = 0
 2632              		.loc 1 1496 71 is_stmt 0 view .LVU745
 2633 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 77


 2634              	.LCFI28:
 2635              		.cfi_def_cfa_offset 16
 2636              		.cfi_offset 3, -16
 2637              		.cfi_offset 4, -12
 2638              		.cfi_offset 5, -8
 2639              		.cfi_offset 14, -4
 2640 0002 0446     		mov	r4, r0
 2641 0004 0D46     		mov	r5, r1
1497:RTT/SEGGER_RTT.c ****   int r;
 2642              		.loc 1 1497 3 is_stmt 1 view .LVU746
1498:RTT/SEGGER_RTT.c **** 
1499:RTT/SEGGER_RTT.c ****   INIT();
 2643              		.loc 1 1499 3 view .LVU747
 2644              		.loc 1 1499 3 view .LVU748
 2645 0006 0E4B     		ldr	r3, .L186
 2646 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2647 000a 9BB1     		cbz	r3, .L185
 2648              	.LVL241:
 2649              	.L181:
 2650              		.loc 1 1499 3 discriminator 3 view .LVU749
1500:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2651              		.loc 1 1500 3 discriminator 3 view .LVU750
 2652              		.loc 1 1500 42 is_stmt 0 discriminator 3 view .LVU751
 2653 000c 0C4B     		ldr	r3, .L186
 2654 000e 1B69     		ldr	r3, [r3, #16]
 2655              		.loc 1 1500 6 discriminator 3 view .LVU752
 2656 0010 A342     		cmp	r3, r4
 2657 0012 12D9     		bls	.L183
 2658              	.LBB16:
1501:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2659              		.loc 1 1501 5 is_stmt 1 view .LVU753
 2660              		.loc 1 1501 5 view .LVU754
 2661              		.syntax unified
 2662              	@ 1501 "RTT/SEGGER_RTT.c" 1
 2663 0014 EFF31183 		mrs   r3, basepri  
 2664 0018 4FF02001 		mov   r1, #32       
 2665 001c 81F31188 		msr   basepri, r1  
 2666              		
 2667              	@ 0 "" 2
 2668              	.LVL242:
 2669              		.loc 1 1501 22 view .LVU755
1502:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].Flags = Flags;
 2670              		.loc 1 1502 5 view .LVU756
 2671              		.loc 1 1502 40 is_stmt 0 view .LVU757
 2672              		.thumb
 2673              		.syntax unified
 2674 0020 04EB4404 		add	r4, r4, r4, lsl #1
 2675              	.LVL243:
 2676              		.loc 1 1502 40 view .LVU758
 2677 0024 0648     		ldr	r0, .L186
 2678 0026 00EBC404 		add	r4, r0, r4, lsl #3
 2679 002a E562     		str	r5, [r4, #44]
1503:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2680              		.loc 1 1503 5 is_stmt 1 view .LVU759
 2681              		.syntax unified
 2682              	@ 1503 "RTT/SEGGER_RTT.c" 1
 2683 002c 83F31188 		msr   basepri, r3  
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 78


 2684              		
 2685              	@ 0 "" 2
 2686              		.thumb
 2687              		.syntax unified
 2688              	.LBE16:
 2689              		.loc 1 1503 24 view .LVU760
1504:RTT/SEGGER_RTT.c ****     r =  0;
 2690              		.loc 1 1504 5 view .LVU761
 2691              	.LVL244:
 2692              		.loc 1 1504 7 is_stmt 0 view .LVU762
 2693 0030 0020     		movs	r0, #0
 2694              	.LVL245:
 2695              	.L180:
1505:RTT/SEGGER_RTT.c ****   } else {
1506:RTT/SEGGER_RTT.c ****     r = -1;
1507:RTT/SEGGER_RTT.c ****   }
1508:RTT/SEGGER_RTT.c ****   return r;
1509:RTT/SEGGER_RTT.c **** }
 2696              		.loc 1 1509 1 view .LVU763
 2697 0032 38BD     		pop	{r3, r4, r5, pc}
 2698              	.LVL246:
 2699              	.L185:
1499:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2700              		.loc 1 1499 3 is_stmt 1 discriminator 1 view .LVU764
 2701 0034 FFF7FEFF 		bl	_DoInit
 2702              	.LVL247:
1499:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2703              		.loc 1 1499 3 is_stmt 0 discriminator 1 view .LVU765
 2704 0038 E8E7     		b	.L181
 2705              	.L183:
1506:RTT/SEGGER_RTT.c ****   }
 2706              		.loc 1 1506 7 view .LVU766
 2707 003a 4FF0FF30 		mov	r0, #-1
 2708              	.LVL248:
1508:RTT/SEGGER_RTT.c **** }
 2709              		.loc 1 1508 3 is_stmt 1 view .LVU767
1508:RTT/SEGGER_RTT.c **** }
 2710              		.loc 1 1508 10 is_stmt 0 view .LVU768
 2711 003e F8E7     		b	.L180
 2712              	.L187:
 2713              		.align	2
 2714              	.L186:
 2715 0040 00000000 		.word	.LANCHOR1
 2716              		.cfi_endproc
 2717              	.LFE25:
 2719              		.section	.text.SEGGER_RTT_SetFlagsDownBuffer,"ax",%progbits
 2720              		.align	1
 2721              		.global	SEGGER_RTT_SetFlagsDownBuffer
 2722              		.syntax unified
 2723              		.thumb
 2724              		.thumb_func
 2726              	SEGGER_RTT_SetFlagsDownBuffer:
 2727              	.LVL249:
 2728              	.LFB26:
1510:RTT/SEGGER_RTT.c **** 
1511:RTT/SEGGER_RTT.c **** /*********************************************************************
1512:RTT/SEGGER_RTT.c **** *
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 79


1513:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsDownBuffer
1514:RTT/SEGGER_RTT.c **** *
1515:RTT/SEGGER_RTT.c **** *  Function description
1516:RTT/SEGGER_RTT.c **** *    Run-time configuration of specific Down-buffer flags (T->H).
1517:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1518:RTT/SEGGER_RTT.c **** *
1519:RTT/SEGGER_RTT.c **** *  Parameters
1520:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1521:RTT/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1522:RTT/SEGGER_RTT.c **** *
1523:RTT/SEGGER_RTT.c **** *  Return value
1524:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1525:RTT/SEGGER_RTT.c **** *     < 0  Error
1526:RTT/SEGGER_RTT.c **** */
1527:RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsDownBuffer(unsigned BufferIndex, unsigned Flags) {
 2729              		.loc 1 1527 73 is_stmt 1 view -0
 2730              		.cfi_startproc
 2731              		@ args = 0, pretend = 0, frame = 0
 2732              		@ frame_needed = 0, uses_anonymous_args = 0
 2733              		.loc 1 1527 73 is_stmt 0 view .LVU770
 2734 0000 38B5     		push	{r3, r4, r5, lr}
 2735              	.LCFI29:
 2736              		.cfi_def_cfa_offset 16
 2737              		.cfi_offset 3, -16
 2738              		.cfi_offset 4, -12
 2739              		.cfi_offset 5, -8
 2740              		.cfi_offset 14, -4
 2741 0002 0446     		mov	r4, r0
 2742 0004 0D46     		mov	r5, r1
1528:RTT/SEGGER_RTT.c ****   int r;
 2743              		.loc 1 1528 3 is_stmt 1 view .LVU771
1529:RTT/SEGGER_RTT.c **** 
1530:RTT/SEGGER_RTT.c ****   INIT();
 2744              		.loc 1 1530 3 view .LVU772
 2745              		.loc 1 1530 3 view .LVU773
 2746 0006 0E4B     		ldr	r3, .L194
 2747 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2748 000a 9BB1     		cbz	r3, .L193
 2749              	.LVL250:
 2750              	.L189:
 2751              		.loc 1 1530 3 discriminator 3 view .LVU774
1531:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2752              		.loc 1 1531 3 discriminator 3 view .LVU775
 2753              		.loc 1 1531 42 is_stmt 0 discriminator 3 view .LVU776
 2754 000c 0C4B     		ldr	r3, .L194
 2755 000e 5B69     		ldr	r3, [r3, #20]
 2756              		.loc 1 1531 6 discriminator 3 view .LVU777
 2757 0010 A342     		cmp	r3, r4
 2758 0012 12D9     		bls	.L191
 2759              	.LBB17:
1532:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2760              		.loc 1 1532 5 is_stmt 1 view .LVU778
 2761              		.loc 1 1532 5 view .LVU779
 2762              		.syntax unified
 2763              	@ 1532 "RTT/SEGGER_RTT.c" 1
 2764 0014 EFF31183 		mrs   r3, basepri  
 2765 0018 4FF02001 		mov   r1, #32       
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 80


 2766 001c 81F31188 		msr   basepri, r1  
 2767              		
 2768              	@ 0 "" 2
 2769              	.LVL251:
 2770              		.loc 1 1532 22 view .LVU780
1533:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].Flags = Flags;
 2771              		.loc 1 1533 5 view .LVU781
 2772              		.loc 1 1533 42 is_stmt 0 view .LVU782
 2773              		.thumb
 2774              		.syntax unified
 2775 0020 04EB4404 		add	r4, r4, r4, lsl #1
 2776              	.LVL252:
 2777              		.loc 1 1533 42 view .LVU783
 2778 0024 0648     		ldr	r0, .L194
 2779 0026 00EBC404 		add	r4, r0, r4, lsl #3
 2780 002a 6567     		str	r5, [r4, #116]
1534:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2781              		.loc 1 1534 5 is_stmt 1 view .LVU784
 2782              		.syntax unified
 2783              	@ 1534 "RTT/SEGGER_RTT.c" 1
 2784 002c 83F31188 		msr   basepri, r3  
 2785              		
 2786              	@ 0 "" 2
 2787              		.thumb
 2788              		.syntax unified
 2789              	.LBE17:
 2790              		.loc 1 1534 24 view .LVU785
1535:RTT/SEGGER_RTT.c ****     r =  0;
 2791              		.loc 1 1535 5 view .LVU786
 2792              	.LVL253:
 2793              		.loc 1 1535 7 is_stmt 0 view .LVU787
 2794 0030 0020     		movs	r0, #0
 2795              	.LVL254:
 2796              	.L188:
1536:RTT/SEGGER_RTT.c ****   } else {
1537:RTT/SEGGER_RTT.c ****     r = -1;
1538:RTT/SEGGER_RTT.c ****   }
1539:RTT/SEGGER_RTT.c ****   return r;
1540:RTT/SEGGER_RTT.c **** }
 2797              		.loc 1 1540 1 view .LVU788
 2798 0032 38BD     		pop	{r3, r4, r5, pc}
 2799              	.LVL255:
 2800              	.L193:
1530:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2801              		.loc 1 1530 3 is_stmt 1 discriminator 1 view .LVU789
 2802 0034 FFF7FEFF 		bl	_DoInit
 2803              	.LVL256:
1530:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2804              		.loc 1 1530 3 is_stmt 0 discriminator 1 view .LVU790
 2805 0038 E8E7     		b	.L189
 2806              	.L191:
1537:RTT/SEGGER_RTT.c ****   }
 2807              		.loc 1 1537 7 view .LVU791
 2808 003a 4FF0FF30 		mov	r0, #-1
 2809              	.LVL257:
1539:RTT/SEGGER_RTT.c **** }
 2810              		.loc 1 1539 3 is_stmt 1 view .LVU792
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 81


1539:RTT/SEGGER_RTT.c **** }
 2811              		.loc 1 1539 10 is_stmt 0 view .LVU793
 2812 003e F8E7     		b	.L188
 2813              	.L195:
 2814              		.align	2
 2815              	.L194:
 2816 0040 00000000 		.word	.LANCHOR1
 2817              		.cfi_endproc
 2818              	.LFE26:
 2820              		.section	.text.SEGGER_RTT_Init,"ax",%progbits
 2821              		.align	1
 2822              		.global	SEGGER_RTT_Init
 2823              		.syntax unified
 2824              		.thumb
 2825              		.thumb_func
 2827              	SEGGER_RTT_Init:
 2828              	.LFB27:
1541:RTT/SEGGER_RTT.c **** 
1542:RTT/SEGGER_RTT.c **** /*********************************************************************
1543:RTT/SEGGER_RTT.c **** *
1544:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_Init
1545:RTT/SEGGER_RTT.c **** *
1546:RTT/SEGGER_RTT.c **** *  Function description
1547:RTT/SEGGER_RTT.c **** *    Initializes the RTT Control Block.
1548:RTT/SEGGER_RTT.c **** *    Should be used in RAM targets, at start of the application.
1549:RTT/SEGGER_RTT.c **** *
1550:RTT/SEGGER_RTT.c **** */
1551:RTT/SEGGER_RTT.c **** void SEGGER_RTT_Init (void) {
 2829              		.loc 1 1551 29 is_stmt 1 view -0
 2830              		.cfi_startproc
 2831              		@ args = 0, pretend = 0, frame = 0
 2832              		@ frame_needed = 0, uses_anonymous_args = 0
 2833 0000 08B5     		push	{r3, lr}
 2834              	.LCFI30:
 2835              		.cfi_def_cfa_offset 8
 2836              		.cfi_offset 3, -8
 2837              		.cfi_offset 14, -4
1552:RTT/SEGGER_RTT.c ****   _DoInit();
 2838              		.loc 1 1552 3 view .LVU795
 2839 0002 FFF7FEFF 		bl	_DoInit
 2840              	.LVL258:
1553:RTT/SEGGER_RTT.c **** }
 2841              		.loc 1 1553 1 is_stmt 0 view .LVU796
 2842 0006 08BD     		pop	{r3, pc}
 2843              		.cfi_endproc
 2844              	.LFE27:
 2846              		.section	.text.SEGGER_RTT_SetTerminal,"ax",%progbits
 2847              		.align	1
 2848              		.global	SEGGER_RTT_SetTerminal
 2849              		.syntax unified
 2850              		.thumb
 2851              		.thumb_func
 2853              	SEGGER_RTT_SetTerminal:
 2854              	.LVL259:
 2855              	.LFB28:
1554:RTT/SEGGER_RTT.c **** 
1555:RTT/SEGGER_RTT.c **** /*********************************************************************
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 82


1556:RTT/SEGGER_RTT.c **** *
1557:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetTerminal
1558:RTT/SEGGER_RTT.c **** *
1559:RTT/SEGGER_RTT.c **** *  Function description
1560:RTT/SEGGER_RTT.c **** *    Sets the terminal to be used for output on channel 0.
1561:RTT/SEGGER_RTT.c **** *
1562:RTT/SEGGER_RTT.c **** *  Parameters
1563:RTT/SEGGER_RTT.c **** *    TerminalId  Index of the terminal.
1564:RTT/SEGGER_RTT.c **** *
1565:RTT/SEGGER_RTT.c **** *  Return value
1566:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1567:RTT/SEGGER_RTT.c **** *     < 0  Error (e.g. if RTT is configured for non-blocking mode and there was no space in the buf
1568:RTT/SEGGER_RTT.c **** */
1569:RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetTerminal (unsigned char TerminalId) {
 2856              		.loc 1 1569 55 is_stmt 1 view -0
 2857              		.cfi_startproc
 2858              		@ args = 0, pretend = 0, frame = 8
 2859              		@ frame_needed = 0, uses_anonymous_args = 0
 2860              		.loc 1 1569 55 is_stmt 0 view .LVU798
 2861 0000 30B5     		push	{r4, r5, lr}
 2862              	.LCFI31:
 2863              		.cfi_def_cfa_offset 12
 2864              		.cfi_offset 4, -12
 2865              		.cfi_offset 5, -8
 2866              		.cfi_offset 14, -4
 2867 0002 83B0     		sub	sp, sp, #12
 2868              	.LCFI32:
 2869              		.cfi_def_cfa_offset 24
 2870 0004 0446     		mov	r4, r0
1570:RTT/SEGGER_RTT.c ****   unsigned char         ac[2];
 2871              		.loc 1 1570 3 is_stmt 1 view .LVU799
1571:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2872              		.loc 1 1571 3 view .LVU800
1572:RTT/SEGGER_RTT.c ****   unsigned Avail;
 2873              		.loc 1 1572 3 view .LVU801
1573:RTT/SEGGER_RTT.c ****   int r;
 2874              		.loc 1 1573 3 view .LVU802
1574:RTT/SEGGER_RTT.c ****   //
1575:RTT/SEGGER_RTT.c ****   INIT();
 2875              		.loc 1 1575 3 view .LVU803
 2876              		.loc 1 1575 3 view .LVU804
 2877 0006 1D4B     		ldr	r3, .L209
 2878 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2879 000a FBB1     		cbz	r3, .L206
 2880              	.LVL260:
 2881              	.L199:
 2882              		.loc 1 1575 3 discriminator 3 view .LVU805
1576:RTT/SEGGER_RTT.c ****   //
1577:RTT/SEGGER_RTT.c ****   r = 0;
 2883              		.loc 1 1577 3 discriminator 3 view .LVU806
1578:RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 2884              		.loc 1 1578 3 discriminator 3 view .LVU807
 2885              		.loc 1 1578 9 is_stmt 0 discriminator 3 view .LVU808
 2886 000c FF23     		movs	r3, #255
 2887 000e 8DF80430 		strb	r3, [sp, #4]
1579:RTT/SEGGER_RTT.c ****   if (TerminalId < sizeof(_aTerminalId)) { // We only support a certain number of channels
 2888              		.loc 1 1579 3 is_stmt 1 discriminator 3 view .LVU809
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 83


 2889              		.loc 1 1579 6 is_stmt 0 discriminator 3 view .LVU810
 2890 0012 0F2C     		cmp	r4, #15
 2891 0014 2FD8     		bhi	.L203
1580:RTT/SEGGER_RTT.c ****     ac[1] = _aTerminalId[TerminalId];
 2892              		.loc 1 1580 5 is_stmt 1 view .LVU811
 2893              		.loc 1 1580 25 is_stmt 0 view .LVU812
 2894 0016 1A4B     		ldr	r3, .L209+4
 2895 0018 1B5D     		ldrb	r3, [r3, r4]	@ zero_extendqisi2
 2896              		.loc 1 1580 11 view .LVU813
 2897 001a 8DF80530 		strb	r3, [sp, #5]
1581:RTT/SEGGER_RTT.c ****     pRing = &_SEGGER_RTT.aUp[0];    // Buffer 0 is always reserved for terminal I/O, so we can use 
 2898              		.loc 1 1581 5 is_stmt 1 view .LVU814
 2899              	.LVL261:
 2900              	.LBB18:
1582:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();    // Lock to make sure that no other task is writing into buffer, while we 
 2901              		.loc 1 1582 5 view .LVU815
 2902              		.loc 1 1582 5 view .LVU816
 2903              		.syntax unified
 2904              	@ 1582 "RTT/SEGGER_RTT.c" 1
 2905 001e EFF31185 		mrs   r5, basepri  
 2906 0022 4FF02001 		mov   r1, #32       
 2907 0026 81F31188 		msr   basepri, r1  
 2908              		
 2909              	@ 0 "" 2
 2910              	.LVL262:
 2911              		.loc 1 1582 22 view .LVU817
1583:RTT/SEGGER_RTT.c ****     if ((pRing->Flags & SEGGER_RTT_MODE_MASK) == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 2912              		.loc 1 1583 5 view .LVU818
 2913              		.loc 1 1583 15 is_stmt 0 view .LVU819
 2914              		.thumb
 2915              		.syntax unified
 2916 002a 144B     		ldr	r3, .L209
 2917 002c DB6A     		ldr	r3, [r3, #44]
 2918              		.loc 1 1583 23 view .LVU820
 2919 002e 03F00303 		and	r3, r3, #3
 2920              		.loc 1 1583 8 view .LVU821
 2921 0032 022B     		cmp	r3, #2
 2922 0034 0DD0     		beq	.L207
1584:RTT/SEGGER_RTT.c ****       _ActiveTerminal = TerminalId;
1585:RTT/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
1586:RTT/SEGGER_RTT.c ****     } else {                                                                            // Skipping
1587:RTT/SEGGER_RTT.c ****       Avail = _GetAvailWriteSpace(pRing);
 2923              		.loc 1 1587 7 is_stmt 1 view .LVU822
 2924              		.loc 1 1587 15 is_stmt 0 view .LVU823
 2925 0036 1348     		ldr	r0, .L209+8
 2926 0038 FFF7FEFF 		bl	_GetAvailWriteSpace
 2927              	.LVL263:
1588:RTT/SEGGER_RTT.c ****       if (Avail >= 2) {
 2928              		.loc 1 1588 7 is_stmt 1 view .LVU824
 2929              		.loc 1 1588 10 is_stmt 0 view .LVU825
 2930 003c 0128     		cmp	r0, #1
 2931 003e 11D8     		bhi	.L208
1589:RTT/SEGGER_RTT.c ****         _ActiveTerminal = TerminalId;    // Only change active terminal in case of success
1590:RTT/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
1591:RTT/SEGGER_RTT.c ****       } else {
1592:RTT/SEGGER_RTT.c ****         r = -1;
 2932              		.loc 1 1592 11 view .LVU826
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 84


 2933 0040 4FF0FF30 		mov	r0, #-1
 2934              	.LVL264:
 2935              	.L202:
1593:RTT/SEGGER_RTT.c ****       }
1594:RTT/SEGGER_RTT.c ****     }
1595:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2936              		.loc 1 1595 5 is_stmt 1 view .LVU827
 2937              		.syntax unified
 2938              	@ 1595 "RTT/SEGGER_RTT.c" 1
 2939 0044 85F31188 		msr   basepri, r5  
 2940              		
 2941              	@ 0 "" 2
 2942              		.thumb
 2943              		.syntax unified
 2944              	.LBE18:
 2945              		.loc 1 1595 24 view .LVU828
 2946              	.LVL265:
 2947              	.L198:
1596:RTT/SEGGER_RTT.c ****   } else {
1597:RTT/SEGGER_RTT.c ****     r = -1;
1598:RTT/SEGGER_RTT.c ****   }
1599:RTT/SEGGER_RTT.c ****   return r;
1600:RTT/SEGGER_RTT.c **** }
 2948              		.loc 1 1600 1 is_stmt 0 view .LVU829
 2949 0048 03B0     		add	sp, sp, #12
 2950              	.LCFI33:
 2951              		.cfi_remember_state
 2952              		.cfi_def_cfa_offset 12
 2953              		@ sp needed
 2954 004a 30BD     		pop	{r4, r5, pc}
 2955              	.LVL266:
 2956              	.L206:
 2957              	.LCFI34:
 2958              		.cfi_restore_state
1575:RTT/SEGGER_RTT.c ****   //
 2959              		.loc 1 1575 3 is_stmt 1 discriminator 1 view .LVU830
 2960 004c FFF7FEFF 		bl	_DoInit
 2961              	.LVL267:
1575:RTT/SEGGER_RTT.c ****   //
 2962              		.loc 1 1575 3 is_stmt 0 discriminator 1 view .LVU831
 2963 0050 DCE7     		b	.L199
 2964              	.LVL268:
 2965              	.L207:
 2966              	.LBB19:
1584:RTT/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 2967              		.loc 1 1584 7 is_stmt 1 view .LVU832
1584:RTT/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 2968              		.loc 1 1584 23 is_stmt 0 view .LVU833
 2969 0052 0D4B     		ldr	r3, .L209+12
 2970 0054 1C70     		strb	r4, [r3]
1585:RTT/SEGGER_RTT.c ****     } else {                                                                            // Skipping
 2971              		.loc 1 1585 7 is_stmt 1 view .LVU834
 2972 0056 0222     		movs	r2, #2
 2973 0058 01A9     		add	r1, sp, #4
 2974 005a 0A48     		ldr	r0, .L209+8
 2975 005c FFF7FEFF 		bl	_WriteBlocking
 2976              	.LVL269:
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 85


 2977              	.LBE19:
1577:RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 2978              		.loc 1 1577 5 is_stmt 0 view .LVU835
 2979 0060 0020     		movs	r0, #0
 2980              	.LBB20:
 2981 0062 EFE7     		b	.L202
 2982              	.LVL270:
 2983              	.L208:
1589:RTT/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 2984              		.loc 1 1589 9 is_stmt 1 view .LVU836
1589:RTT/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 2985              		.loc 1 1589 25 is_stmt 0 view .LVU837
 2986 0064 084B     		ldr	r3, .L209+12
 2987 0066 1C70     		strb	r4, [r3]
1590:RTT/SEGGER_RTT.c ****       } else {
 2988              		.loc 1 1590 9 is_stmt 1 view .LVU838
 2989 0068 0222     		movs	r2, #2
 2990 006a 01A9     		add	r1, sp, #4
 2991 006c 0548     		ldr	r0, .L209+8
 2992              	.LVL271:
1590:RTT/SEGGER_RTT.c ****       } else {
 2993              		.loc 1 1590 9 is_stmt 0 view .LVU839
 2994 006e FFF7FEFF 		bl	_WriteNoCheck
 2995              	.LVL272:
 2996              	.LBE20:
1577:RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 2997              		.loc 1 1577 5 view .LVU840
 2998 0072 0020     		movs	r0, #0
 2999              	.LBB21:
 3000 0074 E6E7     		b	.L202
 3001              	.LVL273:
 3002              	.L203:
1577:RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3003              		.loc 1 1577 5 view .LVU841
 3004              	.LBE21:
1597:RTT/SEGGER_RTT.c ****   }
 3005              		.loc 1 1597 7 view .LVU842
 3006 0076 4FF0FF30 		mov	r0, #-1
 3007              	.LVL274:
1599:RTT/SEGGER_RTT.c **** }
 3008              		.loc 1 1599 3 is_stmt 1 view .LVU843
1599:RTT/SEGGER_RTT.c **** }
 3009              		.loc 1 1599 10 is_stmt 0 view .LVU844
 3010 007a E5E7     		b	.L198
 3011              	.L210:
 3012              		.align	2
 3013              	.L209:
 3014 007c 00000000 		.word	.LANCHOR1
 3015 0080 00000000 		.word	.LANCHOR0
 3016 0084 18000000 		.word	.LANCHOR1+24
 3017 0088 00000000 		.word	.LANCHOR4
 3018              		.cfi_endproc
 3019              	.LFE28:
 3021              		.section	.text.SEGGER_RTT_TerminalOut,"ax",%progbits
 3022              		.align	1
 3023              		.global	SEGGER_RTT_TerminalOut
 3024              		.syntax unified
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 86


 3025              		.thumb
 3026              		.thumb_func
 3028              	SEGGER_RTT_TerminalOut:
 3029              	.LVL275:
 3030              	.LFB29:
1601:RTT/SEGGER_RTT.c **** 
1602:RTT/SEGGER_RTT.c **** /*********************************************************************
1603:RTT/SEGGER_RTT.c **** *
1604:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_TerminalOut
1605:RTT/SEGGER_RTT.c **** *
1606:RTT/SEGGER_RTT.c **** *  Function description
1607:RTT/SEGGER_RTT.c **** *    Writes a string to the given terminal
1608:RTT/SEGGER_RTT.c **** *     without changing the terminal for channel 0.
1609:RTT/SEGGER_RTT.c **** *
1610:RTT/SEGGER_RTT.c **** *  Parameters
1611:RTT/SEGGER_RTT.c **** *    TerminalId   Index of the terminal.
1612:RTT/SEGGER_RTT.c **** *    s            String to be printed on the terminal.
1613:RTT/SEGGER_RTT.c **** *
1614:RTT/SEGGER_RTT.c **** *  Return value
1615:RTT/SEGGER_RTT.c **** *    >= 0 - Number of bytes written.
1616:RTT/SEGGER_RTT.c **** *     < 0 - Error.
1617:RTT/SEGGER_RTT.c **** *
1618:RTT/SEGGER_RTT.c **** */
1619:RTT/SEGGER_RTT.c **** int SEGGER_RTT_TerminalOut (unsigned char TerminalId, const char* s) {
 3031              		.loc 1 1619 70 is_stmt 1 view -0
 3032              		.cfi_startproc
 3033              		@ args = 0, pretend = 0, frame = 0
 3034              		@ frame_needed = 0, uses_anonymous_args = 0
 3035              		.loc 1 1619 70 is_stmt 0 view .LVU846
 3036 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3037              	.LCFI35:
 3038              		.cfi_def_cfa_offset 32
 3039              		.cfi_offset 3, -32
 3040              		.cfi_offset 4, -28
 3041              		.cfi_offset 5, -24
 3042              		.cfi_offset 6, -20
 3043              		.cfi_offset 7, -16
 3044              		.cfi_offset 8, -12
 3045              		.cfi_offset 9, -8
 3046              		.cfi_offset 14, -4
 3047 0004 0446     		mov	r4, r0
 3048 0006 0D46     		mov	r5, r1
1620:RTT/SEGGER_RTT.c ****   int                   Status;
 3049              		.loc 1 1620 3 is_stmt 1 view .LVU847
1621:RTT/SEGGER_RTT.c ****   unsigned              FragLen;
 3050              		.loc 1 1621 3 view .LVU848
1622:RTT/SEGGER_RTT.c ****   unsigned              Avail;
 3051              		.loc 1 1622 3 view .LVU849
1623:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 3052              		.loc 1 1623 3 view .LVU850
1624:RTT/SEGGER_RTT.c ****   //
1625:RTT/SEGGER_RTT.c ****   INIT();
 3053              		.loc 1 1625 3 view .LVU851
 3054              		.loc 1 1625 3 view .LVU852
 3055 0008 354B     		ldr	r3, .L226
 3056 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3057 000c 03B3     		cbz	r3, .L222
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 87


 3058              	.LVL276:
 3059              	.L212:
 3060              		.loc 1 1625 3 discriminator 3 view .LVU853
1626:RTT/SEGGER_RTT.c ****   //
1627:RTT/SEGGER_RTT.c ****   // Validate terminal ID.
1628:RTT/SEGGER_RTT.c ****   //
1629:RTT/SEGGER_RTT.c ****   if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
 3061              		.loc 1 1629 3 discriminator 3 view .LVU854
 3062              		.loc 1 1629 6 is_stmt 0 discriminator 3 view .LVU855
 3063 000e 0F2C     		cmp	r4, #15
 3064 0010 63D8     		bhi	.L217
1630:RTT/SEGGER_RTT.c ****     //
1631:RTT/SEGGER_RTT.c ****     // Get "to-host" ring buffer.
1632:RTT/SEGGER_RTT.c ****     //
1633:RTT/SEGGER_RTT.c ****     pRing = &_SEGGER_RTT.aUp[0];
 3065              		.loc 1 1633 5 is_stmt 1 view .LVU856
 3066              	.LVL277:
1634:RTT/SEGGER_RTT.c ****     //
1635:RTT/SEGGER_RTT.c ****     // Need to be able to change terminal, write data, change back.
1636:RTT/SEGGER_RTT.c ****     // Compute the fixed and variable sizes.
1637:RTT/SEGGER_RTT.c ****     //
1638:RTT/SEGGER_RTT.c ****     FragLen = STRLEN(s);
 3067              		.loc 1 1638 5 view .LVU857
 3068              		.loc 1 1638 15 is_stmt 0 view .LVU858
 3069 0012 2846     		mov	r0, r5
 3070 0014 FFF7FEFF 		bl	strlen
 3071              	.LVL278:
 3072 0018 8046     		mov	r8, r0
 3073              	.LVL279:
 3074              	.LBB22:
1639:RTT/SEGGER_RTT.c ****     //
1640:RTT/SEGGER_RTT.c ****     // How we output depends upon the mode...
1641:RTT/SEGGER_RTT.c ****     //
1642:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3075              		.loc 1 1642 5 is_stmt 1 view .LVU859
 3076              		.loc 1 1642 5 view .LVU860
 3077              		.syntax unified
 3078              	@ 1642 "RTT/SEGGER_RTT.c" 1
 3079 001a EFF31186 		mrs   r6, basepri  
 3080 001e 4FF02001 		mov   r1, #32       
 3081 0022 81F31188 		msr   basepri, r1  
 3082              		
 3083              	@ 0 "" 2
 3084              	.LVL280:
 3085              		.loc 1 1642 22 view .LVU861
1643:RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 3086              		.loc 1 1643 5 view .LVU862
 3087              		.loc 1 1643 13 is_stmt 0 view .LVU863
 3088              		.thumb
 3089              		.syntax unified
 3090 0026 2E4F     		ldr	r7, .L226
 3091 0028 07F11800 		add	r0, r7, #24
 3092              	.LVL281:
 3093              		.loc 1 1643 13 view .LVU864
 3094 002c FFF7FEFF 		bl	_GetAvailWriteSpace
 3095              	.LVL282:
 3096 0030 8146     		mov	r9, r0
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 88


 3097              	.LVL283:
1644:RTT/SEGGER_RTT.c ****     switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
 3098              		.loc 1 1644 5 is_stmt 1 view .LVU865
 3099              		.loc 1 1644 18 is_stmt 0 view .LVU866
 3100 0032 FB6A     		ldr	r3, [r7, #44]
 3101              		.loc 1 1644 26 view .LVU867
 3102 0034 03F00303 		and	r3, r3, #3
 3103              		.loc 1 1644 5 view .LVU868
 3104 0038 012B     		cmp	r3, #1
 3105 003a 23D0     		beq	.L214
 3106 003c 022B     		cmp	r3, #2
 3107 003e 3BD0     		beq	.L215
 3108 0040 4BB1     		cbz	r3, .L223
 3109 0042 4FF0FF34 		mov	r4, #-1
 3110              	.LVL284:
 3111              	.L216:
1645:RTT/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1646:RTT/SEGGER_RTT.c ****       //
1647:RTT/SEGGER_RTT.c ****       // If we are in skip mode and there is no space for the whole
1648:RTT/SEGGER_RTT.c ****       // of this output, don't bother switching terminals at all.
1649:RTT/SEGGER_RTT.c ****       //
1650:RTT/SEGGER_RTT.c ****       if (Avail < (FragLen + 4u)) {
1651:RTT/SEGGER_RTT.c ****         Status = 0;
1652:RTT/SEGGER_RTT.c ****       } else {
1653:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
1654:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
1655:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
1656:RTT/SEGGER_RTT.c ****       }
1657:RTT/SEGGER_RTT.c ****       break;
1658:RTT/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1659:RTT/SEGGER_RTT.c ****       //
1660:RTT/SEGGER_RTT.c ****       // If we are in trim mode and there is not enough space for everything,
1661:RTT/SEGGER_RTT.c ****       // trim the output but always include the terminal switch.  If no room
1662:RTT/SEGGER_RTT.c ****       // for terminal switch, skip that totally.
1663:RTT/SEGGER_RTT.c ****       //
1664:RTT/SEGGER_RTT.c ****       if (Avail < 4u) {
1665:RTT/SEGGER_RTT.c ****         Status = -1;
1666:RTT/SEGGER_RTT.c ****       } else {
1667:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
1668:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
1669:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
1670:RTT/SEGGER_RTT.c ****       }
1671:RTT/SEGGER_RTT.c ****       break;
1672:RTT/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1673:RTT/SEGGER_RTT.c ****       //
1674:RTT/SEGGER_RTT.c ****       // If we are in blocking mode, output everything.
1675:RTT/SEGGER_RTT.c ****       //
1676:RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, TerminalId);
1677:RTT/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
1678:RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
1679:RTT/SEGGER_RTT.c ****       break;
1680:RTT/SEGGER_RTT.c ****     default:
1681:RTT/SEGGER_RTT.c ****       Status = -1;
1682:RTT/SEGGER_RTT.c ****       break;
1683:RTT/SEGGER_RTT.c ****     }
1684:RTT/SEGGER_RTT.c ****     //
1685:RTT/SEGGER_RTT.c ****     // Finish up.
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 89


1686:RTT/SEGGER_RTT.c ****     //
1687:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3112              		.loc 1 1687 5 is_stmt 1 view .LVU869
 3113              		.syntax unified
 3114              	@ 1687 "RTT/SEGGER_RTT.c" 1
 3115 0046 86F31188 		msr   basepri, r6  
 3116              		
 3117              	@ 0 "" 2
 3118              		.thumb
 3119              		.syntax unified
 3120              	.LBE22:
 3121              		.loc 1 1687 24 view .LVU870
 3122              	.LVL285:
 3123              	.L211:
1688:RTT/SEGGER_RTT.c ****   } else {
1689:RTT/SEGGER_RTT.c ****     Status = -1;
1690:RTT/SEGGER_RTT.c ****   }
1691:RTT/SEGGER_RTT.c ****   return Status;
1692:RTT/SEGGER_RTT.c **** }
 3124              		.loc 1 1692 1 is_stmt 0 view .LVU871
 3125 004a 2046     		mov	r0, r4
 3126 004c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3127              	.LVL286:
 3128              	.L222:
1625:RTT/SEGGER_RTT.c ****   //
 3129              		.loc 1 1625 3 is_stmt 1 discriminator 1 view .LVU872
 3130 0050 FFF7FEFF 		bl	_DoInit
 3131              	.LVL287:
1625:RTT/SEGGER_RTT.c ****   //
 3132              		.loc 1 1625 3 is_stmt 0 discriminator 1 view .LVU873
 3133 0054 DBE7     		b	.L212
 3134              	.LVL288:
 3135              	.L223:
 3136              	.LBB23:
1650:RTT/SEGGER_RTT.c ****         Status = 0;
 3137              		.loc 1 1650 7 is_stmt 1 view .LVU874
1650:RTT/SEGGER_RTT.c ****         Status = 0;
 3138              		.loc 1 1650 28 is_stmt 0 view .LVU875
 3139 0056 08F10403 		add	r3, r8, #4
1650:RTT/SEGGER_RTT.c ****         Status = 0;
 3140              		.loc 1 1650 10 view .LVU876
 3141 005a 8342     		cmp	r3, r0
 3142 005c 01D9     		bls	.L224
1651:RTT/SEGGER_RTT.c ****       } else {
 3143              		.loc 1 1651 16 view .LVU877
 3144 005e 0024     		movs	r4, #0
 3145 0060 F1E7     		b	.L216
 3146              	.L224:
1653:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 3147              		.loc 1 1653 9 is_stmt 1 view .LVU878
 3148 0062 1837     		adds	r7, r7, #24
 3149 0064 2146     		mov	r1, r4
 3150 0066 3846     		mov	r0, r7
 3151              	.LVL289:
1653:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 3152              		.loc 1 1653 9 is_stmt 0 view .LVU879
 3153 0068 FFF7FEFF 		bl	_PostTerminalSwitch
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 90


 3154              	.LVL290:
1654:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3155              		.loc 1 1654 9 is_stmt 1 view .LVU880
1654:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3156              		.loc 1 1654 23 is_stmt 0 view .LVU881
 3157 006c 4246     		mov	r2, r8
 3158 006e 2946     		mov	r1, r5
 3159 0070 3846     		mov	r0, r7
 3160 0072 FFF7FEFF 		bl	_WriteBlocking
 3161              	.LVL291:
 3162 0076 0446     		mov	r4, r0
 3163              	.LVL292:
1655:RTT/SEGGER_RTT.c ****       }
 3164              		.loc 1 1655 9 is_stmt 1 view .LVU882
 3165 0078 1A4B     		ldr	r3, .L226+4
 3166 007a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3167 007c 3846     		mov	r0, r7
 3168              	.LVL293:
1655:RTT/SEGGER_RTT.c ****       }
 3169              		.loc 1 1655 9 is_stmt 0 view .LVU883
 3170 007e FFF7FEFF 		bl	_PostTerminalSwitch
 3171              	.LVL294:
 3172 0082 E0E7     		b	.L216
 3173              	.LVL295:
 3174              	.L214:
1664:RTT/SEGGER_RTT.c ****         Status = -1;
 3175              		.loc 1 1664 7 is_stmt 1 view .LVU884
1664:RTT/SEGGER_RTT.c ****         Status = -1;
 3176              		.loc 1 1664 10 is_stmt 0 view .LVU885
 3177 0084 0328     		cmp	r0, #3
 3178 0086 02D8     		bhi	.L225
1665:RTT/SEGGER_RTT.c ****       } else {
 3179              		.loc 1 1665 16 view .LVU886
 3180 0088 4FF0FF34 		mov	r4, #-1
 3181 008c DBE7     		b	.L216
 3182              	.L225:
1667:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 3183              		.loc 1 1667 9 is_stmt 1 view .LVU887
 3184 008e 164F     		ldr	r7, .L226+8
 3185 0090 2146     		mov	r1, r4
 3186 0092 3846     		mov	r0, r7
 3187              	.LVL296:
1667:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 3188              		.loc 1 1667 9 is_stmt 0 view .LVU888
 3189 0094 FFF7FEFF 		bl	_PostTerminalSwitch
 3190              	.LVL297:
1668:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3191              		.loc 1 1668 9 is_stmt 1 view .LVU889
1668:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3192              		.loc 1 1668 66 is_stmt 0 view .LVU890
 3193 0098 A9F10402 		sub	r2, r9, #4
1668:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3194              		.loc 1 1668 23 view .LVU891
 3195 009c 4245     		cmp	r2, r8
 3196 009e 28BF     		it	cs
 3197 00a0 4246     		movcs	r2, r8
 3198 00a2 2946     		mov	r1, r5
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 91


 3199 00a4 3846     		mov	r0, r7
 3200 00a6 FFF7FEFF 		bl	_WriteBlocking
 3201              	.LVL298:
 3202 00aa 0446     		mov	r4, r0
 3203              	.LVL299:
1669:RTT/SEGGER_RTT.c ****       }
 3204              		.loc 1 1669 9 is_stmt 1 view .LVU892
 3205 00ac 0D4B     		ldr	r3, .L226+4
 3206 00ae 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3207 00b0 3846     		mov	r0, r7
 3208              	.LVL300:
1669:RTT/SEGGER_RTT.c ****       }
 3209              		.loc 1 1669 9 is_stmt 0 view .LVU893
 3210 00b2 FFF7FEFF 		bl	_PostTerminalSwitch
 3211              	.LVL301:
 3212 00b6 C6E7     		b	.L216
 3213              	.LVL302:
 3214              	.L215:
1676:RTT/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 3215              		.loc 1 1676 7 is_stmt 1 view .LVU894
 3216 00b8 0B4F     		ldr	r7, .L226+8
 3217 00ba 2146     		mov	r1, r4
 3218 00bc 3846     		mov	r0, r7
 3219              	.LVL303:
1676:RTT/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 3220              		.loc 1 1676 7 is_stmt 0 view .LVU895
 3221 00be FFF7FEFF 		bl	_PostTerminalSwitch
 3222              	.LVL304:
1677:RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 3223              		.loc 1 1677 7 is_stmt 1 view .LVU896
1677:RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 3224              		.loc 1 1677 21 is_stmt 0 view .LVU897
 3225 00c2 4246     		mov	r2, r8
 3226 00c4 2946     		mov	r1, r5
 3227 00c6 3846     		mov	r0, r7
 3228 00c8 FFF7FEFF 		bl	_WriteBlocking
 3229              	.LVL305:
 3230 00cc 0446     		mov	r4, r0
 3231              	.LVL306:
1678:RTT/SEGGER_RTT.c ****       break;
 3232              		.loc 1 1678 7 is_stmt 1 view .LVU898
 3233 00ce 054B     		ldr	r3, .L226+4
 3234 00d0 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3235 00d2 3846     		mov	r0, r7
 3236              	.LVL307:
1678:RTT/SEGGER_RTT.c ****       break;
 3237              		.loc 1 1678 7 is_stmt 0 view .LVU899
 3238 00d4 FFF7FEFF 		bl	_PostTerminalSwitch
 3239              	.LVL308:
1679:RTT/SEGGER_RTT.c ****     default:
 3240              		.loc 1 1679 7 is_stmt 1 view .LVU900
 3241 00d8 B5E7     		b	.L216
 3242              	.LVL309:
 3243              	.L217:
1679:RTT/SEGGER_RTT.c ****     default:
 3244              		.loc 1 1679 7 is_stmt 0 view .LVU901
 3245              	.LBE23:
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 92


1689:RTT/SEGGER_RTT.c ****   }
 3246              		.loc 1 1689 12 view .LVU902
 3247 00da 4FF0FF34 		mov	r4, #-1
 3248              	.LVL310:
1691:RTT/SEGGER_RTT.c **** }
 3249              		.loc 1 1691 3 is_stmt 1 view .LVU903
1691:RTT/SEGGER_RTT.c **** }
 3250              		.loc 1 1691 10 is_stmt 0 view .LVU904
 3251 00de B4E7     		b	.L211
 3252              	.L227:
 3253              		.align	2
 3254              	.L226:
 3255 00e0 00000000 		.word	.LANCHOR1
 3256 00e4 00000000 		.word	.LANCHOR4
 3257 00e8 18000000 		.word	.LANCHOR1+24
 3258              		.cfi_endproc
 3259              	.LFE29:
 3261              		.global	_SEGGER_RTT
 3262              		.section	.bss._ActiveTerminal,"aw",%nobits
 3263              		.set	.LANCHOR4,. + 0
 3266              	_ActiveTerminal:
 3267 0000 00       		.space	1
 3268              		.section	.bss._SEGGER_RTT,"aw",%nobits
 3269              		.align	2
 3270              		.set	.LANCHOR1,. + 0
 3273              	_SEGGER_RTT:
 3274 0000 00000000 		.space	168
 3274      00000000 
 3274      00000000 
 3274      00000000 
 3274      00000000 
 3275              		.section	.bss._acDownBuffer,"aw",%nobits
 3276              		.align	2
 3277              		.set	.LANCHOR3,. + 0
 3280              	_acDownBuffer:
 3281 0000 00000000 		.space	16
 3281      00000000 
 3281      00000000 
 3281      00000000 
 3282              		.section	.bss._acUpBuffer,"aw",%nobits
 3283              		.align	2
 3284              		.set	.LANCHOR2,. + 0
 3287              	_acUpBuffer:
 3288 0000 00000000 		.space	1024
 3288      00000000 
 3288      00000000 
 3288      00000000 
 3288      00000000 
 3289              		.section	.rodata._aTerminalId,"a"
 3290              		.align	2
 3291              		.set	.LANCHOR0,. + 0
 3294              	_aTerminalId:
 3295 0000 30313233 		.ascii	"0123456789ABCDEF"
 3295      34353637 
 3295      38394142 
 3295      43444546 
 3296              		.text
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 93


 3297              	.Letext0:
 3298              		.file 2 "RTT/inc/SEGGER_RTT.h"
 3299              		.file 3 "d:\\gun arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\string.h"
 3300              		.file 4 "<built-in>"
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 94


DEFINED SYMBOLS
                            *ABS*:00000000 SEGGER_RTT.c
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:20     .text._GetAvailWriteSpace:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:25     .text._GetAvailWriteSpace:00000000 _GetAvailWriteSpace
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:79     .text._WriteNoCheck:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:84     .text._WriteNoCheck:00000000 _WriteNoCheck
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:174    .text._WriteBlocking:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:179    .text._WriteBlocking:00000000 _WriteBlocking
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:318    .text._PostTerminalSwitch:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:323    .text._PostTerminalSwitch:00000000 _PostTerminalSwitch
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:365    .text._PostTerminalSwitch:00000020 $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:370    .rodata._DoInit.str1.4:00000000 $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:380    .text._DoInit:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:385    .text._DoInit:00000000 _DoInit
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:465    .text._DoInit:0000004c $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:475    .text.SEGGER_RTT_ReadNoLock:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:481    .text.SEGGER_RTT_ReadNoLock:00000000 SEGGER_RTT_ReadNoLock
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:651    .text.SEGGER_RTT_ReadNoLock:0000009c $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:656    .text.SEGGER_RTT_Read:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:662    .text.SEGGER_RTT_Read:00000000 SEGGER_RTT_Read
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:714    .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:720    .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000000 SEGGER_RTT_WriteWithOverwriteNoLock
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:944    .text.SEGGER_RTT_WriteWithOverwriteNoLock:0000010c $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:949    .text.SEGGER_RTT_WriteNoLock:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:955    .text.SEGGER_RTT_WriteNoLock:00000000 SEGGER_RTT_WriteNoLock
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1070   .text.SEGGER_RTT_WriteNoLock:00000068 $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1075   .text.SEGGER_RTT_Write:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1081   .text.SEGGER_RTT_Write:00000000 SEGGER_RTT_Write
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1154   .text.SEGGER_RTT_Write:00000030 $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1159   .text.SEGGER_RTT_WriteString:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1165   .text.SEGGER_RTT_WriteString:00000000 SEGGER_RTT_WriteString
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1208   .text.SEGGER_RTT_PutCharSkipNoLock:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1214   .text.SEGGER_RTT_PutCharSkipNoLock:00000000 SEGGER_RTT_PutCharSkipNoLock
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1308   .text.SEGGER_RTT_PutCharSkipNoLock:0000004c $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1313   .text.SEGGER_RTT_PutCharSkip:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1319   .text.SEGGER_RTT_PutCharSkip:00000000 SEGGER_RTT_PutCharSkip
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1445   .text.SEGGER_RTT_PutCharSkip:0000006c $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1451   .text.SEGGER_RTT_PutChar:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1457   .text.SEGGER_RTT_PutChar:00000000 SEGGER_RTT_PutChar
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1607   .text.SEGGER_RTT_PutChar:0000008c $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1613   .text.SEGGER_RTT_GetKey:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1619   .text.SEGGER_RTT_GetKey:00000000 SEGGER_RTT_GetKey
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1671   .text.SEGGER_RTT_WaitKey:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1677   .text.SEGGER_RTT_WaitKey:00000000 SEGGER_RTT_WaitKey
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1707   .text.SEGGER_RTT_HasKey:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1713   .text.SEGGER_RTT_HasKey:00000000 SEGGER_RTT_HasKey
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1766   .text.SEGGER_RTT_HasKey:00000020 $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1771   .text.SEGGER_RTT_HasData:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1777   .text.SEGGER_RTT_HasData:00000000 SEGGER_RTT_HasData
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1808   .text.SEGGER_RTT_HasData:0000001c $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1813   .text.SEGGER_RTT_HasDataUp:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1819   .text.SEGGER_RTT_HasDataUp:00000000 SEGGER_RTT_HasDataUp
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1850   .text.SEGGER_RTT_HasDataUp:0000001c $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1855   .text.SEGGER_RTT_AllocDownBuffer:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1861   .text.SEGGER_RTT_AllocDownBuffer:00000000 SEGGER_RTT_AllocDownBuffer
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:1994   .text.SEGGER_RTT_AllocDownBuffer:00000070 $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:2000   .text.SEGGER_RTT_AllocUpBuffer:00000000 $t
ARM GAS  C:\Users\hh\AppData\Local\Temp\ccROldoe.s 			page 95


C:\Users\hh\AppData\Local\Temp\ccROldoe.s:2006   .text.SEGGER_RTT_AllocUpBuffer:00000000 SEGGER_RTT_AllocUpBuffer
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:2144   .text.SEGGER_RTT_AllocUpBuffer:0000007c $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:2150   .text.SEGGER_RTT_ConfigUpBuffer:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:2156   .text.SEGGER_RTT_ConfigUpBuffer:00000000 SEGGER_RTT_ConfigUpBuffer
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:2279   .text.SEGGER_RTT_ConfigUpBuffer:00000070 $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:2284   .text.SEGGER_RTT_ConfigDownBuffer:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:2290   .text.SEGGER_RTT_ConfigDownBuffer:00000000 SEGGER_RTT_ConfigDownBuffer
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:2410   .text.SEGGER_RTT_ConfigDownBuffer:00000064 $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:2415   .text.SEGGER_RTT_SetNameUpBuffer:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:2421   .text.SEGGER_RTT_SetNameUpBuffer:00000000 SEGGER_RTT_SetNameUpBuffer
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:2513   .text.SEGGER_RTT_SetNameUpBuffer:00000040 $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:2518   .text.SEGGER_RTT_SetNameDownBuffer:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:2524   .text.SEGGER_RTT_SetNameDownBuffer:00000000 SEGGER_RTT_SetNameDownBuffer
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:2614   .text.SEGGER_RTT_SetNameDownBuffer:00000040 $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:2619   .text.SEGGER_RTT_SetFlagsUpBuffer:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:2625   .text.SEGGER_RTT_SetFlagsUpBuffer:00000000 SEGGER_RTT_SetFlagsUpBuffer
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:2715   .text.SEGGER_RTT_SetFlagsUpBuffer:00000040 $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:2720   .text.SEGGER_RTT_SetFlagsDownBuffer:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:2726   .text.SEGGER_RTT_SetFlagsDownBuffer:00000000 SEGGER_RTT_SetFlagsDownBuffer
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:2816   .text.SEGGER_RTT_SetFlagsDownBuffer:00000040 $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:2821   .text.SEGGER_RTT_Init:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:2827   .text.SEGGER_RTT_Init:00000000 SEGGER_RTT_Init
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:2847   .text.SEGGER_RTT_SetTerminal:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:2853   .text.SEGGER_RTT_SetTerminal:00000000 SEGGER_RTT_SetTerminal
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:3014   .text.SEGGER_RTT_SetTerminal:0000007c $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:3022   .text.SEGGER_RTT_TerminalOut:00000000 $t
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:3028   .text.SEGGER_RTT_TerminalOut:00000000 SEGGER_RTT_TerminalOut
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:3255   .text.SEGGER_RTT_TerminalOut:000000e0 $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:3273   .bss._SEGGER_RTT:00000000 _SEGGER_RTT
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:3266   .bss._ActiveTerminal:00000000 _ActiveTerminal
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:3267   .bss._ActiveTerminal:00000000 $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:3269   .bss._SEGGER_RTT:00000000 $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:3276   .bss._acDownBuffer:00000000 $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:3280   .bss._acDownBuffer:00000000 _acDownBuffer
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:3283   .bss._acUpBuffer:00000000 $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:3287   .bss._acUpBuffer:00000000 _acUpBuffer
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:3290   .rodata._aTerminalId:00000000 $d
C:\Users\hh\AppData\Local\Temp\ccROldoe.s:3294   .rodata._aTerminalId:00000000 _aTerminalId

UNDEFINED SYMBOLS
memcpy
strlen
